#ifdef CHASTE_CVODE
//! @file
//!
//! This source file was generated from CellML by chaste_codegen version 0.5.3
//!
//! Model: tentusscher_model_2006_epi_analytic
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: AnalyticCvode)
//! on 2021-01-05 10:09:43
//!
//! <autogenerated>

#include "ten_tusscher_model_2006_epi_analyticCvode.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"


boost::shared_ptr<RegularStimulus> Cellten_tusscher_model_2006_epi_analyticFromCellMLCvode::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__stim_amplitude_converted = -52.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__membrane__stim_duration = 1.0; // millisecond
        const double var_chaste_interface__membrane__stim_period = 1000.0; // millisecond
        const double var_chaste_interface__membrane__stim_start = 100.0; // millisecond
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__stim_amplitude_converted),
                var_chaste_interface__membrane__stim_duration,
                var_chaste_interface__membrane__stim_period,
                var_chaste_interface__membrane__stim_start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }

    double Cellten_tusscher_model_2006_epi_analyticFromCellMLCvode::GetIntracellularCalciumConcentration()
    {
        return NV_Ith_S(mStateVariables, 1);
    }

double Cellten_tusscher_model_2006_epi_analyticFromCellMLCvode::calculateAnalyticVoltage(){
  const N_Vector rY = mStateVariables;
  const double F = 96.4853415; // C per mMol
  const double V_c = 0.016404;
  const double Cm = 0.000185;
  const double V_sr = 0.001094;
  const double V_ss = 5.468e-05;

  const double C0 = -0.143547357130696;
  const double K_i = NV_Ith_S(rY, 18);
  const double Na_i = NV_Ith_S(rY, 17);
  const double Ca_i = NV_Ith_S(rY, 1);

  const double Ca_ss = NV_Ith_S(rY, 15);
  const double K_buf_ss  = 0.00025;
  const double Buf_ss = 0.4;
  const double Ca_ss_tot = Ca_ss + Ca_ss * Buf_ss / (Ca_ss + K_buf_ss);

  const double Ca_SR = NV_Ith_S(rY, 14);
  const double K_buf_SR = 0.3;
  const double Buf_sr = 10;
  const double Ca_SR_tot = Ca_SR+Ca_SR*Buf_sr/(Ca_SR+K_buf_SR);

  const double Buf_c = 0.2;
  const double K_buf_c = 0.001;
  const double Ca_i_tot = Ca_i+Ca_i*Buf_c/(Ca_i+K_buf_c);

  const double K_o = 5.4000000000000004; // millimolar
  const double Ca_o = 2.0; // millimolar
  const double Na_o = 140.0; // millimolar

  const double V = F/Cm*V_c*(K_i+Na_i+2*Ca_i_tot+2*V_sr/V_c*Ca_SR_tot+2*V_ss/V_c*Ca_ss_tot-K_o-Ca_o-Na_o-C0) + mIntegrationConstant;

  // std::cout << V << " " << NV_Ith_S(rY, 0) << "\n";

  return V;
}

    Cellten_tusscher_model_2006_epi_analyticFromCellMLCvode::Cellten_tusscher_model_2006_epi_analyticFromCellMLCvode(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                19,
                0,
                pIntracellularStimulus)
    {

        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellten_tusscher_model_2006_epi_analyticFromCellMLCvode>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        mUseAnalyticJacobian = false;
        mHasAnalyticJacobian = false;

        NV_Ith_S(this->mParameters, 0) = 0.00036000000000000002; // (var_calcium_dynamics__V_leak) [per_millisecond]
        NV_Ith_S(this->mParameters, 1) = 0.10199999999999999; // (var_calcium_dynamics__V_rel) [per_millisecond]
        NV_Ith_S(this->mParameters, 2) = 0.0063749999999999996; // (var_calcium_dynamics__Vmax_up) [millimolar_per_millisecond]
        NV_Ith_S(this->mParameters, 3) = 1.0; // (var_sodium_dynamics__conc_clamp) [dimensionless]
        NV_Ith_S(this->mParameters, 4) = 2.0; // (var_calcium_dynamics__Ca_o) [millimolar]
        NV_Ith_S(this->mParameters, 5) = 5.4000000000000004; // (var_potassium_dynamics__K_o) [millimolar]
        NV_Ith_S(this->mParameters, 6) = 140.0; // (var_sodium_dynamics__Na_o) [millimolar]
        NV_Ith_S(this->mParameters, 7) = 3.9799999999999998e-5; // (var_L_type_Ca_current__g_CaL) [litre_per_farad_second]
        NV_Ith_S(this->mParameters, 8) = 0.00059199999999999997; // (var_calcium_background_current__g_bca) [nanoS_per_picoF]
        NV_Ith_S(this->mParameters, 9) = 0.00029; // (var_sodium_background_current__g_bna) [nanoS_per_picoF]
        NV_Ith_S(this->mParameters, 10) = 0.12379999999999999; // (var_calcium_pump_current__g_pCa) [picoA_per_picoF]
        NV_Ith_S(this->mParameters, 11) = 0.185; // (var_membrane__Cm) [microF]
        NV_Ith_S(this->mParameters, 12) = 14.837999999999999; // (var_fast_sodium_current__g_Na) [nanoS_per_picoF]
        NV_Ith_S(this->mParameters, 13) = 0; // (var_fast_sodium_current__perc_reduced_inact_for_IpNa) [dimensionless]
        NV_Ith_S(this->mParameters, 14) = 0; // (var_fast_sodium_current__shift_INa_inact) [millivolt]
        NV_Ith_S(this->mParameters, 15) = 5.4050000000000002; // (var_inward_rectifier_potassium_current__g_K1) [nanoS_per_picoF]
        NV_Ith_S(this->mParameters, 16) = 0.0146; // (var_potassium_pump_current__g_pK) [nanoS_per_picoF]
        NV_Ith_S(this->mParameters, 17) = 0.153; // (var_rapid_time_dependent_potassium_current__g_Kr) [nanoS_per_picoF]
        NV_Ith_S(this->mParameters, 18) = 0.39200000000000002; // (var_slow_time_dependent_potassium_current__g_Ks) [nanoS_per_picoF]
        NV_Ith_S(this->mParameters, 19) = 1000.0; // (var_sodium_calcium_exchanger_current__K_NaCa) [picoA_per_picoF]
        NV_Ith_S(this->mParameters, 20) = 2.7240000000000002; // (var_sodium_potassium_pump_current__P_NaK) [picoA_per_picoF]
        NV_Ith_S(this->mParameters, 21) = 0.29399999999999998; // (var_transient_outward_current__g_to) [nanoS_per_picoF]
        mIntegrationConstant = GetStdVecStateVariables()[0] - calculateAnalyticVoltage();
    }

    Cellten_tusscher_model_2006_epi_analyticFromCellMLCvode::~Cellten_tusscher_model_2006_epi_analyticFromCellMLCvode()
    {
    }


    void Cellten_tusscher_model_2006_epi_analyticFromCellMLCvode::VerifyStateVariables()
    {
        /* We only expect CVODE to keep state variables to within its tolerances,
         * not exactly the bounds prescribed to each variable that are checked here.
         *
         * For 99.99% of paces this->mAbsTol works,
         * For 99.999% of paces 10*this->mAbsTol is fine,
         * but unfortunately 100x seems to be required on rare occasions for upstrokes.
         * This sounds bad, but is probably typically only 1e-5 or 1e-6.
         */
        const double tol = 100*this->mAbsTol;
        N_Vector rY = rGetStateVariables();
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.00172
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.7444
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.7045
        double var_chaste_interface__L_type_Ca_current_d_gate__d = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 3.373e-05
        double var_chaste_interface__L_type_Ca_current_f_gate__f = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.7888
        double var_chaste_interface__L_type_Ca_current_f2_gate__f2 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.9755
        double var_chaste_interface__L_type_Ca_current_fCass_gate__fCass = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.9953
        
        if (var_chaste_interface__fast_sodium_current_m_gate__m < 0.0 - tol || var_chaste_interface__fast_sodium_current_m_gate__m > 1.0 + tol)
        {
            EXCEPTION(DumpState("State variable membrane_fast_sodium_current_m_gate has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        if (var_chaste_interface__fast_sodium_current_h_gate__h < 0.0 - tol || var_chaste_interface__fast_sodium_current_h_gate__h > 1.0 + tol)
        {
            EXCEPTION(DumpState("State variable membrane_fast_sodium_current_h_gate has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        if (var_chaste_interface__fast_sodium_current_j_gate__j < 0.0 - tol || var_chaste_interface__fast_sodium_current_j_gate__j > 1.0 + tol)
        {
            EXCEPTION(DumpState("State variable membrane_fast_sodium_current_j_gate has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        if (var_chaste_interface__L_type_Ca_current_d_gate__d < 0.0 - tol || var_chaste_interface__L_type_Ca_current_d_gate__d > 1.0 + tol)
        {
            EXCEPTION(DumpState("State variable membrane_L_type_calcium_current_d_gate has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        if (var_chaste_interface__L_type_Ca_current_f_gate__f < 0.0 - tol || var_chaste_interface__L_type_Ca_current_f_gate__f > 1.0 + tol)
        {
            EXCEPTION(DumpState("State variable membrane_L_type_calcium_current_f_gate has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        if (var_chaste_interface__L_type_Ca_current_f2_gate__f2 < 0.0 - tol || var_chaste_interface__L_type_Ca_current_f2_gate__f2 > 1.0 + tol)
        {
            EXCEPTION(DumpState("State variable membrane_L_type_calcium_current_f2_gate has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        if (var_chaste_interface__L_type_Ca_current_fCass_gate__fCass < 0.0 - tol || var_chaste_interface__L_type_Ca_current_fCass_gate__fCass > 1.0 + tol)
        {
            EXCEPTION(DumpState("State variable membrane_L_type_calcium_current_fCa_gate has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        
    }

    
    double Cellten_tusscher_model_2006_epi_analyticFromCellMLCvode::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -85.23
        double var_chaste_interface__calcium_dynamics__Ca_i = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.000126
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.00621
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.4712
        double var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.0095
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.00172
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.7444
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.7045
        double var_chaste_interface__L_type_Ca_current_d_gate__d = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 3.373e-05
        double var_chaste_interface__L_type_Ca_current_f_gate__f = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.7888
        double var_chaste_interface__L_type_Ca_current_f2_gate__f2 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.9755
        double var_chaste_interface__L_type_Ca_current_fCass_gate__fCass = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.9953
        double var_chaste_interface__transient_outward_current_s_gate__s = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.999998
        double var_chaste_interface__transient_outward_current_r_gate__r = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 2.42e-08
        double var_chaste_interface__calcium_dynamics__Ca_ss = NV_Ith_S(rY, 15);
        // Units: millimolar; Initial value: 0.00036
        double var_chaste_interface__sodium_dynamics__Na_i = NV_Ith_S(rY, 17);
        // Units: millimolar; Initial value: 8.604
        double var_chaste_interface__potassium_dynamics__K_i = NV_Ith_S(rY, 18);
        // Units: millimolar; Initial value: 136.89
        
        const double var_L_type_Ca_current__V_high = 15.000999999999999; // millivolt
        const double var_L_type_Ca_current__V_low = 14.999000000000001; // millivolt
        const double var_calcium_pump_current__K_pCa = 0.00050000000000000001; // millimolar
        const double var_calcium_pump_current__i_p_Ca = var_chaste_interface__calcium_dynamics__Ca_i * NV_Ith_S(mParameters, 10) / (var_chaste_interface__calcium_dynamics__Ca_i + var_calcium_pump_current__K_pCa); // picoA_per_picoF
        const double var_calcium_pump_current__i_p_Ca_converted = HeartConfig::Instance()->GetCapacitance() * var_calcium_pump_current__i_p_Ca; // uA_per_cm2
        const double var_membrane__F = 96485.341499999995; // coulomb_per_millimole
        const double var_membrane__R = 8314.4719999999998; // joule_per_mole_kelvin
        const double var_membrane__T = 310.0; // kelvin
        const double var_L_type_Ca_current__temp = (((var_L_type_Ca_current__V_low > var_chaste_interface__membrane__V) || (var_L_type_Ca_current__V_high < var_chaste_interface__membrane__V)) ? ((-15.0 + var_chaste_interface__membrane__V) * (-NV_Ith_S(mParameters, 4) + 0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * exp(2.0 * (-15.0 + var_chaste_interface__membrane__V) * var_membrane__F / (var_membrane__R * var_membrane__T))) / (-1.0 + exp(2.0 * (-15.0 + var_chaste_interface__membrane__V) * var_membrane__F / (var_membrane__R * var_membrane__T)))) : (0.5 * (-15.0 + var_L_type_Ca_current__V_high) * (-NV_Ith_S(mParameters, 4) + 0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * exp(2.0 * (-15.0 + var_L_type_Ca_current__V_high) * var_membrane__F / (var_membrane__R * var_membrane__T))) / (-1.0 + exp(2.0 * (-15.0 + var_L_type_Ca_current__V_high) * var_membrane__F / (var_membrane__R * var_membrane__T))) + 0.5 * (-15.0 + var_L_type_Ca_current__V_low) * (-NV_Ith_S(mParameters, 4) + 0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * exp(2.0 * (-15.0 + var_L_type_Ca_current__V_low) * var_membrane__F / (var_membrane__R * var_membrane__T))) / (-1.0 + exp(2.0 * (-15.0 + var_L_type_Ca_current__V_low) * var_membrane__F / (var_membrane__R * var_membrane__T))))); // millivolt_millimoles
        const double var_L_type_Ca_current__i_CaL = 4.0 * pow(var_membrane__F, 2) * NV_Ith_S(mParameters, 7) * var_L_type_Ca_current__temp * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f2_gate__f2 * var_chaste_interface__L_type_Ca_current_fCass_gate__fCass * var_chaste_interface__L_type_Ca_current_f_gate__f / (var_membrane__R * var_membrane__T); // picoA_per_picoF
        const double var_L_type_Ca_current__i_CaL_converted = HeartConfig::Instance()->GetCapacitance() * var_L_type_Ca_current__i_CaL; // uA_per_cm2
        const double var_reversal_potentials__E_Ca = 0.5 * var_membrane__R * var_membrane__T * log(NV_Ith_S(mParameters, 4) / var_chaste_interface__calcium_dynamics__Ca_i) / var_membrane__F; // millivolt
        const double var_calcium_background_current__i_b_Ca = (-var_reversal_potentials__E_Ca + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 8); // picoA_per_picoF
        const double var_calcium_background_current__i_b_Ca_converted = HeartConfig::Instance()->GetCapacitance() * var_calcium_background_current__i_b_Ca; // uA_per_cm2
        const double var_reversal_potentials__E_K = var_membrane__R * var_membrane__T * log(NV_Ith_S(mParameters, 5) / var_chaste_interface__potassium_dynamics__K_i) / var_membrane__F; // millivolt
        const double var_inward_rectifier_potassium_current__alpha_K1 = 0.10000000000000001 / (1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__membrane__V - 0.059999999999999998 * var_reversal_potentials__E_K)); // dimensionless
        const double var_inward_rectifier_potassium_current__beta_K1 = (3.0 * exp(0.02 + 0.00020000000000000001 * var_chaste_interface__membrane__V - 0.00020000000000000001 * var_reversal_potentials__E_K) + exp(-1.0 + 0.10000000000000001 * var_chaste_interface__membrane__V - 0.10000000000000001 * var_reversal_potentials__E_K)) / (1.0 + exp(0.5 * var_reversal_potentials__E_K - 0.5 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_inward_rectifier_potassium_current__xK1_inf = var_inward_rectifier_potassium_current__alpha_K1 / (var_inward_rectifier_potassium_current__alpha_K1 + var_inward_rectifier_potassium_current__beta_K1); // dimensionless
        const double var_inward_rectifier_potassium_current__i_K1 = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 5)) * (-var_reversal_potentials__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 15) * var_inward_rectifier_potassium_current__xK1_inf; // picoA_per_picoF
        const double var_inward_rectifier_potassium_current__i_K1_converted = HeartConfig::Instance()->GetCapacitance() * var_inward_rectifier_potassium_current__i_K1; // uA_per_cm2
        const double var_potassium_pump_current__i_p_K = (-var_reversal_potentials__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 16) / (1.0 + exp(4.1806020066889626 - 0.16722408026755853 * var_chaste_interface__membrane__V)); // picoA_per_picoF
        const double var_potassium_pump_current__i_p_K_converted = HeartConfig::Instance()->GetCapacitance() * var_potassium_pump_current__i_p_K; // uA_per_cm2
        const double var_rapid_time_dependent_potassium_current__i_Kr = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 5)) * (-var_reversal_potentials__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 17) * var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2; // picoA_per_picoF
        const double var_rapid_time_dependent_potassium_current__i_Kr_converted = HeartConfig::Instance()->GetCapacitance() * var_rapid_time_dependent_potassium_current__i_Kr; // uA_per_cm2
        const double var_reversal_potentials__P_kna = 0.029999999999999999; // dimensionless
        const double var_sodium_calcium_exchanger_current__K_sat = 0.10000000000000001; // dimensionless
        const double var_sodium_calcium_exchanger_current__Km_Ca = 1.3799999999999999; // millimolar
        const double var_sodium_calcium_exchanger_current__Km_Nai = 87.5; // millimolar
        const double var_sodium_calcium_exchanger_current__alpha = 2.5; // dimensionless
        const double var_sodium_calcium_exchanger_current__gamma = 0.34999999999999998; // dimensionless
        const double var_reversal_potentials__E_Ks = var_membrane__R * var_membrane__T * log((var_reversal_potentials__P_kna * NV_Ith_S(mParameters, 6) + NV_Ith_S(mParameters, 5)) / (var_reversal_potentials__P_kna * var_chaste_interface__sodium_dynamics__Na_i + var_chaste_interface__potassium_dynamics__K_i)) / var_membrane__F; // millivolt
        const double var_reversal_potentials__E_Na = var_membrane__R * var_membrane__T * log(NV_Ith_S(mParameters, 6) / var_chaste_interface__sodium_dynamics__Na_i) / var_membrane__F; // millivolt
        const double var_fast_sodium_current__i_Na = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_reversal_potentials__E_Na + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 12) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // picoA_per_picoF
        const double var_fast_sodium_current__i_Na_converted = HeartConfig::Instance()->GetCapacitance() * var_fast_sodium_current__i_Na; // uA_per_cm2
        const double var_slow_time_dependent_potassium_current__i_Ks = pow(var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs, 2) * (-var_reversal_potentials__E_Ks + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 18); // picoA_per_picoF
        const double var_slow_time_dependent_potassium_current__i_Ks_converted = HeartConfig::Instance()->GetCapacitance() * var_slow_time_dependent_potassium_current__i_Ks; // uA_per_cm2
        const double var_sodium_background_current__i_b_Na = (-var_reversal_potentials__E_Na + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 9); // picoA_per_picoF
        const double var_sodium_background_current__i_b_Na_converted = HeartConfig::Instance()->GetCapacitance() * var_sodium_background_current__i_b_Na; // uA_per_cm2
        const double var_sodium_calcium_exchanger_current__i_NaCa = (pow(var_chaste_interface__sodium_dynamics__Na_i, 3) * NV_Ith_S(mParameters, 4) * exp(var_membrane__F * var_chaste_interface__membrane__V * var_sodium_calcium_exchanger_current__gamma / (var_membrane__R * var_membrane__T)) - pow(NV_Ith_S(mParameters, 6), 3) * var_chaste_interface__calcium_dynamics__Ca_i * var_sodium_calcium_exchanger_current__alpha * exp((-1.0 + var_sodium_calcium_exchanger_current__gamma) * var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T))) * NV_Ith_S(mParameters, 19) / ((1.0 + var_sodium_calcium_exchanger_current__K_sat * exp((-1.0 + var_sodium_calcium_exchanger_current__gamma) * var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T))) * (pow(var_sodium_calcium_exchanger_current__Km_Nai, 3) + pow(NV_Ith_S(mParameters, 6), 3)) * (NV_Ith_S(mParameters, 4) + var_sodium_calcium_exchanger_current__Km_Ca)); // picoA_per_picoF
        const double var_sodium_calcium_exchanger_current__i_NaCa_converted = HeartConfig::Instance()->GetCapacitance() * var_sodium_calcium_exchanger_current__i_NaCa; // uA_per_cm2
        const double var_sodium_potassium_pump_current__K_mNa = 40.0; // millimolar
        const double var_sodium_potassium_pump_current__K_mk = 1.0; // millimolar
        const double var_sodium_potassium_pump_current__i_NaK = NV_Ith_S(mParameters, 5) * var_chaste_interface__sodium_dynamics__Na_i * NV_Ith_S(mParameters, 20) / ((NV_Ith_S(mParameters, 5) + var_sodium_potassium_pump_current__K_mk) * (var_chaste_interface__sodium_dynamics__Na_i + var_sodium_potassium_pump_current__K_mNa) * (1.0 + 0.035299999999999998 * exp(-var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T)) + 0.1245 * exp(-0.10000000000000001 * var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T)))); // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK_converted = HeartConfig::Instance()->GetCapacitance() * var_sodium_potassium_pump_current__i_NaK; // uA_per_cm2
        const double var_transient_outward_current__i_to = (-var_reversal_potentials__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 21) * var_chaste_interface__transient_outward_current_r_gate__r * var_chaste_interface__transient_outward_current_s_gate__s; // picoA_per_picoF
        const double var_transient_outward_current__i_to_converted = HeartConfig::Instance()->GetCapacitance() * var_transient_outward_current__i_to; // uA_per_cm2
        const double var_chaste_interface__i_ionic = var_L_type_Ca_current__i_CaL_converted + var_calcium_background_current__i_b_Ca_converted + var_calcium_pump_current__i_p_Ca_converted + var_fast_sodium_current__i_Na_converted + var_inward_rectifier_potassium_current__i_K1_converted + var_potassium_pump_current__i_p_K_converted + var_rapid_time_dependent_potassium_current__i_Kr_converted + var_slow_time_dependent_potassium_current__i_Ks_converted + var_sodium_background_current__i_b_Na_converted + var_sodium_calcium_exchanger_current__i_NaCa_converted + var_sodium_potassium_pump_current__i_NaK_converted + var_transient_outward_current__i_to_converted; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellten_tusscher_model_2006_epi_analyticFromCellMLCvode::EvaluateYDerivatives(double var_chaste_interface__environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
      double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY,0));
      // double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : calculateAnalyticVoltage());
        // Units: millivolt; Initial value: -85.23
        double var_chaste_interface__calcium_dynamics__Ca_i = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.000126
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.00621
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.4712
        double var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.0095
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.00172
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.7444
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.7045
        double var_chaste_interface__L_type_Ca_current_d_gate__d = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 3.373e-05
        double var_chaste_interface__L_type_Ca_current_f_gate__f = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.7888
        double var_chaste_interface__L_type_Ca_current_f2_gate__f2 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.9755
        double var_chaste_interface__L_type_Ca_current_fCass_gate__fCass = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.9953
        double var_chaste_interface__transient_outward_current_s_gate__s = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.999998
        double var_chaste_interface__transient_outward_current_r_gate__r = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 2.42e-08
        double var_chaste_interface__calcium_dynamics__Ca_SR = NV_Ith_S(rY, 14);
        // Units: millimolar; Initial value: 3.64
        double var_chaste_interface__calcium_dynamics__Ca_ss = NV_Ith_S(rY, 15);
        // Units: millimolar; Initial value: 0.00036
        double var_chaste_interface__calcium_dynamics__R_prime = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.9073
        double var_chaste_interface__sodium_dynamics__Na_i = NV_Ith_S(rY, 17);
        // Units: millimolar; Initial value: 8.604
        double var_chaste_interface__potassium_dynamics__K_i = NV_Ith_S(rY, 18);
        // Units: millimolar; Initial value: 136.89

        // Mathematics
        double d_dt_chaste_interface_var_membrane__V;
        const double var_L_type_Ca_current__V_high = 15.000999999999999; // millivolt
        const double var_L_type_Ca_current__V_low = 14.999000000000001; // millivolt
        const double var_calcium_dynamics__Buf_c = 0.20000000000000001; // millimolar
        const double var_calcium_dynamics__Buf_sr = 10.0; // millimolar
        const double var_calcium_dynamics__Buf_ss = 0.40000000000000002; // millimolar
        const double var_L_type_Ca_current_fCass_gate__fCass_inf = 0.40000000000000002 + 0.59999999999999998 / (1.0 + 399.99999999999994 * pow(var_chaste_interface__calcium_dynamics__Ca_ss, 2)); // dimensionless
        const double var_L_type_Ca_current_fCass_gate__tau_fCass = 2.0 + 80.0 / (1.0 + 399.99999999999994 * pow(var_chaste_interface__calcium_dynamics__Ca_ss, 2)); // millisecond
        const double d_dt_chaste_interface_var_L_type_Ca_current_fCass_gate__fCass = (-var_chaste_interface__L_type_Ca_current_fCass_gate__fCass + var_L_type_Ca_current_fCass_gate__fCass_inf) / var_L_type_Ca_current_fCass_gate__tau_fCass; // 1 / millisecond
        const double var_calcium_dynamics__EC = 1.5; // millimolar
        const double var_calcium_dynamics__K_buf_c = 0.001; // millimolar
        const double var_calcium_dynamics__Ca_i_bufc = 1 / (1.0 + var_calcium_dynamics__Buf_c * var_calcium_dynamics__K_buf_c / pow((var_chaste_interface__calcium_dynamics__Ca_i + var_calcium_dynamics__K_buf_c), 2)); // dimensionless
        const double var_calcium_dynamics__K_buf_sr = 0.29999999999999999; // millimolar
        const double var_calcium_dynamics__Ca_sr_bufsr = 1 / (1.0 + var_calcium_dynamics__Buf_sr * var_calcium_dynamics__K_buf_sr / pow((var_chaste_interface__calcium_dynamics__Ca_SR + var_calcium_dynamics__K_buf_sr), 2)); // dimensionless
        const double var_calcium_dynamics__K_buf_ss = 0.00025000000000000001; // millimolar
        const double var_calcium_dynamics__Ca_ss_bufss = 1 / (1.0 + var_calcium_dynamics__Buf_ss * var_calcium_dynamics__K_buf_ss / pow((var_chaste_interface__calcium_dynamics__Ca_ss + var_calcium_dynamics__K_buf_ss), 2)); // dimensionless
        const double var_calcium_dynamics__K_up = 0.00025000000000000001; // millimolar
        const double var_calcium_dynamics__V_sr = 0.0010939999999999999; // micrometre3
        const double var_calcium_dynamics__V_ss = 5.4679999999999998e-5; // micrometre3
        const double var_calcium_dynamics__V_xfer = 0.0038; // per_millisecond
        const double var_calcium_dynamics__i_leak = (-var_chaste_interface__calcium_dynamics__Ca_i + var_chaste_interface__calcium_dynamics__Ca_SR) * NV_Ith_S(mParameters, 0); // millimolar_per_millisecond
        const double var_calcium_dynamics__i_up = NV_Ith_S(mParameters, 2) / (1.0 + pow(var_calcium_dynamics__K_up, 2) / pow(var_chaste_interface__calcium_dynamics__Ca_i, 2)); // millimolar_per_millisecond
        const double var_calcium_dynamics__i_xfer = (-var_chaste_interface__calcium_dynamics__Ca_i + var_chaste_interface__calcium_dynamics__Ca_ss) * var_calcium_dynamics__V_xfer; // millimolar_per_millisecond
        const double var_calcium_dynamics__k1_prime = 0.14999999999999999; // per_millimolar2_per_millisecond
        const double var_calcium_dynamics__k2_prime = 0.044999999999999998; // per_millimolar_per_millisecond
        const double var_calcium_dynamics__k3 = 0.059999999999999998; // per_millisecond
        const double var_calcium_dynamics__k4 = 0.0050000000000000001; // per_millisecond
        const double var_calcium_dynamics__max_sr = 2.5; // dimensionless
        const double var_calcium_dynamics__min_sr = 1.0; // dimensionless
        const double var_calcium_dynamics__kcasr = -(-var_calcium_dynamics__min_sr + var_calcium_dynamics__max_sr) / (1.0 + pow(var_calcium_dynamics__EC, 2) / pow(var_chaste_interface__calcium_dynamics__Ca_SR, 2)) + var_calcium_dynamics__max_sr; // dimensionless
        const double var_calcium_dynamics__k1 = var_calcium_dynamics__k1_prime / var_calcium_dynamics__kcasr; // per_millimolar2_per_millisecond
        const double var_calcium_dynamics__O = pow(var_chaste_interface__calcium_dynamics__Ca_ss, 2) * var_chaste_interface__calcium_dynamics__R_prime * var_calcium_dynamics__k1 / (pow(var_chaste_interface__calcium_dynamics__Ca_ss, 2) * var_calcium_dynamics__k1 + var_calcium_dynamics__k3); // dimensionless
        const double var_calcium_dynamics__i_rel = (-var_chaste_interface__calcium_dynamics__Ca_ss + var_chaste_interface__calcium_dynamics__Ca_SR) * var_calcium_dynamics__O * NV_Ith_S(mParameters, 1); // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_calcium_dynamics__Ca_SR = (-var_calcium_dynamics__i_leak - var_calcium_dynamics__i_rel + var_calcium_dynamics__i_up) * var_calcium_dynamics__Ca_sr_bufsr; // millimolar / millisecond
        const double var_calcium_dynamics__k2 = var_calcium_dynamics__k2_prime * var_calcium_dynamics__kcasr; // per_millimolar_per_millisecond
        const double d_dt_chaste_interface_var_calcium_dynamics__R_prime = (1.0 - var_chaste_interface__calcium_dynamics__R_prime) * var_calcium_dynamics__k4 - var_chaste_interface__calcium_dynamics__Ca_ss * var_chaste_interface__calcium_dynamics__R_prime * var_calcium_dynamics__k2; // 1 / millisecond
        const double var_calcium_pump_current__K_pCa = 0.00050000000000000001; // millimolar
        const double var_calcium_pump_current__i_p_Ca = var_chaste_interface__calcium_dynamics__Ca_i * NV_Ith_S(mParameters, 10) / (var_chaste_interface__calcium_dynamics__Ca_i + var_calcium_pump_current__K_pCa); // picoA_per_picoF
        const double var_membrane__F = 96485.341499999995; // coulomb_per_millimole
        const double var_membrane__R = 8314.4719999999998; // joule_per_mole_kelvin
        const double var_membrane__T = 310.0; // kelvin
        const double var_L_type_Ca_current__temp = (((var_L_type_Ca_current__V_low > var_chaste_interface__membrane__V) || (var_L_type_Ca_current__V_high < var_chaste_interface__membrane__V)) ? ((-15.0 + var_chaste_interface__membrane__V) * (-NV_Ith_S(mParameters, 4) + 0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * exp(2.0 * (-15.0 + var_chaste_interface__membrane__V) * var_membrane__F / (var_membrane__R * var_membrane__T))) / (-1.0 + exp(2.0 * (-15.0 + var_chaste_interface__membrane__V) * var_membrane__F / (var_membrane__R * var_membrane__T)))) : (0.5 * (-15.0 + var_L_type_Ca_current__V_high) * (-NV_Ith_S(mParameters, 4) + 0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * exp(2.0 * (-15.0 + var_L_type_Ca_current__V_high) * var_membrane__F / (var_membrane__R * var_membrane__T))) / (-1.0 + exp(2.0 * (-15.0 + var_L_type_Ca_current__V_high) * var_membrane__F / (var_membrane__R * var_membrane__T))) + 0.5 * (-15.0 + var_L_type_Ca_current__V_low) * (-NV_Ith_S(mParameters, 4) + 0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * exp(2.0 * (-15.0 + var_L_type_Ca_current__V_low) * var_membrane__F / (var_membrane__R * var_membrane__T))) / (-1.0 + exp(2.0 * (-15.0 + var_L_type_Ca_current__V_low) * var_membrane__F / (var_membrane__R * var_membrane__T))))); // millivolt_millimoles
        const double var_L_type_Ca_current__i_CaL = 4.0 * pow(var_membrane__F, 2) * NV_Ith_S(mParameters, 7) * var_L_type_Ca_current__temp * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f2_gate__f2 * var_chaste_interface__L_type_Ca_current_fCass_gate__fCass * var_chaste_interface__L_type_Ca_current_f_gate__f / (var_membrane__R * var_membrane__T); // picoA_per_picoF
        const double var_L_type_Ca_current_d_gate__alpha_d = 0.25 + 1.3999999999999999 / (1.0 + exp(-2.6923076923076925 - 0.076923076923076927 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_L_type_Ca_current_d_gate__beta_d = 1.3999999999999999 / (1.0 + exp(1.0 + 0.20000000000000001 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_L_type_Ca_current_d_gate__d_inf = 1 / (1.0 + exp(-1.0666666666666667 - 0.13333333333333333 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_L_type_Ca_current_d_gate__gamma_d = 1 / (1.0 + exp(2.5 - 0.050000000000000003 * var_chaste_interface__membrane__V)); // millisecond
        const double var_L_type_Ca_current_d_gate__tau_d = var_L_type_Ca_current_d_gate__alpha_d * var_L_type_Ca_current_d_gate__beta_d + var_L_type_Ca_current_d_gate__gamma_d; // millisecond
        const double d_dt_chaste_interface_var_L_type_Ca_current_d_gate__d = (-var_chaste_interface__L_type_Ca_current_d_gate__d + var_L_type_Ca_current_d_gate__d_inf) / var_L_type_Ca_current_d_gate__tau_d; // 1 / millisecond
        const double var_L_type_Ca_current_f2_gate__f2_inf = 0.33000000000000002 + 0.67000000000000004 / (1.0 + exp(5.0 + 0.14285714285714285 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_L_type_Ca_current_f2_gate__tau_f2 = 80.0 / (1.0 + exp(3.0 + 0.10000000000000001 * var_chaste_interface__membrane__V)) + 31.0 / (1.0 + exp(2.5 - 0.10000000000000001 * var_chaste_interface__membrane__V)) + 562.0 * exp(-3.0375000000000001 * pow((1 + 0.037037037037037035 * var_chaste_interface__membrane__V), 2)); // millisecond
        const double d_dt_chaste_interface_var_L_type_Ca_current_f2_gate__f2 = (-var_chaste_interface__L_type_Ca_current_f2_gate__f2 + var_L_type_Ca_current_f2_gate__f2_inf) / var_L_type_Ca_current_f2_gate__tau_f2; // 1 / millisecond
        const double var_L_type_Ca_current_f_gate__f_inf = 1 / (1.0 + exp(2.8571428571428572 + 0.14285714285714285 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_L_type_Ca_current_f_gate__tau_f = 20.0 + 200.0 / (1.0 + exp(1.3 - 0.10000000000000001 * var_chaste_interface__membrane__V)) + 180.0 / (1.0 + exp(3.0 + 0.10000000000000001 * var_chaste_interface__membrane__V)) + 1102.5 * exp(-3.2400000000000002 * pow((1 + 0.037037037037037035 * var_chaste_interface__membrane__V), 2)); // millisecond
        const double d_dt_chaste_interface_var_L_type_Ca_current_f_gate__f = (-var_chaste_interface__L_type_Ca_current_f_gate__f + var_L_type_Ca_current_f_gate__f_inf) / var_L_type_Ca_current_f_gate__tau_f; // 1 / millisecond
        const double var_fast_sodium_current_h_gate__alpha_h = ((var_chaste_interface__membrane__V < -40.0 + NV_Ith_S(mParameters, 14)) ? (0.057000000000000002 * exp(-11.764705882352942 + 0.14705882352941177 * NV_Ith_S(mParameters, 14) - 0.14705882352941177 * var_chaste_interface__membrane__V)) : (0)); // per_millisecond
        const double var_fast_sodium_current_h_gate__beta_h = ((var_chaste_interface__membrane__V < -40.0 + NV_Ith_S(mParameters, 14)) ? (310000.0 * exp(0.34849999999999998 * var_chaste_interface__membrane__V - 0.34849999999999998 * NV_Ith_S(mParameters, 14)) + 2.7000000000000002 * exp(0.079000000000000001 * var_chaste_interface__membrane__V - 0.079000000000000001 * NV_Ith_S(mParameters, 14))) : (5.9230769230769234 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * NV_Ith_S(mParameters, 14) - 0.0900900900900901 * var_chaste_interface__membrane__V)))); // per_millisecond
        const double var_fast_sodium_current_h_gate__h_inf = 0.01 * NV_Ith_S(mParameters, 13) + (1.0 - 0.01 * NV_Ith_S(mParameters, 13)) / pow((1.0 + exp(9.6298788694481825 + 0.13458950201884254 * var_chaste_interface__membrane__V - 0.13458950201884254 * NV_Ith_S(mParameters, 14))), 2); // dimensionless
        const double var_fast_sodium_current_h_gate__tau_h = 1 / (var_fast_sodium_current_h_gate__alpha_h + var_fast_sodium_current_h_gate__beta_h); // millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current_h_gate__h = (-var_chaste_interface__fast_sodium_current_h_gate__h + var_fast_sodium_current_h_gate__h_inf) / var_fast_sodium_current_h_gate__tau_h; // 1 / millisecond
        const double var_fast_sodium_current_j_gate__alpha_j = ((var_chaste_interface__membrane__V < -40.0 + NV_Ith_S(mParameters, 14)) ? ((37.780000000000001 + var_chaste_interface__membrane__V) * (-25428.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V - 0.24440000000000001 * NV_Ith_S(mParameters, 14)) - 6.9480000000000002e-6 * exp(0.043909999999999998 * NV_Ith_S(mParameters, 14) - 0.043909999999999998 * var_chaste_interface__membrane__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane__V - 0.311 * NV_Ith_S(mParameters, 14)))) : (0)); // per_millisecond
        const double var_fast_sodium_current_j_gate__beta_j = ((var_chaste_interface__membrane__V < -40.0 + NV_Ith_S(mParameters, 14)) ? (0.024240000000000001 * exp(0.01052 * NV_Ith_S(mParameters, 14) - 0.01052 * var_chaste_interface__membrane__V) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * NV_Ith_S(mParameters, 14) - 0.13780000000000001 * var_chaste_interface__membrane__V))) : (0.59999999999999998 * exp(0.057000000000000002 * var_chaste_interface__membrane__V - 0.057000000000000002 * NV_Ith_S(mParameters, 14)) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * NV_Ith_S(mParameters, 14) - 0.10000000000000001 * var_chaste_interface__membrane__V)))); // per_millisecond
        const double var_fast_sodium_current_j_gate__j_inf = 0.01 * NV_Ith_S(mParameters, 13) + (1.0 - 0.01 * NV_Ith_S(mParameters, 13)) / pow((1.0 + exp(9.6298788694481825 + 0.13458950201884254 * var_chaste_interface__membrane__V - 0.13458950201884254 * NV_Ith_S(mParameters, 14))), 2); // dimensionless
        const double var_fast_sodium_current_j_gate__tau_j = 1 / (var_fast_sodium_current_j_gate__alpha_j + var_fast_sodium_current_j_gate__beta_j); // millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current_j_gate__j = (-var_chaste_interface__fast_sodium_current_j_gate__j + var_fast_sodium_current_j_gate__j_inf) / var_fast_sodium_current_j_gate__tau_j; // 1 / millisecond
        const double var_fast_sodium_current_m_gate__alpha_m = 1 / (1.0 + exp(-12.0 - 0.20000000000000001 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_fast_sodium_current_m_gate__beta_m = 0.10000000000000001 / (1.0 + exp(7.0 + 0.20000000000000001 * var_chaste_interface__membrane__V)) + 0.10000000000000001 / (1.0 + exp(-0.25 + 0.0050000000000000001 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_fast_sodium_current_m_gate__m_inf = 1 / pow((1.0 + exp(-6.2967884828349945 - 0.11074197120708749 * var_chaste_interface__membrane__V)), 2); // dimensionless
        const double var_fast_sodium_current_m_gate__tau_m = var_fast_sodium_current_m_gate__alpha_m * var_fast_sodium_current_m_gate__beta_m; // millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current_m_gate__m = (-var_chaste_interface__fast_sodium_current_m_gate__m + var_fast_sodium_current_m_gate__m_inf) / var_fast_sodium_current_m_gate__tau_m; // 1 / millisecond
        const double var_membrane__V_c = 0.016403999999999998; // micrometre3
        const double d_dt_chaste_interface_var_calcium_dynamics__Ca_ss = (var_calcium_dynamics__V_sr * var_calcium_dynamics__i_rel / var_calcium_dynamics__V_ss - var_calcium_dynamics__i_xfer * var_membrane__V_c / var_calcium_dynamics__V_ss - 0.5 * var_L_type_Ca_current__i_CaL * NV_Ith_S(mParameters, 11) / (var_calcium_dynamics__V_ss * var_membrane__F)) * var_calcium_dynamics__Ca_ss_bufss; // millimolar / millisecond
        const double var_membrane__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_membrane__i_Stim = var_membrane__i_Stim_converted / HeartConfig::Instance()->GetCapacitance(); // picoA_per_picoF
        const double var_rapid_time_dependent_potassium_current_Xr1_gate__alpha_xr1 = 450.0 / (1.0 + exp(-4.5 - 0.10000000000000001 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_rapid_time_dependent_potassium_current_Xr1_gate__beta_xr1 = 6.0 / (1.0 + exp(2.6086956521739131 + 0.086956521739130432 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_rapid_time_dependent_potassium_current_Xr1_gate__tau_xr1 = var_rapid_time_dependent_potassium_current_Xr1_gate__alpha_xr1 * var_rapid_time_dependent_potassium_current_Xr1_gate__beta_xr1; // millisecond
        const double var_rapid_time_dependent_potassium_current_Xr1_gate__xr1_inf = 1 / (1.0 + exp(-3.7142857142857144 - 0.14285714285714285 * var_chaste_interface__membrane__V)); // dimensionless
        const double d_dt_chaste_interface_var_rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = (-var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 + var_rapid_time_dependent_potassium_current_Xr1_gate__xr1_inf) / var_rapid_time_dependent_potassium_current_Xr1_gate__tau_xr1; // 1 / millisecond
        const double var_rapid_time_dependent_potassium_current_Xr2_gate__alpha_xr2 = 3.0 / (1.0 + exp(-3.0 - 0.050000000000000003 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_rapid_time_dependent_potassium_current_Xr2_gate__beta_xr2 = 1.1200000000000001 / (1.0 + exp(-3.0 + 0.050000000000000003 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_rapid_time_dependent_potassium_current_Xr2_gate__tau_xr2 = var_rapid_time_dependent_potassium_current_Xr2_gate__alpha_xr2 * var_rapid_time_dependent_potassium_current_Xr2_gate__beta_xr2; // millisecond
        const double var_rapid_time_dependent_potassium_current_Xr2_gate__xr2_inf = 1 / (1.0 + exp(3.6666666666666665 + 0.041666666666666664 * var_chaste_interface__membrane__V)); // dimensionless
        const double d_dt_chaste_interface_var_rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = (-var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 + var_rapid_time_dependent_potassium_current_Xr2_gate__xr2_inf) / var_rapid_time_dependent_potassium_current_Xr2_gate__tau_xr2; // 1 / millisecond
        const double var_reversal_potentials__E_Ca = 0.5 * var_membrane__R * var_membrane__T * log(NV_Ith_S(mParameters, 4) / var_chaste_interface__calcium_dynamics__Ca_i) / var_membrane__F; // millivolt
        const double var_calcium_background_current__i_b_Ca = (-var_reversal_potentials__E_Ca + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 8); // picoA_per_picoF
        const double var_reversal_potentials__E_K = var_membrane__R * var_membrane__T * log(NV_Ith_S(mParameters, 5) / var_chaste_interface__potassium_dynamics__K_i) / var_membrane__F; // millivolt
        const double var_inward_rectifier_potassium_current__alpha_K1 = 0.10000000000000001 / (1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__membrane__V - 0.059999999999999998 * var_reversal_potentials__E_K)); // dimensionless
        const double var_inward_rectifier_potassium_current__beta_K1 = (3.0 * exp(0.02 + 0.00020000000000000001 * var_chaste_interface__membrane__V - 0.00020000000000000001 * var_reversal_potentials__E_K) + exp(-1.0 + 0.10000000000000001 * var_chaste_interface__membrane__V - 0.10000000000000001 * var_reversal_potentials__E_K)) / (1.0 + exp(0.5 * var_reversal_potentials__E_K - 0.5 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_inward_rectifier_potassium_current__xK1_inf = var_inward_rectifier_potassium_current__alpha_K1 / (var_inward_rectifier_potassium_current__alpha_K1 + var_inward_rectifier_potassium_current__beta_K1); // dimensionless
        const double var_inward_rectifier_potassium_current__i_K1 = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 5)) * (-var_reversal_potentials__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 15) * var_inward_rectifier_potassium_current__xK1_inf; // picoA_per_picoF
        const double var_potassium_pump_current__i_p_K = (-var_reversal_potentials__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 16) / (1.0 + exp(4.1806020066889626 - 0.16722408026755853 * var_chaste_interface__membrane__V)); // picoA_per_picoF
        const double var_rapid_time_dependent_potassium_current__i_Kr = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 5)) * (-var_reversal_potentials__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 17) * var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2; // picoA_per_picoF
        const double var_reversal_potentials__P_kna = 0.029999999999999999; // dimensionless
        const double var_slow_time_dependent_potassium_current_Xs_gate__alpha_xs = 1400.0 / sqrt(1.0 + exp(0.83333333333333337 - 0.16666666666666666 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_slow_time_dependent_potassium_current_Xs_gate__beta_xs = 1 / (1.0 + exp(-2.3333333333333335 + 0.066666666666666666 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_slow_time_dependent_potassium_current_Xs_gate__tau_xs = 80.0 + var_slow_time_dependent_potassium_current_Xs_gate__alpha_xs * var_slow_time_dependent_potassium_current_Xs_gate__beta_xs; // millisecond
        const double var_slow_time_dependent_potassium_current_Xs_gate__xs_inf = 1 / (1.0 + exp(-0.35714285714285715 - 0.071428571428571425 * var_chaste_interface__membrane__V)); // dimensionless
        const double d_dt_chaste_interface_var_slow_time_dependent_potassium_current_Xs_gate__Xs = (-var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs + var_slow_time_dependent_potassium_current_Xs_gate__xs_inf) / var_slow_time_dependent_potassium_current_Xs_gate__tau_xs; // 1 / millisecond
        const double var_sodium_calcium_exchanger_current__K_sat = 0.10000000000000001; // dimensionless
        const double var_sodium_calcium_exchanger_current__Km_Ca = 1.3799999999999999; // millimolar
        const double var_sodium_calcium_exchanger_current__Km_Nai = 87.5; // millimolar
        const double var_sodium_calcium_exchanger_current__alpha = 2.5; // dimensionless
        const double var_sodium_calcium_exchanger_current__gamma = 0.34999999999999998; // dimensionless
        const double var_reversal_potentials__E_Ks = var_membrane__R * var_membrane__T * log((var_reversal_potentials__P_kna * NV_Ith_S(mParameters, 6) + NV_Ith_S(mParameters, 5)) / (var_reversal_potentials__P_kna * var_chaste_interface__sodium_dynamics__Na_i + var_chaste_interface__potassium_dynamics__K_i)) / var_membrane__F; // millivolt
        const double var_reversal_potentials__E_Na = var_membrane__R * var_membrane__T * log(NV_Ith_S(mParameters, 6) / var_chaste_interface__sodium_dynamics__Na_i) / var_membrane__F; // millivolt
        const double var_fast_sodium_current__i_Na = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_reversal_potentials__E_Na + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 12) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // picoA_per_picoF
        const double var_slow_time_dependent_potassium_current__i_Ks = pow(var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs, 2) * (-var_reversal_potentials__E_Ks + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 18); // picoA_per_picoF
        const double var_sodium_background_current__i_b_Na = (-var_reversal_potentials__E_Na + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 9); // picoA_per_picoF
        const double var_sodium_calcium_exchanger_current__i_NaCa = (pow(var_chaste_interface__sodium_dynamics__Na_i, 3) * NV_Ith_S(mParameters, 4) * exp(var_membrane__F * var_chaste_interface__membrane__V * var_sodium_calcium_exchanger_current__gamma / (var_membrane__R * var_membrane__T)) - pow(NV_Ith_S(mParameters, 6), 3) * var_chaste_interface__calcium_dynamics__Ca_i * var_sodium_calcium_exchanger_current__alpha * exp((-1.0 + var_sodium_calcium_exchanger_current__gamma) * var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T))) * NV_Ith_S(mParameters, 19) / ((1.0 + var_sodium_calcium_exchanger_current__K_sat * exp((-1.0 + var_sodium_calcium_exchanger_current__gamma) * var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T))) * (pow(var_sodium_calcium_exchanger_current__Km_Nai, 3) + pow(NV_Ith_S(mParameters, 6), 3)) * (NV_Ith_S(mParameters, 4) + var_sodium_calcium_exchanger_current__Km_Ca)); // picoA_per_picoF
        const double d_dt_chaste_interface_var_calcium_dynamics__Ca_i = ((-var_calcium_dynamics__i_up + var_calcium_dynamics__i_leak) * var_calcium_dynamics__V_sr / var_membrane__V_c - 0.5 * (-2.0 * var_sodium_calcium_exchanger_current__i_NaCa + var_calcium_background_current__i_b_Ca + var_calcium_pump_current__i_p_Ca) * NV_Ith_S(mParameters, 11) / (var_membrane__F * var_membrane__V_c) + var_calcium_dynamics__i_xfer) * var_calcium_dynamics__Ca_i_bufc; // millimolar / millisecond
        const double var_sodium_potassium_pump_current__K_mNa = 40.0; // millimolar
        const double var_sodium_potassium_pump_current__K_mk = 1.0; // millimolar
        const double var_sodium_potassium_pump_current__i_NaK = NV_Ith_S(mParameters, 5) * var_chaste_interface__sodium_dynamics__Na_i * NV_Ith_S(mParameters, 20) / ((NV_Ith_S(mParameters, 5) + var_sodium_potassium_pump_current__K_mk) * (var_chaste_interface__sodium_dynamics__Na_i + var_sodium_potassium_pump_current__K_mNa) * (1.0 + 0.035299999999999998 * exp(-var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T)) + 0.1245 * exp(-0.10000000000000001 * var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T)))); // picoA_per_picoF
        const double d_dt_chaste_interface_var_sodium_dynamics__Na_i = -(3.0 * var_sodium_calcium_exchanger_current__i_NaCa + 3.0 * var_sodium_potassium_pump_current__i_NaK + var_fast_sodium_current__i_Na + var_sodium_background_current__i_b_Na) * NV_Ith_S(mParameters, 11) * NV_Ith_S(mParameters, 3) / (var_membrane__F * var_membrane__V_c); // millimolar / millisecond
        const double var_transient_outward_current_r_gate__r_inf = 1 / (1.0 + exp(3.3333333333333335 - 0.16666666666666666 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_transient_outward_current_r_gate__tau_r = 0.80000000000000004 + 9.5 * exp(-0.88888888888888884 * pow((1 + 0.025000000000000001 * var_chaste_interface__membrane__V), 2)); // millisecond
        const double d_dt_chaste_interface_var_transient_outward_current_r_gate__r = (-var_chaste_interface__transient_outward_current_r_gate__r + var_transient_outward_current_r_gate__r_inf) / var_transient_outward_current_r_gate__tau_r; // 1 / millisecond
        const double var_transient_outward_current__i_to = (-var_reversal_potentials__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 21) * var_chaste_interface__transient_outward_current_r_gate__r * var_chaste_interface__transient_outward_current_s_gate__s; // picoA_per_picoF
        const double d_dt_chaste_interface_var_potassium_dynamics__K_i = -(-2.0 * var_sodium_potassium_pump_current__i_NaK + var_inward_rectifier_potassium_current__i_K1 + var_membrane__i_Stim + var_potassium_pump_current__i_p_K + var_rapid_time_dependent_potassium_current__i_Kr + var_slow_time_dependent_potassium_current__i_Ks + var_transient_outward_current__i_to) * NV_Ith_S(mParameters, 11) * NV_Ith_S(mParameters, 3) / (var_membrane__F * var_membrane__V_c); // millimolar / millisecond
        const double var_transient_outward_current_s_gate__s_inf = 1 / (1.0 + exp(4.0 + 0.20000000000000001 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_transient_outward_current_s_gate__tau_s = 3.0 + 5.0 / (1.0 + exp(-4.0 + 0.20000000000000001 * var_chaste_interface__membrane__V)) + 85.0 * exp(-6.328125 * pow((1 + 0.022222222222222223 * var_chaste_interface__membrane__V), 2)); // millisecond
        const double d_dt_chaste_interface_var_transient_outward_current_s_gate__s = (-var_chaste_interface__transient_outward_current_s_gate__s + var_transient_outward_current_s_gate__s_inf) / var_transient_outward_current_s_gate__tau_s; // 1 / millisecond

        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_membrane__V = 0.0;
        }
        else
        {
            d_dt_chaste_interface_var_membrane__V = -var_L_type_Ca_current__i_CaL - var_calcium_background_current__i_b_Ca - var_calcium_pump_current__i_p_Ca - var_fast_sodium_current__i_Na - var_inward_rectifier_potassium_current__i_K1 - var_membrane__i_Stim - var_potassium_pump_current__i_p_K - var_rapid_time_dependent_potassium_current__i_Kr - var_slow_time_dependent_potassium_current__i_Ks - var_sodium_background_current__i_b_Na - var_sodium_calcium_exchanger_current__i_NaCa - var_sodium_potassium_pump_current__i_NaK - var_transient_outward_current__i_to; // millivolt / millisecond
        }
        
        NV_Ith_S(rDY,0) = d_dt_chaste_interface_var_membrane__V;
        NV_Ith_S(rDY,1) = d_dt_chaste_interface_var_calcium_dynamics__Ca_i;
        NV_Ith_S(rDY,2) = d_dt_chaste_interface_var_rapid_time_dependent_potassium_current_Xr1_gate__Xr1;
        NV_Ith_S(rDY,3) = d_dt_chaste_interface_var_rapid_time_dependent_potassium_current_Xr2_gate__Xr2;
        NV_Ith_S(rDY,4) = d_dt_chaste_interface_var_slow_time_dependent_potassium_current_Xs_gate__Xs;
        NV_Ith_S(rDY,5) = d_dt_chaste_interface_var_fast_sodium_current_m_gate__m;
        NV_Ith_S(rDY,6) = d_dt_chaste_interface_var_fast_sodium_current_h_gate__h;
        NV_Ith_S(rDY,7) = d_dt_chaste_interface_var_fast_sodium_current_j_gate__j;
        NV_Ith_S(rDY,8) = d_dt_chaste_interface_var_L_type_Ca_current_d_gate__d;
        NV_Ith_S(rDY,9) = d_dt_chaste_interface_var_L_type_Ca_current_f_gate__f;
        NV_Ith_S(rDY,10) = d_dt_chaste_interface_var_L_type_Ca_current_f2_gate__f2;
        NV_Ith_S(rDY,11) = d_dt_chaste_interface_var_L_type_Ca_current_fCass_gate__fCass;
        NV_Ith_S(rDY,12) = d_dt_chaste_interface_var_transient_outward_current_s_gate__s;
        NV_Ith_S(rDY,13) = d_dt_chaste_interface_var_transient_outward_current_r_gate__r;
        NV_Ith_S(rDY,14) = d_dt_chaste_interface_var_calcium_dynamics__Ca_SR;
        NV_Ith_S(rDY,15) = d_dt_chaste_interface_var_calcium_dynamics__Ca_ss;
        NV_Ith_S(rDY,16) = d_dt_chaste_interface_var_calcium_dynamics__R_prime;
        NV_Ith_S(rDY,17) = d_dt_chaste_interface_var_sodium_dynamics__Na_i;
        NV_Ith_S(rDY,18) = d_dt_chaste_interface_var_potassium_dynamics__K_i;
    }

    void Cellten_tusscher_model_2006_epi_analyticFromCellMLCvode::EvaluateAnalyticJacobian(double var_chaste_interface__environment__time, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -85.23
        double var_chaste_interface__calcium_dynamics__Ca_i = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.000126
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.00621
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.4712
        double var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.0095
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.00172
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.7444
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.7045
        double var_chaste_interface__L_type_Ca_current_d_gate__d = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 3.373e-05
        double var_chaste_interface__L_type_Ca_current_f_gate__f = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.7888
        double var_chaste_interface__L_type_Ca_current_f2_gate__f2 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.9755
        double var_chaste_interface__L_type_Ca_current_fCass_gate__fCass = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.9953
        double var_chaste_interface__transient_outward_current_s_gate__s = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.999998
        double var_chaste_interface__transient_outward_current_r_gate__r = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 2.42e-08
        double var_chaste_interface__calcium_dynamics__Ca_SR = NV_Ith_S(rY, 14);
        // Units: millimolar; Initial value: 3.64
        double var_chaste_interface__calcium_dynamics__Ca_ss = NV_Ith_S(rY, 15);
        // Units: millimolar; Initial value: 0.00036
        double var_chaste_interface__calcium_dynamics__R_prime = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.9073
        double var_chaste_interface__sodium_dynamics__Na_i = NV_Ith_S(rY, 17);
        // Units: millimolar; Initial value: 8.604
        double var_chaste_interface__potassium_dynamics__K_i = NV_Ith_S(rY, 18);
        // Units: millimolar; Initial value: 136.89
        const double var_x0 = exp(4.1806020066889626 - 0.16722408026755853 * var_chaste_interface__membrane__V);
        const double var_x1 = 1.0 + var_x0;
        const double var_x2 = NV_Ith_S(mParameters, 16) / var_x1;
        const double var_x3 = pow(var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs, 2) * NV_Ith_S(mParameters, 18);
        const double var_x4 = NV_Ith_S(mParameters, 21) * var_chaste_interface__transient_outward_current_r_gate__r;
        const double var_x5 = var_x4 * var_chaste_interface__transient_outward_current_s_gate__s;
        const double var_x6 = NV_Ith_S(mParameters, 12) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j;
        const double var_x7 = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3);
        const double var_x8 = var_x7;
        const double var_x9 = sqrt(NV_Ith_S(mParameters, 5));
        const double var_x10 = var_x9 * NV_Ith_S(mParameters, 17) * var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2;
        const double var_x11 = 0.43033148291193518 * var_x10;
        const double var_x12 = 1 / var_chaste_interface__potassium_dynamics__K_i;
        const double var_x13 = log(var_x12 * NV_Ith_S(mParameters, 5));
        const double var_x14 = exp(-12.0 + 0.059999999999999998 * var_chaste_interface__membrane__V - 1.6028256395817388 * var_x13);
        const double var_x15 = 1.0 + var_x14;
        const double var_x16 = 1 / var_x15;
        const double var_x17 = exp(13.356880329847826 * var_x13 - 0.5 * var_chaste_interface__membrane__V);
        const double var_x18 = 1.0 + var_x17;
        const double var_x19 = 1 / var_x18;
        const double var_x20 = exp(0.02 + 0.00020000000000000001 * var_chaste_interface__membrane__V - 0.0053427521319391299 * var_x13);
        const double var_x21 = 0.10000000000000001 * var_chaste_interface__membrane__V;
        const double var_x22 = exp(-1.0 + var_x21 - 2.6713760659695653 * var_x13);
        const double var_x23 = var_x22 + 3.0 * var_x20;
        const double var_x24 = 0.10000000000000001 * var_x16 + var_x19 * var_x23;
        const double var_x25 = var_x9 * NV_Ith_S(mParameters, 15) / var_x24;
        const double var_x26 = var_x16 * var_x25;
        const double var_x27 = 26.713760659695652 * var_x13;
        const double var_x28 = -var_x27 + var_chaste_interface__membrane__V;
        const double var_x29 = var_x0 * var_x28 * NV_Ith_S(mParameters, 16) / pow(var_x1, 2);
        const double var_x30 = exp(-0.024332029034784559 * var_chaste_interface__membrane__V);
        const double var_x31 = pow(NV_Ith_S(mParameters, 6), 3);
        const double var_x32 = var_x30 * var_x31;
        const double var_x33 = var_x32 * var_chaste_interface__calcium_dynamics__Ca_i;
        const double var_x34 = NV_Ith_S(mParameters, 4) * exp(0.013101861787960915 * var_chaste_interface__membrane__V);
        const double var_x35 = var_x34 * pow(var_chaste_interface__sodium_dynamics__Na_i, 3);
        const double var_x36 = 1.0 + 0.10000000000000001 * var_x30;
        const double var_x37 = NV_Ith_S(mParameters, 19) / ((669921.875 + var_x31) * (1.3799999999999999 + NV_Ith_S(mParameters, 4)));
        const double var_x38 = var_x37 / var_x36;
        const double var_x39 = var_x38 * (0.060830072586961395 * var_x33 + 0.013101861787960915 * var_x35);
        const double var_x40 = var_x14 / pow(var_x15, 2);
        const double var_x41 = var_x25 * var_x28;
        const double var_x42 = var_x40 * var_x41;
        const double var_x43 = var_x35 - 2.5 * var_x33;
        const double var_x44 = var_x30 * var_x37 * var_x43 / pow(var_x36, 2);
        const double var_x45 = var_x17 * var_x23 / pow(var_x18, 2);
        const double var_x46 = 0.0060000000000000001 * var_x40 - 0.5 * var_x45 - var_x19 * (0.10000000000000001 * var_x22 + 0.00060000000000000006 * var_x20);
        const double var_x47 = var_x28 * var_x9;
        const double var_x48 = var_x16 * var_x47 * NV_Ith_S(mParameters, 15) / pow(var_x24, 2);
        const double var_x49 = 0.043033148291193521 * var_x48;
        const double var_x50 = exp(-1.1230167246823641 + 0.074867781645490947 * var_chaste_interface__membrane__V);
        const double var_x51 = -1.0 + var_x50;
        const double var_x52 = 1 / var_x51;
        const double var_x53 = -NV_Ith_S(mParameters, 4);
        const double var_x54 = 0.25 * var_chaste_interface__calcium_dynamics__Ca_ss;
        const double var_x55 = var_x53 + var_x50 * var_x54;
        const double var_x56 = var_x52 * var_x55;
        const double var_x57 = -15.0 + var_chaste_interface__membrane__V;
        const double var_x58 = var_x50 * var_x57;
        const double var_x59 = var_x52 * var_x58;
        const double var_x60 = (var_chaste_interface__membrane__V > 15.000999999999999) || (var_chaste_interface__membrane__V < 14.999000000000001);
        const double var_x61 = ((var_x60) ? (var_x56 + 0.018716945411372737 * var_x59 * var_chaste_interface__calcium_dynamics__Ca_ss - 0.074867781645490947 * var_x55 * var_x58 / pow(var_x51, 2)) : (0));
        const double var_x62 = var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_gate__f;
        const double var_x63 = var_x62 * NV_Ith_S(mParameters, 7) * var_chaste_interface__L_type_Ca_current_f2_gate__f2 * var_chaste_interface__L_type_Ca_current_fCass_gate__fCass;
        const double var_x64 = 14447.286958825251 * var_x63;
        const double var_x65 = 1 / (1.0 + NV_Ith_S(mParameters, 5));
        const double var_x66 = 1 / (40.0 + var_chaste_interface__sodium_dynamics__Na_i);
        const double var_x67 = exp(-0.037433890822745473 * var_chaste_interface__membrane__V);
        const double var_x68 = exp(-0.0037433890822745472 * var_chaste_interface__membrane__V);
        const double var_x69 = 1.0 + 0.035299999999999998 * var_x67 + 0.1245 * var_x68;
        const double var_x70 = var_x65 * var_x66 * (0.001321416346042915 * var_x67 + 0.00046605194074318115 * var_x68) * NV_Ith_S(mParameters, 5) * var_chaste_interface__sodium_dynamics__Na_i * NV_Ith_S(mParameters, 20) / pow(var_x69, 2);
        const double var_x71 = 0.00050000000000000001 + var_chaste_interface__calcium_dynamics__Ca_i;
        const double var_x72 = NV_Ith_S(mParameters, 10) / var_x71;
        const double var_x73 = 1 / var_chaste_interface__calcium_dynamics__Ca_i;
        const double var_x74 = var_x73 * NV_Ith_S(mParameters, 8);
        const double var_x75 = var_chaste_interface__calcium_dynamics__Ca_i * NV_Ith_S(mParameters, 10) / pow(var_x71, 2);
        const double var_x76 = var_x32 * var_x38;
        const double var_x77 = var_x47 * NV_Ith_S(mParameters, 17) * var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1;
        const double var_x78 = 1 / (0.029999999999999999 * var_chaste_interface__sodium_dynamics__Na_i + var_chaste_interface__potassium_dynamics__K_i);
        const double var_x79 = (-26.713760659695652 * log(var_x78 * (0.029999999999999999 * NV_Ith_S(mParameters, 6) + NV_Ith_S(mParameters, 5))) + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 18) * var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs;
        const double var_x80 = 1 / var_chaste_interface__sodium_dynamics__Na_i;
        const double var_x81 = -26.713760659695652 * log(var_x80 * NV_Ith_S(mParameters, 6)) + var_chaste_interface__membrane__V;
        const double var_x82 = var_x6 * var_x81 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 2);
        const double var_x83 = var_x81 * NV_Ith_S(mParameters, 12);
        const double var_x84 = var_x8 * var_x83;
        const double var_x85 = exp(7.4867781645449456e-5);
        const double var_x86 = 1 / (-1.0 + var_x85);
        const double var_x87 = exp(-7.4867781645449456e-5);
        const double var_x88 = 1 / (-1.0 + var_x87);
        const double var_x89 = ((var_x60) ? (var_x56 * var_x57) : (0.00049999999999972289 * var_x86 * (var_x53 + var_x54 * var_x85) - 0.00049999999999972289 * var_x88 * (var_x53 + var_x54 * var_x87)));
        const double var_x90 = var_x89 * NV_Ith_S(mParameters, 7) * var_chaste_interface__L_type_Ca_current_f2_gate__f2 * var_chaste_interface__L_type_Ca_current_fCass_gate__fCass;
        const double var_x91 = 14447.286958825251 * var_x90;
        const double var_x92 = var_x62 * var_x89 * NV_Ith_S(mParameters, 7);
        const double var_x93 = 14447.286958825251 * var_x92;
        const double var_x94 = (var_x27 - var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 21);
        const double var_x95 = ((var_x60) ? (0.25 * var_x59) : (0.00012499999999993072 * var_x85 * var_x86 - 0.00012499999999993072 * var_x87 * var_x88));
        const double var_x96 = var_x80 * NV_Ith_S(mParameters, 9);
        const double var_x97 = var_x3 * var_x78;
        const double var_x98 = var_x65 * NV_Ith_S(mParameters, 5) * NV_Ith_S(mParameters, 20) / var_x69;
        const double var_x99 = var_x66 * var_x98;
        const double var_x100 = var_x6 * var_x7;
        const double var_x101 = var_x100 * var_x80;
        const double var_x102 = var_x98 * var_chaste_interface__sodium_dynamics__Na_i / pow((1 + 0.025000000000000001 * var_chaste_interface__sodium_dynamics__Na_i), 2);
        const double var_x103 = var_x34 * var_x38 * pow(var_chaste_interface__sodium_dynamics__Na_i, 2);
        const double var_x104 = var_x12 * var_x2;
        const double var_x105 = var_x12 * var_x5;
        const double var_x106 = var_x12 * var_x26;
        const double var_x107 = var_x10 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1;
        const double var_x108 = var_x107 * var_x12;
        const double var_x109 = var_x12 * var_x40;
        const double var_x110 = 0.16028256395817389 * var_x109 - var_x19 * (2.6713760659695653 * var_x12 * var_x22 + 0.01602825639581739 * var_x12 * var_x20) - 13.356880329847826 * var_x12 * var_x45;
        const double var_x111 = var_x109 * var_x41;
        const double var_x112 = 0.001 + var_chaste_interface__calcium_dynamics__Ca_i;
        const double var_x113 = 1.0 + 0.00020000000000000001 / pow(var_x112, 2);
        const double var_x114 = 1 / var_x113;
        const double var_x115 = var_x114;
        const double var_x116 = 0.066691050963179718 * NV_Ith_S(mParameters, 0);
        const double var_x117 = 1.0 + 6.2499999999999997e-8 / pow(var_chaste_interface__calcium_dynamics__Ca_i, 2);
        const double var_x118 = NV_Ith_S(mParameters, 2) / (pow(var_x117, 2) * pow(var_chaste_interface__calcium_dynamics__Ca_i, 3));
        const double var_x119 = -var_chaste_interface__calcium_dynamics__Ca_i + var_chaste_interface__calcium_dynamics__Ca_SR;
        const double var_x120 = NV_Ith_S(mParameters, 2) / var_x117;
        const double var_x121 = 0.10000000000000001 * var_chaste_interface__membrane__V;
        const double var_x122 = -var_x121;
        const double var_x123 = exp(-4.5 + var_x122);
        const double var_x124 = 1.0 + var_x123;
        const double var_x125 = 0.14285714285714285 * var_chaste_interface__membrane__V;
        const double var_x126 = exp(-3.7142857142857144 - var_x125);
        const double var_x127 = 1.0 + var_x126;
        const double var_x128 = -var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 + 1 / var_x127;
        const double var_x129 = exp(2.6086956521739131 + 0.086956521739130432 * var_chaste_interface__membrane__V);
        const double var_x130 = 0.00037037037037037035 + 0.00037037037037037035 * var_x129;
        const double var_x131 = var_x124 * var_x130;
        const double var_x132 = 0.050000000000000003 * var_chaste_interface__membrane__V;
        const double var_x133 = -var_x132;
        const double var_x134 = exp(-3.0 + var_x133);
        const double var_x135 = 1.0 + var_x134;
        const double var_x136 = exp(3.6666666666666665 + 0.041666666666666664 * var_chaste_interface__membrane__V);
        const double var_x137 = 1.0 + var_x136;
        const double var_x138 = -var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 + 1 / var_x137;
        const double var_x139 = exp(-3.0 + var_x132);
        const double var_x140 = 0.29761904761904762 + 0.29761904761904762 * var_x139;
        const double var_x141 = var_x135 * var_x140;
        const double var_x142 = -0.16666666666666666 * var_chaste_interface__membrane__V;
        const double var_x143 = exp(0.83333333333333337 + var_x142);
        const double var_x144 = 1.0 + var_x143;
        const double var_x145 = 1 / sqrt(var_x144);
        const double var_x146 = exp(-2.3333333333333335 + 0.066666666666666666 * var_chaste_interface__membrane__V);
        const double var_x147 = 1.0 + var_x146;
        const double var_x148 = 1 / var_x147;
        const double var_x149 = var_x145 * var_x148;
        const double var_x150 = exp(-0.35714285714285715 - 0.071428571428571425 * var_chaste_interface__membrane__V);
        const double var_x151 = 1.0 + var_x150;
        const double var_x152 = 1 / (80.0 + 1400.0 * var_x149);
        const double var_x153 = 0.20000000000000001 * var_chaste_interface__membrane__V;
        const double var_x154 = exp(7.0 + var_x153);
        const double var_x155 = 1.0 + var_x154;
        const double var_x156 = 1 / var_x155;
        const double var_x157 = exp(-0.25 + 0.0050000000000000001 * var_chaste_interface__membrane__V);
        const double var_x158 = 1.0 + var_x157;
        const double var_x159 = 1 / var_x158;
        const double var_x160 = 1 / (0.10000000000000001 * var_x156 + 0.10000000000000001 * var_x159);
        const double var_x161 = exp(-6.2967884828349945 - 0.11074197120708749 * var_chaste_interface__membrane__V);
        const double var_x162 = 1.0 + var_x161;
        const double var_x163 = -var_chaste_interface__fast_sodium_current_m_gate__m + 1 / pow(var_x162, 2);
        const double var_x164 = exp(-12.0 - var_x153);
        const double var_x165 = 1.0 + var_x164;
        const double var_x166 = var_x160 * var_x165;
        const double var_x167 = exp(-11.764705882352942 + 0.14705882352941177 * NV_Ith_S(mParameters, 14) - 0.14705882352941177 * var_chaste_interface__membrane__V);
        const double var_x168 = var_chaste_interface__membrane__V < -40.0 + NV_Ith_S(mParameters, 14);
        const double var_x169 = exp(0.34849999999999998 * var_chaste_interface__membrane__V - 0.34849999999999998 * NV_Ith_S(mParameters, 14));
        const double var_x170 = exp(0.079000000000000001 * var_chaste_interface__membrane__V - 0.079000000000000001 * NV_Ith_S(mParameters, 14));
        const double var_x171 = exp(-0.96036036036036043 + 0.0900900900900901 * NV_Ith_S(mParameters, 14) - 0.0900900900900901 * var_chaste_interface__membrane__V);
        const double var_x172 = 1.0 + var_x171;
        const double var_x173 = 0.01 * NV_Ith_S(mParameters, 13);
        const double var_x174 = exp(9.6298788694481825 + 0.13458950201884254 * var_chaste_interface__membrane__V - 0.13458950201884254 * NV_Ith_S(mParameters, 14));
        const double var_x175 = 1.0 + var_x174;
        const double var_x176 = 1.0 - var_x173;
        const double var_x177 = var_x173 + var_x176 / pow(var_x175, 2);
        const double var_x178 = ((var_x168) ? (0.057000000000000002 * var_x167) : (0));
        const double var_x179 = ((var_x168) ? (310000.0 * var_x169 + 2.7000000000000002 * var_x170) : (5.9230769230769234 / var_x172));
        const double var_x180 = 0.26917900403768508 * var_x174 * var_x176 / pow(var_x175, 3);
        const double var_x181 = exp(-5.5312920000000005 + 0.13780000000000001 * NV_Ith_S(mParameters, 14) - 0.13780000000000001 * var_chaste_interface__membrane__V);
        const double var_x182 = 1.0 + var_x181;
        const double var_x183 = exp(0.01052 * NV_Ith_S(mParameters, 14) - 0.01052 * var_chaste_interface__membrane__V);
        const double var_x184 = var_x183 / var_x182;
        const double var_x185 = exp(-3.2000000000000002 - var_x21 + 0.10000000000000001 * NV_Ith_S(mParameters, 14));
        const double var_x186 = 1.0 + var_x185;
        const double var_x187 = exp(0.057000000000000002 * var_chaste_interface__membrane__V - 0.057000000000000002 * NV_Ith_S(mParameters, 14));
        const double var_x188 = var_x187 / var_x186;
        const double var_x189 = exp(0.24440000000000001 * var_chaste_interface__membrane__V - 0.24440000000000001 * NV_Ith_S(mParameters, 14));
        const double var_x190 = exp(0.043909999999999998 * NV_Ith_S(mParameters, 14) - 0.043909999999999998 * var_chaste_interface__membrane__V);
        const double var_x191 = -25428.0 * var_x189 - 6.9480000000000002e-6 * var_x190;
        const double var_x192 = exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane__V - 0.311 * NV_Ith_S(mParameters, 14));
        const double var_x193 = 1.0 + var_x192;
        const double var_x194 = 1 / var_x193;
        const double var_x195 = var_x191 * var_x194;
        const double var_x196 = 37.780000000000001 + var_chaste_interface__membrane__V;
        const double var_x197 = ((var_x168) ? (0.024240000000000001 * var_x184) : (0.59999999999999998 * var_x188));
        const double var_x198 = ((var_x168) ? (var_x195 * var_x196) : (0));
        const double var_x199 = exp(2.5 + var_x133);
        const double var_x200 = 1.0 + var_x199;
        const double var_x201 = 1 / var_x200;
        const double var_x202 = exp(1.0 + var_x153);
        const double var_x203 = 1.0 + var_x202;
        const double var_x204 = 1 / var_x203;
        const double var_x205 = exp(-2.6923076923076925 - 0.076923076923076927 * var_chaste_interface__membrane__V);
        const double var_x206 = 1.0 + var_x205;
        const double var_x207 = 0.25 + 1.3999999999999999 / var_x206;
        const double var_x208 = var_x204 * var_x207;
        const double var_x209 = exp(-1.0666666666666667 - 0.13333333333333333 * var_chaste_interface__membrane__V);
        const double var_x210 = 1.0 + var_x209;
        const double var_x211 = 1 / (var_x201 + 1.3999999999999999 * var_x208);
        const double var_x212 = exp(3.0 + var_x121);
        const double var_x213 = 1.0 + var_x212;
        const double var_x214 = 1 / var_x213;
        const double var_x215 = exp(1.3 + var_x122);
        const double var_x216 = 1.0 + var_x215;
        const double var_x217 = 1 / var_x216;
        const double var_x218 = pow((1 + 0.037037037037037035 * var_chaste_interface__membrane__V), 2);
        const double var_x219 = exp(-3.2400000000000002 * var_x218);
        const double var_x220 = exp(2.8571428571428572 + var_x125);
        const double var_x221 = 1.0 + var_x220;
        const double var_x222 = var_x212 / pow(var_x213, 2);
        const double var_x223 = 1102.5 * var_x219;
        const double var_x224 = 1 / (20.0 + var_x223 + 200.0 * var_x217 + 180.0 * var_x214);
        const double var_x225 = exp(2.5 + var_x122);
        const double var_x226 = 1.0 + var_x225;
        const double var_x227 = 1 / var_x226;
        const double var_x228 = exp(-3.0375000000000001 * var_x218);
        const double var_x229 = exp(5.0 + var_x125);
        const double var_x230 = 1.0 + var_x229;
        const double var_x231 = 562.0 * var_x228;
        const double var_x232 = 1 / (var_x231 + 80.0 * var_x214 + 31.0 * var_x227);
        const double var_x233 = pow(var_chaste_interface__calcium_dynamics__Ca_ss, 2);
        const double var_x234 = 1 / (1.0 + 399.99999999999994 * var_x233);
        const double var_x235 = 1 / (2.0 + 80.0 * var_x234);
        const double var_x236 = var_chaste_interface__calcium_dynamics__Ca_ss / pow((0.0025000000000000005 + var_x233), 2);
        const double var_x237 = exp(-4.0 + var_x153);
        const double var_x238 = 1.0 + var_x237;
        const double var_x239 = 1 / var_x238;
        const double var_x240 = exp(-6.328125 * pow((1 + 0.022222222222222223 * var_chaste_interface__membrane__V), 2));
        const double var_x241 = exp(4.0 + var_x153);
        const double var_x242 = 1.0 + var_x241;
        const double var_x243 = 85.0 * var_x240;
        const double var_x244 = 1 / (3.0 + var_x243 + 5.0 * var_x239);
        const double var_x245 = exp(3.3333333333333335 + var_x142);
        const double var_x246 = 1.0 + var_x245;
        const double var_x247 = exp(-0.88888888888888884 * pow((1 + 0.025000000000000001 * var_chaste_interface__membrane__V), 2));
        const double var_x248 = 1 / (0.80000000000000004 + 9.5 * var_x247);
        const double var_x249 = 0.29999999999999999 + var_chaste_interface__calcium_dynamics__Ca_SR;
        const double var_x250 = pow(var_x249, (-2));
        const double var_x251 = 1 / (1.0 + 3.0 * var_x250);
        const double var_x252 = var_x251;
        const double var_x253 = pow(var_chaste_interface__calcium_dynamics__Ca_SR, (-2));
        const double var_x254 = 1 / (1.0 + 2.25 * var_x253);
        const double var_x255 = 1 / (2.5 - 1.5 * var_x254);
        const double var_x256 = var_x233 * var_x255;
        const double var_x257 = 0.14999999999999999 * var_x256;
        const double var_x258 = 1 / (0.059999999999999998 + var_x257);
        const double var_x259 = var_chaste_interface__calcium_dynamics__R_prime * NV_Ith_S(mParameters, 1);
        const double var_x260 = var_x258 * var_x259;
        const double var_x261 = var_x257 * var_x260;
        const double var_x262 = 1 / (pow((0.44444444444444442 + var_x253), 2) * pow(var_chaste_interface__calcium_dynamics__Ca_SR, 3));
        const double var_x263 = -var_chaste_interface__calcium_dynamics__Ca_ss + var_chaste_interface__calcium_dynamics__Ca_SR;
        const double var_x264 = var_x263 / pow((1 - 0.59999999999999998 * var_x254), 2);
        const double var_x265 = var_x233 * var_x260 * var_x262 * var_x264;
        const double var_x266 = var_x259 * var_x264 / pow((0.40000000000000002 + var_x256), 2);
        const double var_x267 = var_x255 * var_x262 * var_x266 * pow(var_chaste_interface__calcium_dynamics__Ca_ss, 4);
        const double var_x268 = var_x266 * pow(var_chaste_interface__calcium_dynamics__Ca_ss, 3);
        const double var_x269 = var_chaste_interface__calcium_dynamics__Ca_ss * var_chaste_interface__calcium_dynamics__R_prime;
        const double var_x270 = var_x258 * var_x263 * NV_Ith_S(mParameters, 1);
        const double var_x271 = var_x255 * var_x269 * var_x270;
        const double var_x272 = 0.00025000000000000001 + var_chaste_interface__calcium_dynamics__Ca_ss;
        const double var_x273 = 1.0 + 0.0001 / pow(var_x272, 2);
        const double var_x274 = 1 / var_x273;
        const double var_x275 = 1369.1986401882032 * NV_Ith_S(mParameters, 11);
        const double var_x276 = var_x274 * var_x275;
        const double var_x277 = var_x276 * var_x90;
        const double var_x278 = var_x276 * var_x92;
        const double var_x279 = 3.0010972933430868 * var_x256;
        const double var_x280 = var_x260 * var_x279;
        const double var_x281 = var_x274;
        const double var_x282 = -0.11249999999999999 + 0.067500000000000004 * var_x254;
        const double var_x283 = NV_Ith_S(mParameters, 11) * NV_Ith_S(mParameters, 3);
        const double var_x284 = 0.00063181349969740233 * var_x283;
        const double var_x285 = var_x284 * var_x7 * var_x83;
        const double var_x286 = 2.7188924024856265e-5 * var_x48;
        const double var_x287 = 0.00027188924024856262 * var_x283;
        const double var_x288 = var_x28 * var_x284;
        
        // Matrix entries
        IJth(rJacobian, 0, 0) = mSetVoltageDerivativeToZero ? 0.0 : (0.0025819888974716113 * var_x42 - var_x2 - var_x3 - var_x39 - var_x5 - var_x70 - NV_Ith_S(mParameters, 8) - NV_Ith_S(mParameters, 9) - 0.0024332029034784559 * var_x44 - 0.043033148291193521 * var_x26 - 0.16722408026755853 * var_x29 - var_x11 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 - var_x46 * var_x49 - var_x6 * var_x8 - var_x61 * var_x64);
        IJth(rJacobian, 1, 0) = var_x115 * (0.00063181349969740233 * var_x39 + 1.5373304419206038e-6 * var_x44 - 0.00031590674984870116 * NV_Ith_S(mParameters, 8)) * NV_Ith_S(mParameters, 11);
        IJth(rJacobian, 2, 0) = 3.2206119162640899e-5 * var_x124 * var_x128 * var_x129 + 0.14285714285714285 * var_x126 * var_x131 / pow(var_x127, 2) - 0.10000000000000001 * var_x123 * var_x128 * var_x130;
        IJth(rJacobian, 3, 0) = 0.01488095238095238 * var_x135 * var_x138 * var_x139 - 0.041666666666666664 * var_x136 * var_x141 / pow(var_x137, 2) - 0.050000000000000003 * var_x134 * var_x138 * var_x140;
        IJth(rJacobian, 4, 0) = 5.1020408163265302e-7 * (-var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs + 1 / var_x151) * (93.333333333333329 * var_x145 * var_x146 / pow(var_x147, 2) - 116.66666666666667 * var_x143 * var_x148 / pow(var_x144, (3 / 2))) / pow((0.057142857142857141 + var_x149), 2) + 0.071428571428571425 * var_x150 * var_x152 / pow(var_x151, 2);
        IJth(rJacobian, 5, 0) = 0.22148394241417499 * var_x161 * var_x166 / pow(var_x162, 3) - 0.20000000000000001 * var_x160 * var_x163 * var_x164 + 99.999999999999986 * var_x163 * var_x165 * (0.02 * var_x154 / pow(var_x155, 2) + 0.00050000000000000001 * var_x157 / pow(var_x158, 2)) / pow((var_x156 + var_x159), 2);
        IJth(rJacobian, 6, 0) = (var_x177 - var_chaste_interface__fast_sodium_current_h_gate__h) * (((var_x168) ? (-0.008382352941176471 * var_x167) : (0)) + ((var_x168) ? (108035.0 * var_x169 + 0.21330000000000002 * var_x170) : (0.53361053361053368 * var_x171 / pow(var_x172, 2)))) - var_x180 * (var_x178 + var_x179);
        IJth(rJacobian, 7, 0) = (var_x177 - var_chaste_interface__fast_sodium_current_j_gate__j) * (((var_x168) ? (-0.00025500480000000003 * var_x184 + 0.0033402720000000005 * var_x181 * var_x183 / pow(var_x182, 2)) : (0.034200000000000001 * var_x188 + 0.059999999999999998 * var_x185 * var_x187 / pow(var_x186, 2))) + ((var_x168) ? (var_x195 + var_x194 * var_x196 * (3.0508668000000001e-7 * var_x190 - 6214.6032000000005 * var_x189) - 0.311 * var_x191 * var_x192 * var_x196 / pow(var_x193, 2)) : (0))) - var_x180 * (var_x197 + var_x198);
        IJth(rJacobian, 8, 0) = 0.51020408163265307 * (-var_chaste_interface__L_type_Ca_current_d_gate__d + 1 / var_x210) * (-0.050000000000000003 * var_x199 / pow(var_x200, 2) + 0.27999999999999997 * var_x202 * var_x207 / pow(var_x203, 2) - 0.15076923076923074 * var_x204 * var_x205 / pow(var_x206, 2)) / pow((var_x208 + 0.7142857142857143 * var_x201), 2) + 0.13333333333333333 * var_x209 * var_x211 / pow(var_x210, 2);
        IJth(rJacobian, 9, 0) = 8.2270247479188195e-7 * (-var_chaste_interface__L_type_Ca_current_f_gate__f + 1 / var_x221) * (18.0 * var_x222 - var_x223 * (-0.23999999999999999 - 0.0088888888888888889 * var_chaste_interface__membrane__V) - 20.0 * var_x215 / pow(var_x216, 2)) / pow((0.018140589569160998 + var_x219 + 0.16326530612244897 * var_x214 + 0.18140589569160998 * var_x217), 2) - 0.14285714285714285 * var_x220 * var_x224 / pow(var_x221, 2);
        IJth(rJacobian, 10, 0) = 3.1661199832828864e-6 * (0.33000000000000002 - var_chaste_interface__L_type_Ca_current_f2_gate__f2 + 0.67000000000000004 / var_x230) * (8.0 * var_x222 - var_x231 * (-0.22500000000000001 - 0.0083333333333333332 * var_chaste_interface__membrane__V) - 3.1000000000000001 * var_x225 / pow(var_x226, 2)) / pow((var_x228 + 0.055160142348754451 * var_x227 + 0.14234875444839859 * var_x214), 2) - 0.095714285714285724 * var_x229 * var_x232 / pow(var_x230, 2);
        IJth(rJacobian, 12, 0) = 0.00013840830449826991 * (-var_chaste_interface__transient_outward_current_s_gate__s + 1 / var_x242) * (-var_x243 * (-0.28125 - 0.0062500000000000003 * var_chaste_interface__membrane__V) + var_x237 / pow(var_x238, 2)) / pow((0.035294117647058823 + var_x240 + 0.058823529411764705 * var_x239), 2) - 0.20000000000000001 * var_x241 * var_x244 / pow(var_x242, 2);
        IJth(rJacobian, 13, 0) = 0.16666666666666666 * var_x245 * var_x248 / pow(var_x246, 2) - 0.10526315789473684 * var_x247 * (-0.044444444444444446 - 0.0011111111111111111 * var_chaste_interface__membrane__V) * (-var_chaste_interface__transient_outward_current_r_gate__r + 1 / var_x246) / pow((0.084210526315789472 + var_x247), 2);
        IJth(rJacobian, 15, 0) = -var_x276 * var_x61 * var_x63;
        IJth(rJacobian, 17, 0) = var_x283 * (-0.0018954404990922068 * var_x39 - 0.0018954404990922068 * var_x70 - 4.6119913257618111e-6 * var_x44 - 0.00063181349969740233 * var_x100 - 0.00063181349969740233 * NV_Ith_S(mParameters, 9));
        IJth(rJacobian, 18, 0) = var_x283 * (0.0012636269993948047 * var_x70 + 1.631335441491376e-6 * var_x42 - 0.00027188924024856262 * var_x107 - 2.7188924024856265e-5 * var_x26 - 0.00010565443138752546 * var_x29 - 0.00063181349969740233 * var_x2 - 0.00063181349969740233 * var_x3 - 0.00063181349969740233 * var_x5 - var_x286 * var_x46);
        IJth(rJacobian, 0, 1) = mSetVoltageDerivativeToZero ? 0.0 : (var_x75 + 2.5 * var_x76 - var_x72 - 13.356880329847826 * var_x74);
        IJth(rJacobian, 1, 1) = var_x115 * (-0.0038 - var_x116 - 8.3363813703974642e-9 * var_x118 + (0.00031590674984870116 * var_x75 - 0.0042195286531202733 * var_x74 - 0.0015795337492435057 * var_x76 - 0.00031590674984870116 * var_x72) * NV_Ith_S(mParameters, 11)) + 0.00040000000000000002 * (0.0038 * var_chaste_interface__calcium_dynamics__Ca_ss - 0.0038 * var_chaste_interface__calcium_dynamics__Ca_i - 0.066691050963179718 * var_x120 + var_x116 * var_x119 - 0.00031590674984870116 * (var_x72 * var_chaste_interface__calcium_dynamics__Ca_i + (-13.356880329847826 * log(var_x73 * NV_Ith_S(mParameters, 4)) + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 8) - 2.0 * var_x38 * var_x43) * NV_Ith_S(mParameters, 11)) / (pow(var_x112, 3) * pow(var_x113, 2));
        IJth(rJacobian, 14, 1) = var_x252 * (1.2499999999999999e-7 * var_x118 + NV_Ith_S(mParameters, 0));
        IJth(rJacobian, 15, 1) = 1.1399999999999999 * var_x274;
        IJth(rJacobian, 17, 1) = 0.0047386012477305169 * var_x283 * var_x76;
        IJth(rJacobian, 0, 2) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x11 * var_x28);
        IJth(rJacobian, 2, 2) = -var_x131;
        IJth(rJacobian, 18, 2) = -var_x10 * var_x28 * var_x287;
        IJth(rJacobian, 0, 3) = mSetVoltageDerivativeToZero ? 0.0 : (-0.43033148291193518 * var_x77);
        IJth(rJacobian, 3, 3) = -var_x141;
        IJth(rJacobian, 18, 3) = -var_x287 * var_x77;
        IJth(rJacobian, 0, 4) = mSetVoltageDerivativeToZero ? 0.0 : (-2.0 * var_x79);
        IJth(rJacobian, 4, 4) = -var_x152;
        IJth(rJacobian, 18, 4) = -0.0012636269993948047 * var_x283 * var_x79;
        IJth(rJacobian, 0, 5) = mSetVoltageDerivativeToZero ? 0.0 : (-3.0 * var_x82);
        IJth(rJacobian, 5, 5) = -var_x166;
        IJth(rJacobian, 17, 5) = -0.0018954404990922068 * var_x283 * var_x82;
        IJth(rJacobian, 0, 6) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x84 * var_chaste_interface__fast_sodium_current_j_gate__j);
        IJth(rJacobian, 6, 6) = -var_x178 - var_x179;
        IJth(rJacobian, 17, 6) = -var_x285 * var_chaste_interface__fast_sodium_current_j_gate__j;
        IJth(rJacobian, 0, 7) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x84 * var_chaste_interface__fast_sodium_current_h_gate__h);
        IJth(rJacobian, 7, 7) = -var_x197 - var_x198;
        IJth(rJacobian, 17, 7) = -var_x285 * var_chaste_interface__fast_sodium_current_h_gate__h;
        IJth(rJacobian, 0, 8) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x91 * var_chaste_interface__L_type_Ca_current_f_gate__f);
        IJth(rJacobian, 8, 8) = -var_x211;
        IJth(rJacobian, 15, 8) = -var_x277 * var_chaste_interface__L_type_Ca_current_f_gate__f;
        IJth(rJacobian, 0, 9) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x91 * var_chaste_interface__L_type_Ca_current_d_gate__d);
        IJth(rJacobian, 9, 9) = -var_x224;
        IJth(rJacobian, 15, 9) = -var_x277 * var_chaste_interface__L_type_Ca_current_d_gate__d;
        IJth(rJacobian, 0, 10) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x93 * var_chaste_interface__L_type_Ca_current_fCass_gate__fCass);
        IJth(rJacobian, 10, 10) = -var_x232;
        IJth(rJacobian, 15, 10) = -var_x278 * var_chaste_interface__L_type_Ca_current_fCass_gate__fCass;
        IJth(rJacobian, 0, 11) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x93 * var_chaste_interface__L_type_Ca_current_f2_gate__f2);
        IJth(rJacobian, 11, 11) = -var_x235;
        IJth(rJacobian, 15, 11) = -var_x278 * var_chaste_interface__L_type_Ca_current_f2_gate__f2;
        IJth(rJacobian, 0, 12) = mSetVoltageDerivativeToZero ? 0.0 : (var_x94 * var_chaste_interface__transient_outward_current_r_gate__r);
        IJth(rJacobian, 12, 12) = -var_x244;
        IJth(rJacobian, 18, 12) = -var_x288 * var_x4;
        IJth(rJacobian, 0, 13) = mSetVoltageDerivativeToZero ? 0.0 : (var_x94 * var_chaste_interface__transient_outward_current_s_gate__s);
        IJth(rJacobian, 13, 13) = -var_x248;
        IJth(rJacobian, 18, 13) = -var_x288 * NV_Ith_S(mParameters, 21) * var_chaste_interface__transient_outward_current_s_gate__s;
        IJth(rJacobian, 1, 14) = var_x114 * var_x116;
        IJth(rJacobian, 14, 14) = var_x252 * (-var_x261 - NV_Ith_S(mParameters, 0) + 0.21333333333333335 * var_x267 - 0.032000000000000001 * var_x265) + 0.66666666666666674 * (var_x120 - var_x119 * NV_Ith_S(mParameters, 0) - var_x261 * var_x263) / (pow(var_x249, 3) * pow((0.33333333333333337 + var_x250), 2));
        IJth(rJacobian, 15, 14) = var_x281 * (var_x280 + 0.64023408924652514 * var_x265 - 4.2682272616435011 * var_x267);
        IJth(rJacobian, 16, 14) = 0.059999999999999998 * var_x262 * var_x269;
        IJth(rJacobian, 0, 15) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x64 * var_x95);
        IJth(rJacobian, 1, 15) = 0.0038 * var_x114;
        IJth(rJacobian, 11, 15) = -0.0030000000000000001 * var_x235 * var_x236 + 6.2500000000000001e-5 * var_x236 * (0.40000000000000002 - var_chaste_interface__L_type_Ca_current_fCass_gate__fCass + 0.59999999999999998 * var_x234) / pow((0.025000000000000001 + var_x234), 2);
        IJth(rJacobian, 14, 15) = var_x252 * (var_x261 + 0.32000000000000001 * var_x268 - 0.29999999999999999 * var_x271);
        IJth(rJacobian, 15, 15) = var_x281 * (-1.1399999999999999 - var_x280 + 6.0021945866861737 * var_x271 - 6.4023408924652525 * var_x268 - var_x275 * var_x63 * var_x95) + 0.00020000000000000001 * (1.1399999999999999 * var_chaste_interface__calcium_dynamics__Ca_i - 1.1399999999999999 * var_chaste_interface__calcium_dynamics__Ca_ss + var_x263 * var_x280 - var_x275 * var_x62 * var_x90) / (pow(var_x272, 3) * pow(var_x273, 2));
        IJth(rJacobian, 16, 15) = var_x282 * var_chaste_interface__calcium_dynamics__R_prime;
        IJth(rJacobian, 14, 16) = -var_x251 * var_x257 * var_x270;
        IJth(rJacobian, 15, 16) = var_x270 * var_x274 * var_x279;
        IJth(rJacobian, 16, 16) = -0.0050000000000000001 + var_x282 * var_chaste_interface__calcium_dynamics__Ca_ss;
        IJth(rJacobian, 0, 17) = mSetVoltageDerivativeToZero ? 0.0 : (0.00062500000000000001 * var_x102 - var_x99 - 3.0 * var_x103 - 26.713760659695652 * var_x101 - 26.713760659695652 * var_x96 - 0.80141281979086942 * var_x97);
        IJth(rJacobian, 1, 17) = 0.0018954404990922068 * var_x103 * var_x114 * NV_Ith_S(mParameters, 11);
        IJth(rJacobian, 17, 17) = var_x283 * (1.1846503119326294e-6 * var_x102 - 0.0018954404990922068 * var_x99 - 0.016878114612481093 * var_x101 - 0.016878114612481093 * var_x96 - 0.0056863214972766203 * var_x103);
        IJth(rJacobian, 18, 17) = var_x283 * (0.0012636269993948047 * var_x99 - 0.00050634343837443281 * var_x97 - 7.8976687462175284e-7 * var_x102);
        IJth(rJacobian, 0, 18) = mSetVoltageDerivativeToZero ? 0.0 : (0.068974633433048077 * var_x111 - 26.713760659695652 * var_x104 - 26.713760659695652 * var_x105 - 26.713760659695652 * var_x97 - 1.1495772238841346 * var_x106 - 11.495772238841345 * var_x108 - var_x110 * var_x49);
        IJth(rJacobian, 18, 18) = var_x283 * (4.357910453967955e-5 * var_x111 - 0.016878114612481093 * var_x104 - 0.016878114612481093 * var_x105 - 0.016878114612481093 * var_x97 - 0.00072631840899465921 * var_x106 - 0.0072631840899465916 * var_x108 - var_x110 * var_x286);
    }

    N_Vector Cellten_tusscher_model_2006_epi_analyticFromCellMLCvode::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const N_Vector & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -85.23
        double var_chaste_interface__calcium_dynamics__Ca_i = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.000126
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.00621
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.4712
        double var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.0095
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.00172
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.7444
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.7045
        double var_chaste_interface__L_type_Ca_current_d_gate__d = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 3.373e-05
        double var_chaste_interface__L_type_Ca_current_f_gate__f = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.7888
        double var_chaste_interface__L_type_Ca_current_f2_gate__f2 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.9755
        double var_chaste_interface__L_type_Ca_current_fCass_gate__fCass = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.9953
        double var_chaste_interface__transient_outward_current_s_gate__s = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.999998
        double var_chaste_interface__transient_outward_current_r_gate__r = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 2.42e-08
        double var_chaste_interface__calcium_dynamics__Ca_SR = NV_Ith_S(rY, 14);
        // Units: millimolar; Initial value: 3.64
        double var_chaste_interface__calcium_dynamics__Ca_ss = NV_Ith_S(rY, 15);
        // Units: millimolar; Initial value: 0.00036
        double var_chaste_interface__calcium_dynamics__R_prime = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.9073
        double var_chaste_interface__sodium_dynamics__Na_i = NV_Ith_S(rY, 17);
        // Units: millimolar; Initial value: 8.604
        double var_chaste_interface__potassium_dynamics__K_i = NV_Ith_S(rY, 18);
        // Units: millimolar; Initial value: 136.89
        
        // Mathematics
        const double var_L_type_Ca_current__V_high = 15.000999999999999; // millivolt
        const double var_L_type_Ca_current__V_low = 14.999000000000001; // millivolt
        const double var_L_type_Ca_current_fCass_gate__tau_fCass = 2.0 + 80.0 / (1.0 + 399.99999999999994 * pow(var_chaste_interface__calcium_dynamics__Ca_ss, 2)); // millisecond
        const double var_calcium_dynamics__EC = 1.5; // millimolar
        const double var_calcium_dynamics__k1_prime = 0.14999999999999999; // per_millimolar2_per_millisecond
        const double var_calcium_dynamics__k3 = 0.059999999999999998; // per_millisecond
        const double var_calcium_dynamics__max_sr = 2.5; // dimensionless
        const double var_calcium_dynamics__min_sr = 1.0; // dimensionless
        const double var_calcium_dynamics__kcasr = -(-var_calcium_dynamics__min_sr + var_calcium_dynamics__max_sr) / (1.0 + pow(var_calcium_dynamics__EC, 2) / pow(var_chaste_interface__calcium_dynamics__Ca_SR, 2)) + var_calcium_dynamics__max_sr; // dimensionless
        const double var_calcium_dynamics__k1 = var_calcium_dynamics__k1_prime / var_calcium_dynamics__kcasr; // per_millimolar2_per_millisecond
        const double var_calcium_dynamics__O = pow(var_chaste_interface__calcium_dynamics__Ca_ss, 2) * var_chaste_interface__calcium_dynamics__R_prime * var_calcium_dynamics__k1 / (pow(var_chaste_interface__calcium_dynamics__Ca_ss, 2) * var_calcium_dynamics__k1 + var_calcium_dynamics__k3); // dimensionless
        const double var_calcium_dynamics__i_rel = (-var_chaste_interface__calcium_dynamics__Ca_ss + var_chaste_interface__calcium_dynamics__Ca_SR) * var_calcium_dynamics__O * NV_Ith_S(mParameters, 1); // millimolar_per_millisecond
        const double var_calcium_pump_current__K_pCa = 0.00050000000000000001; // millimolar
        const double var_calcium_pump_current__i_p_Ca = var_chaste_interface__calcium_dynamics__Ca_i * NV_Ith_S(mParameters, 10) / (var_chaste_interface__calcium_dynamics__Ca_i + var_calcium_pump_current__K_pCa); // picoA_per_picoF
        const double var_calcium_pump_current__i_p_Ca_converted = HeartConfig::Instance()->GetCapacitance() * var_calcium_pump_current__i_p_Ca; // uA_per_cm2
        const double var_membrane__F = 96485.341499999995; // coulomb_per_millimole
        const double var_membrane__R = 8314.4719999999998; // joule_per_mole_kelvin
        const double var_membrane__T = 310.0; // kelvin
        const double var_L_type_Ca_current__temp = (((var_L_type_Ca_current__V_low > var_chaste_interface__membrane__V) || (var_L_type_Ca_current__V_high < var_chaste_interface__membrane__V)) ? ((-15.0 + var_chaste_interface__membrane__V) * (-NV_Ith_S(mParameters, 4) + 0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * exp(2.0 * (-15.0 + var_chaste_interface__membrane__V) * var_membrane__F / (var_membrane__R * var_membrane__T))) / (-1.0 + exp(2.0 * (-15.0 + var_chaste_interface__membrane__V) * var_membrane__F / (var_membrane__R * var_membrane__T)))) : (0.5 * (-15.0 + var_L_type_Ca_current__V_high) * (-NV_Ith_S(mParameters, 4) + 0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * exp(2.0 * (-15.0 + var_L_type_Ca_current__V_high) * var_membrane__F / (var_membrane__R * var_membrane__T))) / (-1.0 + exp(2.0 * (-15.0 + var_L_type_Ca_current__V_high) * var_membrane__F / (var_membrane__R * var_membrane__T))) + 0.5 * (-15.0 + var_L_type_Ca_current__V_low) * (-NV_Ith_S(mParameters, 4) + 0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * exp(2.0 * (-15.0 + var_L_type_Ca_current__V_low) * var_membrane__F / (var_membrane__R * var_membrane__T))) / (-1.0 + exp(2.0 * (-15.0 + var_L_type_Ca_current__V_low) * var_membrane__F / (var_membrane__R * var_membrane__T))))); // millivolt_millimoles
        const double var_L_type_Ca_current__i_CaL = 4.0 * pow(var_membrane__F, 2) * NV_Ith_S(mParameters, 7) * var_L_type_Ca_current__temp * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f2_gate__f2 * var_chaste_interface__L_type_Ca_current_fCass_gate__fCass * var_chaste_interface__L_type_Ca_current_f_gate__f / (var_membrane__R * var_membrane__T); // picoA_per_picoF
        const double var_L_type_Ca_current__i_CaL_converted = HeartConfig::Instance()->GetCapacitance() * var_L_type_Ca_current__i_CaL; // uA_per_cm2
        const double var_L_type_Ca_current_f2_gate__tau_f2 = 80.0 / (1.0 + exp(3.0 + 0.10000000000000001 * var_chaste_interface__membrane__V)) + 31.0 / (1.0 + exp(2.5 - 0.10000000000000001 * var_chaste_interface__membrane__V)) + 562.0 * exp(-3.0375000000000001 * pow((1 + 0.037037037037037035 * var_chaste_interface__membrane__V), 2)); // millisecond
        const double var_L_type_Ca_current_f_gate__tau_f = 20.0 + 200.0 / (1.0 + exp(1.3 - 0.10000000000000001 * var_chaste_interface__membrane__V)) + 180.0 / (1.0 + exp(3.0 + 0.10000000000000001 * var_chaste_interface__membrane__V)) + 1102.5 * exp(-3.2400000000000002 * pow((1 + 0.037037037037037035 * var_chaste_interface__membrane__V), 2)); // millisecond
        const double var_fast_sodium_current_h_gate__alpha_h = ((var_chaste_interface__membrane__V < -40.0 + NV_Ith_S(mParameters, 14)) ? (0.057000000000000002 * exp(-11.764705882352942 + 0.14705882352941177 * NV_Ith_S(mParameters, 14) - 0.14705882352941177 * var_chaste_interface__membrane__V)) : (0)); // per_millisecond
        const double var_fast_sodium_current_h_gate__beta_h = ((var_chaste_interface__membrane__V < -40.0 + NV_Ith_S(mParameters, 14)) ? (310000.0 * exp(0.34849999999999998 * var_chaste_interface__membrane__V - 0.34849999999999998 * NV_Ith_S(mParameters, 14)) + 2.7000000000000002 * exp(0.079000000000000001 * var_chaste_interface__membrane__V - 0.079000000000000001 * NV_Ith_S(mParameters, 14))) : (5.9230769230769234 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * NV_Ith_S(mParameters, 14) - 0.0900900900900901 * var_chaste_interface__membrane__V)))); // per_millisecond
        const double var_fast_sodium_current_h_gate__tau_h = 1 / (var_fast_sodium_current_h_gate__alpha_h + var_fast_sodium_current_h_gate__beta_h); // millisecond
        const double var_fast_sodium_current_j_gate__alpha_j = ((var_chaste_interface__membrane__V < -40.0 + NV_Ith_S(mParameters, 14)) ? ((37.780000000000001 + var_chaste_interface__membrane__V) * (-25428.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V - 0.24440000000000001 * NV_Ith_S(mParameters, 14)) - 6.9480000000000002e-6 * exp(0.043909999999999998 * NV_Ith_S(mParameters, 14) - 0.043909999999999998 * var_chaste_interface__membrane__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane__V - 0.311 * NV_Ith_S(mParameters, 14)))) : (0)); // per_millisecond
        const double var_fast_sodium_current_j_gate__beta_j = ((var_chaste_interface__membrane__V < -40.0 + NV_Ith_S(mParameters, 14)) ? (0.024240000000000001 * exp(0.01052 * NV_Ith_S(mParameters, 14) - 0.01052 * var_chaste_interface__membrane__V) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * NV_Ith_S(mParameters, 14) - 0.13780000000000001 * var_chaste_interface__membrane__V))) : (0.59999999999999998 * exp(0.057000000000000002 * var_chaste_interface__membrane__V - 0.057000000000000002 * NV_Ith_S(mParameters, 14)) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * NV_Ith_S(mParameters, 14) - 0.10000000000000001 * var_chaste_interface__membrane__V)))); // per_millisecond
        const double var_fast_sodium_current_j_gate__tau_j = 1 / (var_fast_sodium_current_j_gate__alpha_j + var_fast_sodium_current_j_gate__beta_j); // millisecond
        const double var_membrane__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_reversal_potentials__E_Ca = 0.5 * var_membrane__R * var_membrane__T * log(NV_Ith_S(mParameters, 4) / var_chaste_interface__calcium_dynamics__Ca_i) / var_membrane__F; // millivolt
        const double var_calcium_background_current__i_b_Ca = (-var_reversal_potentials__E_Ca + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 8); // picoA_per_picoF
        const double var_calcium_background_current__i_b_Ca_converted = HeartConfig::Instance()->GetCapacitance() * var_calcium_background_current__i_b_Ca; // uA_per_cm2
        const double var_reversal_potentials__E_K = var_membrane__R * var_membrane__T * log(NV_Ith_S(mParameters, 5) / var_chaste_interface__potassium_dynamics__K_i) / var_membrane__F; // millivolt
        const double var_inward_rectifier_potassium_current__alpha_K1 = 0.10000000000000001 / (1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__membrane__V - 0.059999999999999998 * var_reversal_potentials__E_K)); // dimensionless
        const double var_inward_rectifier_potassium_current__beta_K1 = (3.0 * exp(0.02 + 0.00020000000000000001 * var_chaste_interface__membrane__V - 0.00020000000000000001 * var_reversal_potentials__E_K) + exp(-1.0 + 0.10000000000000001 * var_chaste_interface__membrane__V - 0.10000000000000001 * var_reversal_potentials__E_K)) / (1.0 + exp(0.5 * var_reversal_potentials__E_K - 0.5 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_inward_rectifier_potassium_current__xK1_inf = var_inward_rectifier_potassium_current__alpha_K1 / (var_inward_rectifier_potassium_current__alpha_K1 + var_inward_rectifier_potassium_current__beta_K1); // dimensionless
        const double var_inward_rectifier_potassium_current__i_K1 = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 5)) * (-var_reversal_potentials__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 15) * var_inward_rectifier_potassium_current__xK1_inf; // picoA_per_picoF
        const double var_inward_rectifier_potassium_current__i_K1_converted = HeartConfig::Instance()->GetCapacitance() * var_inward_rectifier_potassium_current__i_K1; // uA_per_cm2
        const double var_potassium_pump_current__i_p_K = (-var_reversal_potentials__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 16) / (1.0 + exp(4.1806020066889626 - 0.16722408026755853 * var_chaste_interface__membrane__V)); // picoA_per_picoF
        const double var_potassium_pump_current__i_p_K_converted = HeartConfig::Instance()->GetCapacitance() * var_potassium_pump_current__i_p_K; // uA_per_cm2
        const double var_rapid_time_dependent_potassium_current__i_Kr = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 5)) * (-var_reversal_potentials__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 17) * var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2; // picoA_per_picoF
        const double var_rapid_time_dependent_potassium_current__i_Kr_converted = HeartConfig::Instance()->GetCapacitance() * var_rapid_time_dependent_potassium_current__i_Kr; // uA_per_cm2
        const double var_reversal_potentials__P_kna = 0.029999999999999999; // dimensionless
        const double var_sodium_calcium_exchanger_current__K_sat = 0.10000000000000001; // dimensionless
        const double var_sodium_calcium_exchanger_current__Km_Ca = 1.3799999999999999; // millimolar
        const double var_sodium_calcium_exchanger_current__Km_Nai = 87.5; // millimolar
        const double var_sodium_calcium_exchanger_current__alpha = 2.5; // dimensionless
        const double var_sodium_calcium_exchanger_current__gamma = 0.34999999999999998; // dimensionless
        const double var_reversal_potentials__E_Ks = var_membrane__R * var_membrane__T * log((var_reversal_potentials__P_kna * NV_Ith_S(mParameters, 6) + NV_Ith_S(mParameters, 5)) / (var_reversal_potentials__P_kna * var_chaste_interface__sodium_dynamics__Na_i + var_chaste_interface__potassium_dynamics__K_i)) / var_membrane__F; // millivolt
        const double var_reversal_potentials__E_Na = var_membrane__R * var_membrane__T * log(NV_Ith_S(mParameters, 6) / var_chaste_interface__sodium_dynamics__Na_i) / var_membrane__F; // millivolt
        const double var_fast_sodium_current__i_Na = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_reversal_potentials__E_Na + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 12) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // picoA_per_picoF
        const double var_fast_sodium_current__i_Na_converted = HeartConfig::Instance()->GetCapacitance() * var_fast_sodium_current__i_Na; // uA_per_cm2
        const double var_slow_time_dependent_potassium_current__i_Ks = pow(var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs, 2) * (-var_reversal_potentials__E_Ks + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 18); // picoA_per_picoF
        const double var_slow_time_dependent_potassium_current__i_Ks_converted = HeartConfig::Instance()->GetCapacitance() * var_slow_time_dependent_potassium_current__i_Ks; // uA_per_cm2
        const double var_sodium_background_current__i_b_Na = (-var_reversal_potentials__E_Na + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 9); // picoA_per_picoF
        const double var_sodium_background_current__i_b_Na_converted = HeartConfig::Instance()->GetCapacitance() * var_sodium_background_current__i_b_Na; // uA_per_cm2
        const double var_sodium_calcium_exchanger_current__i_NaCa = (pow(var_chaste_interface__sodium_dynamics__Na_i, 3) * NV_Ith_S(mParameters, 4) * exp(var_membrane__F * var_chaste_interface__membrane__V * var_sodium_calcium_exchanger_current__gamma / (var_membrane__R * var_membrane__T)) - pow(NV_Ith_S(mParameters, 6), 3) * var_chaste_interface__calcium_dynamics__Ca_i * var_sodium_calcium_exchanger_current__alpha * exp((-1.0 + var_sodium_calcium_exchanger_current__gamma) * var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T))) * NV_Ith_S(mParameters, 19) / ((1.0 + var_sodium_calcium_exchanger_current__K_sat * exp((-1.0 + var_sodium_calcium_exchanger_current__gamma) * var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T))) * (pow(var_sodium_calcium_exchanger_current__Km_Nai, 3) + pow(NV_Ith_S(mParameters, 6), 3)) * (NV_Ith_S(mParameters, 4) + var_sodium_calcium_exchanger_current__Km_Ca)); // picoA_per_picoF
        const double var_sodium_calcium_exchanger_current__i_NaCa_converted = HeartConfig::Instance()->GetCapacitance() * var_sodium_calcium_exchanger_current__i_NaCa; // uA_per_cm2
        const double var_sodium_potassium_pump_current__K_mNa = 40.0; // millimolar
        const double var_sodium_potassium_pump_current__K_mk = 1.0; // millimolar
        const double var_sodium_potassium_pump_current__i_NaK = NV_Ith_S(mParameters, 5) * var_chaste_interface__sodium_dynamics__Na_i * NV_Ith_S(mParameters, 20) / ((NV_Ith_S(mParameters, 5) + var_sodium_potassium_pump_current__K_mk) * (var_chaste_interface__sodium_dynamics__Na_i + var_sodium_potassium_pump_current__K_mNa) * (1.0 + 0.035299999999999998 * exp(-var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T)) + 0.1245 * exp(-0.10000000000000001 * var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T)))); // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK_converted = HeartConfig::Instance()->GetCapacitance() * var_sodium_potassium_pump_current__i_NaK; // uA_per_cm2
        const double var_transient_outward_current__i_to = (-var_reversal_potentials__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 21) * var_chaste_interface__transient_outward_current_r_gate__r * var_chaste_interface__transient_outward_current_s_gate__s; // picoA_per_picoF
        const double var_transient_outward_current__i_to_converted = HeartConfig::Instance()->GetCapacitance() * var_transient_outward_current__i_to; // uA_per_cm2

        N_Vector dqs = N_VNew_Serial(20);
        NV_Ith_S(dqs, 0) = var_calcium_dynamics__i_rel;
        NV_Ith_S(dqs, 1) = var_L_type_Ca_current__i_CaL_converted;
        NV_Ith_S(dqs, 2) = var_L_type_Ca_current_f2_gate__tau_f2;
        NV_Ith_S(dqs, 3) = var_L_type_Ca_current_fCass_gate__tau_fCass;
        NV_Ith_S(dqs, 4) = var_L_type_Ca_current_f_gate__tau_f;
        NV_Ith_S(dqs, 5) = var_calcium_background_current__i_b_Ca_converted;
        NV_Ith_S(dqs, 6) = var_sodium_background_current__i_b_Na_converted;
        NV_Ith_S(dqs, 7) = var_calcium_pump_current__i_p_Ca_converted;
        NV_Ith_S(dqs, 8) = var_fast_sodium_current__i_Na_converted;
        NV_Ith_S(dqs, 9) = var_fast_sodium_current_h_gate__tau_h;
        NV_Ith_S(dqs, 10) = var_fast_sodium_current_j_gate__tau_j;
        NV_Ith_S(dqs, 11) = var_inward_rectifier_potassium_current__i_K1_converted;
        NV_Ith_S(dqs, 12) = var_potassium_pump_current__i_p_K_converted;
        NV_Ith_S(dqs, 13) = var_rapid_time_dependent_potassium_current__i_Kr_converted;
        NV_Ith_S(dqs, 14) = var_slow_time_dependent_potassium_current__i_Ks_converted;
        NV_Ith_S(dqs, 15) = var_sodium_calcium_exchanger_current__i_NaCa_converted;
        NV_Ith_S(dqs, 16) = var_sodium_potassium_pump_current__i_NaK_converted;
        NV_Ith_S(dqs, 17) = var_membrane__i_Stim_converted;
        NV_Ith_S(dqs, 18) = var_transient_outward_current__i_to_converted;
        NV_Ith_S(dqs, 19) = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellten_tusscher_model_2006_epi_analyticFromCellMLCvode>::Initialise(void)
{
    this->mSystemName = "tentusscher_model_2006_epi_analytic";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";

    // NV_Ith_S(rY, 0):
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-85.23);

    // NV_Ith_S(rY, 1):
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.000126);

    // NV_Ith_S(rY, 2):
    this->mVariableNames.push_back("rapid_time_dependent_potassium_current_Xr1_gate__Xr1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00621);

    // NV_Ith_S(rY, 3):
    this->mVariableNames.push_back("rapid_time_dependent_potassium_current_Xr2_gate__Xr2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.4712);

    // NV_Ith_S(rY, 4):
    this->mVariableNames.push_back("slow_time_dependent_potassium_current_Xs_gate__Xs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0095);

    // NV_Ith_S(rY, 5):
    this->mVariableNames.push_back("membrane_fast_sodium_current_m_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00172);

    // NV_Ith_S(rY, 6):
    this->mVariableNames.push_back("membrane_fast_sodium_current_h_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7444);

    // NV_Ith_S(rY, 7):
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7045);

    // NV_Ith_S(rY, 8):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_d_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(3.373e-05);

    // NV_Ith_S(rY, 9):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_f_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7888);

    // NV_Ith_S(rY, 10):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_f2_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9755);

    // NV_Ith_S(rY, 11):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_fCa_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9953);

    // NV_Ith_S(rY, 12):
    this->mVariableNames.push_back("transient_outward_current_s_gate__s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999998);

    // NV_Ith_S(rY, 13):
    this->mVariableNames.push_back("transient_outward_current_r_gate__r");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.42e-08);

    // NV_Ith_S(rY, 14):
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(3.64);

    // NV_Ith_S(rY, 15):
    this->mVariableNames.push_back("dyadic_space_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.00036);

    // NV_Ith_S(rY, 16):
    this->mVariableNames.push_back("calcium_dynamics__R_prime");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9073);

    // NV_Ith_S(rY, 17):
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(8.604);

    // NV_Ith_S(rY, 18):
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(136.89);

    // mParameters[0]:
    this->mParameterNames.push_back("SR_leak_current_max");
    this->mParameterUnits.push_back("per_millisecond");

    // mParameters[1]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("per_millisecond");

    // mParameters[2]:
    this->mParameterNames.push_back("SR_uptake_current_max");
    this->mParameterUnits.push_back("millimolar_per_millisecond");

    // mParameters[3]:
    this->mParameterNames.push_back("concentration_clamp_onoff");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[4]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[5]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[6]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[7]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("litre_per_farad_second");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane_background_calcium_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_background_sodium_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_calcium_pump_current_conductance");
    this->mParameterUnits.push_back("picoA_per_picoF");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_capacitance");
    this->mParameterUnits.push_back("microF");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");

    // mParameters[13]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_reduced_inactivation");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[14]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_shift_inactivation");
    this->mParameterUnits.push_back("millivolt");

    // mParameters[15]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");

    // mParameters[16]:
    this->mParameterNames.push_back("membrane_potassium_pump_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");

    // mParameters[17]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");

    // mParameters[18]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");

    // mParameters[19]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("picoA_per_picoF");

    // mParameters[20]:
    this->mParameterNames.push_back("membrane_sodium_potassium_pump_current_permeability");
    this->mParameterUnits.push_back("picoA_per_picoF");

    // mParameters[21]:
    this->mParameterNames.push_back("membrane_transient_outward_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_release_current");
    this->mDerivedQuantityUnits.push_back("millimolar_per_millisecond");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_f2_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_fCa_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_f_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_background_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_background_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_calcium_pump_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_h_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_j_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [11]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [12]:
    this->mDerivedQuantityNames.push_back("membrane_potassium_pump_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [13]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [14]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [15]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [16]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_potassium_pump_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [17]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [18]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [19]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("millisecond");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellten_tusscher_model_2006_epi_analyticFromCellMLCvode)

#endif // CHASTE_CVODE
