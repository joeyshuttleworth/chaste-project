#ifdef CHASTE_CVODE
//! @file
//!
//! This source file was generated from CellML by chaste_codegen version 0.6.3
//!
//! Model: decker_2009
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: AnalyticCvode)
//! on 2021-03-29 17:15:50
//!
//! <autogenerated>

#include "decker_2009Cvode.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"



    boost::shared_ptr<RegularStimulus> Celldecker_2009FromCellMLCvode::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__stim_amplitude_converted = -80.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__membrane__stim_duration = 0.5; // ms
        const double var_chaste_interface__membrane__stim_offset = 0; // ms
        const double var_chaste_interface__membrane__stim_period = 1000.0; // ms
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__stim_amplitude_converted),
                var_chaste_interface__membrane__stim_duration,
                var_chaste_interface__membrane__stim_period,
                var_chaste_interface__membrane__stim_offset
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }

    double Celldecker_2009FromCellMLCvode::GetIntracellularCalciumConcentration()
    {
        return NV_Ith_S(mStateVariables, 1);
    }
    
    Celldecker_2009FromCellMLCvode::Celldecker_2009FromCellMLCvode(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                46,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Celldecker_2009FromCellMLCvode>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        mUseAnalyticJacobian = true;
        mHasAnalyticJacobian = true;
        
        NV_Ith_S(this->mParameters, 0) = 0.0043750000000000004; // (var_Ileak__Ileak_max) [mM_per_ms]
        NV_Ith_S(this->mParameters, 1) = 0.1125; // (var_Irel__kappa) [mM_per_uA_per_uF_per_ms_per_ms]
        NV_Ith_S(this->mParameters, 2) = 0.0043750000000000004; // (var_Iup__iupbar) [mM_per_ms]
        NV_Ith_S(this->mParameters, 3) = 1.8; // (var_model_parameters__Ca_o) [mM]
        NV_Ith_S(this->mParameters, 4) = 5.4000000000000004; // (var_model_parameters__K_o) [mM]
        NV_Ith_S(this->mParameters, 5) = 140.0; // (var_model_parameters__Na_o) [mM]
        NV_Ith_S(this->mParameters, 6) = 0.00015552; // (var_ICaL__PCa) [L_per_F_ms]
        NV_Ith_S(this->mParameters, 7) = 1.9950799999999999e-7; // (var_ICab__PCab) [L_per_F_ms]
        NV_Ith_S(this->mParameters, 8) = 0.00022499999999999999; // (var_IClb__gClb) [mS_per_uF]
        NV_Ith_S(this->mParameters, 9) = 3.2000000000000001e-9; // (var_INab__PNab) [L_per_F_ms]
        NV_Ith_S(this->mParameters, 10) = 0.057500000000000002; // (var_IpCa__gpCa) [uA_per_uF]
        NV_Ith_S(this->mParameters, 11) = 9.0749999999999993; // (var_INa__g_Na) [mS_per_uF]
        NV_Ith_S(this->mParameters, 12) = 0.5; // (var_IK1__g_K1_max) [mS_per_uF]
        NV_Ith_S(this->mParameters, 13) = 0.0064999999999999997; // (var_INaL__gNaL) [mS_per_uF]
        NV_Ith_S(this->mParameters, 14) = 0.0027599999999999999; // (var_IKp__gKp) [mS_per_uF]
        NV_Ith_S(this->mParameters, 15) = 0.013854200000000001; // (var_IKr__gKr_max) [mS_per_uF]
        NV_Ith_S(this->mParameters, 16) = 0.082600000000000007; // (var_IKs__gKs_max) [mS_per_uF]
        NV_Ith_S(this->mParameters, 17) = 4.5; // (var_INaCa__Vmax) [uA_per_uF]
        NV_Ith_S(this->mParameters, 18) = 1.3999999999999999; // (var_INaK__ibarnak) [uA_per_uF]
        NV_Ith_S(this->mParameters, 19) = 8.9999999999999996e-7; // (var_Ito2__PCl) [L_per_F_ms]
        NV_Ith_S(this->mParameters, 20) = 0.49745800000000001; // (var_Ito1__gto1) [mS_per_uF]
    }

    Celldecker_2009FromCellMLCvode::~Celldecker_2009FromCellMLCvode()
    {
    }

    
    double Celldecker_2009FromCellMLCvode::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__Ca__Ca_i = NV_Ith_S(rY, 1);
        // Units: mM; Initial value: 8.38749860095482e-05
        double var_chaste_interface__IKs__C1 = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.476679784307081
        double var_chaste_interface__IKs__C2 = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.255181042718489
        double var_chaste_interface__IKs__C3 = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.0512272866698557
        double var_chaste_interface__IKs__C4 = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.0045705849736195
        double var_chaste_interface__IKs__C5 = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.000152923243503507
        double var_chaste_interface__IKs__C6 = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.132814156809568
        double var_chaste_interface__IKs__C7 = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.053324572164618
        double var_chaste_interface__IKs__C8 = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.00713656414955778
        double var_chaste_interface__IKs__C9 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.000318368292970148
        double var_chaste_interface__IKs__C10 = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.0138769647384953
        double var_chaste_interface__IKs__C11 = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.00371438476499172
        double var_chaste_interface__IKs__C12 = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.000248553788631871
        double var_chaste_interface__IKs__C13 = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 0.000644426171899078
        double var_chaste_interface__IKs__C14 = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 8.62495047666861e-05
        double var_chaste_interface__IKs__C15 = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 1.12344645485893e-05
        double var_chaste_interface__IKs__O1 = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 1.05292905767805e-05
        double var_chaste_interface__ICaL__O = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 2.26882961412491e-05
        double var_chaste_interface__ICaL__O_star = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 1.23556404128518e-10
        double var_chaste_interface__INa_m_gate__m = NV_Ith_S(rY, 25);
        // Units: dimensionless; Initial value: 0.00101841101248412
        double var_chaste_interface__INa_h_gate__h = NV_Ith_S(rY, 26);
        // Units: dimensionless; Initial value: 0.991354143386887
        double var_chaste_interface__INa_j_gate__j = NV_Ith_S(rY, 27);
        // Units: dimensionless; Initial value: 0.99709036251243
        double var_chaste_interface__INaL_mL_gate__mL = NV_Ith_S(rY, 28);
        // Units: dimensionless; Initial value: 0.00101841101248412
        double var_chaste_interface__INaL_hL_gate__hL = NV_Ith_S(rY, 29);
        // Units: dimensionless; Initial value: 0.319611809402137
        double var_chaste_interface__IKr_xr_gate__xr = NV_Ith_S(rY, 30);
        // Units: dimensionless; Initial value: 4.06959064407486e-06
        double var_chaste_interface__Ito1_a_gate__a = NV_Ith_S(rY, 31);
        // Units: dimensionless; Initial value: 1.76776038804228e-05
        double var_chaste_interface__Ito1_i1f_gate__i1f = NV_Ith_S(rY, 32);
        // Units: dimensionless; Initial value: 0.997976503910799
        double var_chaste_interface__Ito1_i1s_gate__i1s = NV_Ith_S(rY, 33);
        // Units: dimensionless; Initial value: 0.947581184798815
        double var_chaste_interface__Ito2_i2f_gate__i2f = NV_Ith_S(rY, 34);
        // Units: dimensionless; Initial value: 0.996044894628276
        double var_chaste_interface__Irel__Irel = NV_Ith_S(rY, 35);
        // Units: mM_per_ms; Initial value: 0.000714227102027745
        double var_chaste_interface__Ca__Ca_ss_sr = NV_Ith_S(rY, 38);
        // Units: mM; Initial value: 0.00011296707102434
        double var_chaste_interface__Ca__Ca_ss_CaL = NV_Ith_S(rY, 39);
        // Units: mM; Initial value: 0.000119239795531548
        double var_chaste_interface__Na__Na_i = NV_Ith_S(rY, 40);
        // Units: mM; Initial value: 8.01031392415197
        double var_chaste_interface__Na__Na_ss_sr = NV_Ith_S(rY, 41);
        // Units: mM; Initial value: 8.01033434859049
        double var_chaste_interface__Cl__Cl_i = NV_Ith_S(rY, 42);
        // Units: mM; Initial value: 20.6683603724432
        double var_chaste_interface__K__K_i = NV_Ith_S(rY, 44);
        // Units: mM; Initial value: 144.907134343314
        
        const double var_ICaL__gamma_Cai = 1.0; // dimensionless
        const double var_ICaL__gamma_Cao = 0.34100000000000003; // dimensionless
        const double var_ICaL__v0 = 0; // mV
        const double var_ICab__gamma_Ca_i = 1.0; // dimensionless
        const double var_ICab__gamma_Ca_o = 0.34100000000000003; // dimensionless
        const double var_ICab__v0 = 0; // mV
        const double var_IKs__O2 = 1.0 - var_chaste_interface__IKs__C1 - var_chaste_interface__IKs__C10 - var_chaste_interface__IKs__C11 - var_chaste_interface__IKs__C12 - var_chaste_interface__IKs__C13 - var_chaste_interface__IKs__C14 - var_chaste_interface__IKs__C15 - var_chaste_interface__IKs__C2 - var_chaste_interface__IKs__C3 - var_chaste_interface__IKs__C4 - var_chaste_interface__IKs__C5 - var_chaste_interface__IKs__C6 - var_chaste_interface__IKs__C7 - var_chaste_interface__IKs__C8 - var_chaste_interface__IKs__C9 - var_chaste_interface__IKs__O1; // dimensionless
        const double var_IKs__OKs = var_chaste_interface__IKs__O1 + var_IKs__O2; // dimensionless
        const double var_IKs__gKs = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca__Ca_i), 1.3999999999999999))) * NV_Ith_S(mParameters, 16); // mS_per_uF
        const double var_INaCa__KmCa_act = 0.000125; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__denom_1 = 1.0 + pow(var_INaCa__KmCa_act, 2) / pow(var_chaste_interface__Ca__Ca_i, 2); // dimensionless
        const double var_INaCa__denom_ss_1 = 1.0 + pow(var_INaCa__KmCa_act, 2) / pow(var_chaste_interface__Ca__Ca_ss_sr, 2); // dimensionless
        const double var_INaCa__eta = 0.27000000000000002; // dimensionless
        const double var_INaCa__ksat = 0.32000000000000001; // dimensionless
        const double var_INaK__V_half = -92.0; // mV
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__kmnai = 2.6000000000000001; // mM
        const double var_INaK__sigma = 1.0; // dimensionless
        const double var_INab__B = 1.0; // dimensionless
        const double var_INab__v0 = 0; // dimensionless
        const double var_IpCa__KmpCa = 0.00050000000000000001; // mM
        const double var_IpCa__IpCa = var_chaste_interface__Ca__Ca_i * NV_Ith_S(mParameters, 10) / (var_chaste_interface__Ca__Ca_i + var_IpCa__KmpCa); // uA_per_uF
        const double var_Ito2__Ito2_max_scaling_factor = 1.0; // dimensionless
        const double var_Ito2__kCa_ito2 = 0.40000000000000002; // mM_per_ms
        const double var_Ito2__KCa_ito2 = 1.0 - 1 / (1.0 + pow(var_chaste_interface__Irel__Irel, 2) / pow(var_Ito2__kCa_ito2, 2)); // dimensionless
        const double var_Ito2__v0 = 0; // mV
        const double var_Ito2__zCl = -1.0; // dimensionless
        const double var_INaK__PNa = pow(var_chaste_interface__Na__Na_i, 3) / pow((var_INaK__kmnai + var_chaste_interface__Na__Na_i), 3); // dimensionless
        const double var_IKp__Kp = 1 / (1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_IKr_r_gate__r = 1 / (1.0 + exp(0.64935064935064934 + 0.064935064935064929 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_Ito1__rto1 = exp(0.0018181818181818182 * var_chaste_interface__membrane__Vm); // dimensionless
        const double var_membrane__i_Stim = 0.0; // uA_per_uF
        const double var_INaCa__denom_3 = pow(var_INaCa__KmNao, 3) * var_chaste_interface__Ca__Ca_i + pow(var_chaste_interface__Na__Na_i, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_chaste_interface__Ca__Ca_i / var_INaCa__KmCai) * NV_Ith_S(mParameters, 3); // mM4
        const double var_INaCa__denom_ss_3 = pow(var_INaCa__KmNao, 3) * var_chaste_interface__Ca__Ca_ss_sr + pow(var_chaste_interface__Na__Na_ss_sr, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_chaste_interface__Ca__Ca_ss_sr / var_INaCa__KmCai) * NV_Ith_S(mParameters, 3); // mM4
        const double var_model_parameters__Cl_o = 100.0; // mM
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_IK1__gK1 = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 4)) * NV_Ith_S(mParameters, 12); // mS_per_uF
        const double var_IKr__gKr = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 4)) * NV_Ith_S(mParameters, 15); // mS_per_uF
        const double var_INaK__PK = NV_Ith_S(mParameters, 4) / (var_INaK__kmko + NV_Ith_S(mParameters, 4)); // dimensionless
        const double var_INaCa__denom_4 = pow(var_chaste_interface__Na__Na_i, 3) * NV_Ith_S(mParameters, 3) + pow(NV_Ith_S(mParameters, 5), 3) * var_chaste_interface__Ca__Ca_i + pow(NV_Ith_S(mParameters, 5), 3) * (1.0 + pow(var_chaste_interface__Na__Na_i, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_INaCa__denom_ss_4 = pow(var_chaste_interface__Na__Na_ss_sr, 3) * NV_Ith_S(mParameters, 3) + pow(NV_Ith_S(mParameters, 5), 3) * var_chaste_interface__Ca__Ca_ss_sr + pow(NV_Ith_S(mParameters, 5), 3) * (1.0 + pow(var_chaste_interface__Na__Na_ss_sr, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_ICaL__B = 2.0 * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T); // per_mV
        const double var_ICaL__A = 4.0 * pow(var_model_parameters__F, 2) * (-var_ICaL__gamma_Cao * NV_Ith_S(mParameters, 3) + var_chaste_interface__Ca__Ca_ss_CaL * var_ICaL__gamma_Cai * exp(2.0 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * NV_Ith_S(mParameters, 6) / (var_ICaL__B * var_model_parameters__R * var_model_parameters__T); // uA_per_uF
        const double var_ICaL__U = (-var_ICaL__v0 + var_chaste_interface__membrane__Vm) * var_ICaL__B; // dimensionless
        const double var_ICaL__ICaL_max = (((var_ICaL__U >= -9.9999999999999995e-8) && (var_ICaL__U <= 9.9999999999999995e-8)) ? ((1.0 - 0.5 * var_ICaL__U) * var_ICaL__A) : (var_ICaL__A * var_ICaL__U / (-1.0 + exp(var_ICaL__U)))); // uA_per_uF
        const double var_ICaL__ICaL = (var_chaste_interface__ICaL__O + var_chaste_interface__ICaL__O_star) * var_ICaL__ICaL_max; // uA_per_uF
        const double var_ICab__B = 2.0 * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T); // per_mV
        const double var_ICab__A = 4.0 * pow(var_model_parameters__F, 2) * (-var_ICab__gamma_Ca_o * NV_Ith_S(mParameters, 3) + var_chaste_interface__Ca__Ca_i * var_ICab__gamma_Ca_i * exp(2.0 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * NV_Ith_S(mParameters, 7) / (var_ICab__B * var_model_parameters__R * var_model_parameters__T); // uA_per_uF
        const double var_ICab__U = (-var_ICab__v0 + var_chaste_interface__membrane__Vm) * var_ICab__B; // dimensionless
        const double var_ICab__ICab = (((var_ICab__U >= -9.9999999999999995e-8) && (var_ICab__U <= 9.9999999999999995e-8)) ? ((1.0 - 0.5 * var_ICab__U) * var_ICab__A) : (var_ICab__A * var_ICab__U / (-1.0 + exp(var_ICab__U)))); // uA_per_uF
        const double var_INaCa__denom_2 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // dimensionless
        const double var_INaCa__denom_ss_2 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // dimensionless
        const double var_INaCa__num_ss = 0.20000000000000001 * (pow(var_chaste_interface__Na__Na_ss_sr, 3) * NV_Ith_S(mParameters, 3) * exp(var_INaCa__eta * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) - pow(NV_Ith_S(mParameters, 5), 3) * var_chaste_interface__Ca__Ca_ss_sr * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * NV_Ith_S(mParameters, 17); // mM4_uA_per_uF
        const double var_INaCa__INaCa_ss_sr = var_INaCa__num_ss / ((var_INaCa__denom_ss_3 + var_INaCa__denom_ss_4) * var_INaCa__denom_ss_1 * var_INaCa__denom_ss_2); // uA_per_uF
        const double var_INaCa__numerator = 0.80000000000000004 * (pow(var_chaste_interface__Na__Na_i, 3) * NV_Ith_S(mParameters, 3) * exp(var_INaCa__eta * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) - pow(NV_Ith_S(mParameters, 5), 3) * var_chaste_interface__Ca__Ca_i * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * NV_Ith_S(mParameters, 17); // mM4_uA_per_uF
        const double var_INaCa__INaCa_cai = var_INaCa__numerator / ((var_INaCa__denom_3 + var_INaCa__denom_4) * var_INaCa__denom_1 * var_INaCa__denom_2); // uA_per_uF
        const double var_INaCa__INaCa = var_INaCa__INaCa_cai + var_INaCa__INaCa_ss_sr; // uA_per_uF
        const double var_INaK__phi = (-var_INaK__V_half + var_chaste_interface__membrane__Vm) * var_INaK__sigma * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T); // dimensionless
        const double var_INaK__fv = 1 / (1.0 + exp(-var_INaK__phi)); // dimensionless
        const double var_INaK__INaK = var_INaK__PK * var_INaK__PNa * var_INaK__fv * NV_Ith_S(mParameters, 18); // uA_per_uF
        const double var_INab__phi = var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T); // dimensionless
        const double var_INab__A = (-NV_Ith_S(mParameters, 5) + var_chaste_interface__Na__Na_i * exp(var_INab__phi)) * NV_Ith_S(mParameters, 9) * var_model_parameters__F / var_INab__B; // uA_per_uF
        const double var_INab__U = (-var_INab__v0 + var_INab__phi) * var_INab__B; // dimensionless
        const double var_INab__INab = (((var_INab__U >= -9.9999999999999995e-8) && (var_INab__U <= 9.9999999999999995e-8)) ? ((1.0 - 0.5 * var_INab__U) * var_INab__A) : (var_INab__A * var_INab__U / (-1.0 + exp(var_INab__U)))); // uA_per_uF
        const double var_Ito2__B = var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T); // per_mV
        const double var_Ito2__A = -pow(var_Ito2__zCl, 2) * pow(var_model_parameters__F, 2) * (-var_model_parameters__Cl_o * exp(var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) + var_chaste_interface__Cl__Cl_i) * NV_Ith_S(mParameters, 19) / (var_Ito2__B * var_model_parameters__R * var_model_parameters__T); // uA_per_uF
        const double var_Ito2__U = (-var_Ito2__v0 + var_chaste_interface__membrane__Vm) * var_Ito2__B; // dimensionless
        const double var_Ito2__Ito2_max = (((var_Ito2__U >= -9.9999999999999995e-8) && (var_Ito2__U <= 9.9999999999999995e-8)) ? ((1.0 - 0.5 * var_Ito2__U) * var_Ito2__A) : (var_Ito2__A * var_Ito2__U / (-1.0 + exp(var_Ito2__U)))); // uA_per_uF
        const double var_Ito2__Ito2 = var_Ito2__Ito2_max * var_Ito2__Ito2_max_scaling_factor * var_Ito2__KCa_ito2 * var_chaste_interface__Ito2_i2f_gate__i2f; // uA_per_uF
        const double var_membrane__caiont = -2.0 * var_INaCa__INaCa - 2.0 * var_INaCa__INaCa_ss_sr + var_ICaL__ICaL + var_ICab__ICab + var_IpCa__IpCa; // uA_per_uF
        const double var_reversal_potentials__ECl = -var_model_parameters__R * var_model_parameters__T * log(var_model_parameters__Cl_o / var_chaste_interface__Cl__Cl_i) / var_model_parameters__F; // mV
        const double var_IClb__IClb = (-var_reversal_potentials__ECl + var_chaste_interface__membrane__Vm) * NV_Ith_S(mParameters, 8); // uA_per_uF
        const double var_membrane__clont = var_IClb__IClb + var_Ito2__Ito2; // uA_per_uF
        const double var_reversal_potentials__EK = var_model_parameters__R * var_model_parameters__T * log(NV_Ith_S(mParameters, 4) / var_chaste_interface__K__K_i) / var_model_parameters__F; // mV
        const double var_IK1_K1_gate__alpha_k1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__Vm - 0.23849999999999999 * var_reversal_potentials__EK)); // dimensionless
        const double var_IK1_K1_gate__beta_k1 = (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__Vm - 0.080320000000000003 * var_reversal_potentials__EK) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__Vm - 0.061749999999999999 * var_reversal_potentials__EK)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__EK - 0.51429999999999998 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_IK1_K1_gate__K1 = var_IK1_K1_gate__alpha_k1 / (var_IK1_K1_gate__alpha_k1 + var_IK1_K1_gate__beta_k1); // dimensionless
        const double var_IK1__IK1 = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IK1__gK1 * var_IK1_K1_gate__K1; // uA_per_uF
        const double var_IKp__IKp = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IKp__Kp * NV_Ith_S(mParameters, 14); // uA_per_uF
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IKr__gKr * var_IKr_r_gate__r * var_chaste_interface__IKr_xr_gate__xr; // uA_per_uF
        const double var_Ito1__Ito1 = pow(var_chaste_interface__Ito1_a_gate__a, 3) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * NV_Ith_S(mParameters, 20) * var_Ito1__rto1 * var_chaste_interface__Ito1_i1f_gate__i1f * var_chaste_interface__Ito1_i1s_gate__i1s; // uA_per_uF
        const double var_reversal_potentials__ENa = var_model_parameters__R * var_model_parameters__T * log(NV_Ith_S(mParameters, 5) / var_chaste_interface__Na__Na_i) / var_model_parameters__F; // mV
        const double var_INa__INa = pow(var_chaste_interface__INa_m_gate__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__Vm) * NV_Ith_S(mParameters, 11) * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j; // uA_per_uF
        const double var_INaL__INaL = pow(var_chaste_interface__INaL_mL_gate__mL, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__Vm) * NV_Ith_S(mParameters, 13) * var_chaste_interface__INaL_hL_gate__hL; // uA_per_uF
        const double var_membrane__naiont = 3.0 * var_INaCa__INaCa + 3.0 * var_INaCa__INaCa_ss_sr + 3.0 * var_INaK__INaK + var_INa__INa + var_INaL__INaL + var_INab__INab; // uA_per_uF
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = var_model_parameters__R * var_model_parameters__T * log((NV_Ith_S(mParameters, 5) * var_reversal_potentials__prnak + NV_Ith_S(mParameters, 4)) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__prnak + var_chaste_interface__K__K_i)) / var_model_parameters__F; // mV
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__membrane__Vm) * var_IKs__OKs * var_IKs__gKs; // uA_per_uF
        const double var_membrane__kiont = -2.0 * var_INaK__INaK + var_IK1__IK1 + var_IKp__IKp + var_IKr__IKr + var_IKs__IKs + var_Ito1__Ito1 + var_membrane__i_Stim; // uA_per_uF
        const double var_chaste_interface__i_ionic = (var_membrane__caiont + var_membrane__clont + var_membrane__kiont + var_membrane__naiont) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Celldecker_2009FromCellMLCvode::EvaluateYDerivatives(double var_chaste_interface__environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__Ca__Ca_i = NV_Ith_S(rY, 1);
        // Units: mM; Initial value: 8.38749860095482e-05
        double var_chaste_interface__IKs__C1 = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.476679784307081
        double var_chaste_interface__IKs__C2 = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.255181042718489
        double var_chaste_interface__IKs__C3 = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.0512272866698557
        double var_chaste_interface__IKs__C4 = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.0045705849736195
        double var_chaste_interface__IKs__C5 = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.000152923243503507
        double var_chaste_interface__IKs__C6 = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.132814156809568
        double var_chaste_interface__IKs__C7 = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.053324572164618
        double var_chaste_interface__IKs__C8 = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.00713656414955778
        double var_chaste_interface__IKs__C9 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.000318368292970148
        double var_chaste_interface__IKs__C10 = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.0138769647384953
        double var_chaste_interface__IKs__C11 = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.00371438476499172
        double var_chaste_interface__IKs__C12 = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.000248553788631871
        double var_chaste_interface__IKs__C13 = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 0.000644426171899078
        double var_chaste_interface__IKs__C14 = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 8.62495047666861e-05
        double var_chaste_interface__IKs__C15 = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 1.12344645485893e-05
        double var_chaste_interface__IKs__O1 = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 1.05292905767805e-05
        double var_chaste_interface__ICaL__C = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 0.99996982093287
        double var_chaste_interface__ICaL__O = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 2.26882961412491e-05
        double var_chaste_interface__ICaL__C_star = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 7.49117189549873e-06
        double var_chaste_interface__ICaL__O_star = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 1.23556404128518e-10
        double var_chaste_interface__ICaL__CI = NV_Ith_S(rY, 22);
        // Units: dimensionless; Initial value: 5.89853003114132e-11
        double var_chaste_interface__ICaL__OI = NV_Ith_S(rY, 23);
        // Units: dimensionless; Initial value: 8.01952813127322e-17
        double var_chaste_interface__ICaL__CI_star = NV_Ith_S(rY, 24);
        // Units: dimensionless; Initial value: 1.9237001017021e-09
        double var_chaste_interface__INa_m_gate__m = NV_Ith_S(rY, 25);
        // Units: dimensionless; Initial value: 0.00101841101248412
        double var_chaste_interface__INa_h_gate__h = NV_Ith_S(rY, 26);
        // Units: dimensionless; Initial value: 0.991354143386887
        double var_chaste_interface__INa_j_gate__j = NV_Ith_S(rY, 27);
        // Units: dimensionless; Initial value: 0.99709036251243
        double var_chaste_interface__INaL_mL_gate__mL = NV_Ith_S(rY, 28);
        // Units: dimensionless; Initial value: 0.00101841101248412
        double var_chaste_interface__INaL_hL_gate__hL = NV_Ith_S(rY, 29);
        // Units: dimensionless; Initial value: 0.319611809402137
        double var_chaste_interface__IKr_xr_gate__xr = NV_Ith_S(rY, 30);
        // Units: dimensionless; Initial value: 4.06959064407486e-06
        double var_chaste_interface__Ito1_a_gate__a = NV_Ith_S(rY, 31);
        // Units: dimensionless; Initial value: 1.76776038804228e-05
        double var_chaste_interface__Ito1_i1f_gate__i1f = NV_Ith_S(rY, 32);
        // Units: dimensionless; Initial value: 0.997976503910799
        double var_chaste_interface__Ito1_i1s_gate__i1s = NV_Ith_S(rY, 33);
        // Units: dimensionless; Initial value: 0.947581184798815
        double var_chaste_interface__Ito2_i2f_gate__i2f = NV_Ith_S(rY, 34);
        // Units: dimensionless; Initial value: 0.996044894628276
        double var_chaste_interface__Irel__Irel = NV_Ith_S(rY, 35);
        // Units: mM_per_ms; Initial value: 0.000714227102027745
        double var_chaste_interface__Ca__Ca_JSR = NV_Ith_S(rY, 36);
        // Units: mM; Initial value: 0.993914988616979
        double var_chaste_interface__Ca__Ca_NSR = NV_Ith_S(rY, 37);
        // Units: mM; Initial value: 1.01475649943057
        double var_chaste_interface__Ca__Ca_ss_sr = NV_Ith_S(rY, 38);
        // Units: mM; Initial value: 0.00011296707102434
        double var_chaste_interface__Ca__Ca_ss_CaL = NV_Ith_S(rY, 39);
        // Units: mM; Initial value: 0.000119239795531548
        double var_chaste_interface__Na__Na_i = NV_Ith_S(rY, 40);
        // Units: mM; Initial value: 8.01031392415197
        double var_chaste_interface__Na__Na_ss_sr = NV_Ith_S(rY, 41);
        // Units: mM; Initial value: 8.01033434859049
        double var_chaste_interface__Cl__Cl_i = NV_Ith_S(rY, 42);
        // Units: mM; Initial value: 20.6683603724432
        double var_chaste_interface__Cl__Cl_ss = NV_Ith_S(rY, 43);
        // Units: mM; Initial value: 20.6683605553303
        double var_chaste_interface__K__K_i = NV_Ith_S(rY, 44);
        // Units: mM; Initial value: 144.907134343314
        double var_chaste_interface__CaMK_active__CaMK_trap = NV_Ith_S(rY, 45);
        // Units: dimensionless; Initial value: 0.0114911034744777

        // Mathematics
        double d_dt_chaste_interface_var_membrane__Vm;
        const double var_CT_K_Cl__CT_K_Cl_max = 1.77e-5; // mM_per_ms
        const double var_CT_Na_Cl__CT_Na_Cl_max = 2.4610800000000002e-5; // mM_per_ms
        const double var_Ca__BSLmax = 1.1240000000000001; // mM
        const double var_Ca__BSRmax = 0.047; // mM
        const double var_Ca__KmBSL = 0.0086999999999999994; // mM
        const double var_Ca__KmBSR = 0.00087000000000000001; // mM
        const double var_Ca__bss_cal = 1 / (1.0 + var_Ca__BSLmax * var_Ca__KmBSL / pow((var_chaste_interface__Ca__Ca_ss_CaL + var_Ca__KmBSL), 2) + var_Ca__BSRmax * var_Ca__KmBSR / pow((var_chaste_interface__Ca__Ca_ss_CaL + var_Ca__KmBSR), 2)); // dimensionless
        const double var_Ca__bss_sr = 1 / (1.0 + var_Ca__BSLmax * var_Ca__KmBSL / pow((var_chaste_interface__Ca__Ca_ss_sr + var_Ca__KmBSL), 2) + var_Ca__BSRmax * var_Ca__KmBSR / pow((var_chaste_interface__Ca__Ca_ss_sr + var_Ca__KmBSR), 2)); // dimensionless
        const double var_Ca__cmdn_bar = 0.050000000000000003; // mM
        const double var_Ca__csqnbar = 10.0; // mM
        const double var_Ca__km_cmdn = 0.0023800000000000002; // mM
        const double var_Ca__km_trpn = 0.00050000000000000001; // mM
        const double var_Ca__kmcsqn = 0.80000000000000004; // mM
        const double var_Ca__bcsqn = 1 / (1.0 + var_Ca__csqnbar * var_Ca__kmcsqn / pow((var_chaste_interface__Ca__Ca_JSR + var_Ca__kmcsqn), 2)); // dimensionless
        const double var_Ca__tau_diff = 0.20000000000000001; // ms
        const double var_Ca__Idiff = (-var_chaste_interface__Ca__Ca_i + var_chaste_interface__Ca__Ca_ss_sr) / var_Ca__tau_diff; // mM_per_ms
        const double var_Ca__tau_diff_ss = 2.0; // ms
        const double var_Ca__Idiff_ss = (-var_chaste_interface__Ca__Ca_ss_CaL + var_chaste_interface__Ca__Ca_ss_sr) / var_Ca__tau_diff_ss; // mM_per_ms
        const double var_Ca__trpn_bar = 0.070000000000000007; // mM
        const double var_Ca__bmyo = 1 / (1.0 + var_Ca__cmdn_bar * var_Ca__km_cmdn / pow((var_chaste_interface__Ca__Ca_i + var_Ca__km_cmdn), 2) + var_Ca__km_trpn * var_Ca__trpn_bar / pow((var_chaste_interface__Ca__Ca_i + var_Ca__km_trpn), 2)); // dimensionless
        const double var_CaMK_active__CaMK_0 = 0.050000000000000003; // dimensionless
        const double var_CaMK_active__Km = 0.0015; // mM
        const double var_CaMK_active__CaMK_active = (1.0 - var_chaste_interface__CaMK_active__CaMK_trap) * var_CaMK_active__CaMK_0 / (1.0 + var_CaMK_active__Km / var_chaste_interface__Ca__Ca_ss_sr) + var_chaste_interface__CaMK_active__CaMK_trap; // dimensionless
        const double var_CaMK_active__alpha_CaMK = 0.050000000000000003; // per_ms
        const double var_CaMK_active__beta_CaMK = 0.00068000000000000005; // per_ms
        const double var_Cl__Idiff_Cl = (-var_chaste_interface__Cl__Cl_i + var_chaste_interface__Cl__Cl_ss) / var_Ca__tau_diff; // mM_per_ms
        const double d_dt_chaste_interface_var_CaMK_active__CaMK_trap = -var_chaste_interface__CaMK_active__CaMK_trap * var_CaMK_active__beta_CaMK + (-var_chaste_interface__CaMK_active__CaMK_trap + var_CaMK_active__CaMK_active) * var_CaMK_active__CaMK_active * var_CaMK_active__alpha_CaMK; // 1 / ms
        const double var_ICaL__IV_beta_infinity_star = 25.0 - 17.5 / (1.0 + 8.1000000000000005e-11 / pow(var_chaste_interface__Ca__Ca_ss_CaL, 4)); // dimensionless
        const double var_ICaL__OI_star = 1.0 - var_chaste_interface__ICaL__C - var_chaste_interface__ICaL__CI - var_chaste_interface__ICaL__CI_star - var_chaste_interface__ICaL__C_star - var_chaste_interface__ICaL__O - var_chaste_interface__ICaL__OI - var_chaste_interface__ICaL__O_star; // dimensionless
        const double var_ICaL__delta = 3.0 / (1.0 + 8.1000000000000005e-11 / pow(var_chaste_interface__Ca__Ca_ss_CaL, 4)); // per_ms
        const double var_ICaL__gamma_Cai = 1.0; // dimensionless
        const double var_ICaL__gamma_Cao = 0.34100000000000003; // dimensionless
        const double var_ICaL__theta = 1.0; // per_ms
        const double var_ICaL__theta_I = 9.9999999999999995e-7; // per_ms
        const double var_ICaL__v0 = 0; // mV
        const double var_ICab__gamma_Ca_i = 1.0; // dimensionless
        const double var_ICab__gamma_Ca_o = 0.34100000000000003; // dimensionless
        const double var_ICab__v0 = 0; // mV
        const double var_IKr_xr_gate__B_1 = -0.13600000000000001; // per_mV
        const double var_IKr_xr_gate__A_1 = -0.00059999999999999995 / var_IKr_xr_gate__B_1; // dimensionless
        const double var_IKr_xr_gate__B_2 = 0.1522; // per_mV
        const double var_IKr_xr_gate__A_2 = 0.00029999999999999997 / var_IKr_xr_gate__B_2; // dimensionless
        const double var_IKr_xr_gate__v0_1 = 1.7383999999999999; // mV
        const double var_IKr_xr_gate__v0_2 = -38.360799999999998; // mV
        const double var_IKs__O2 = 1.0 - var_chaste_interface__IKs__C1 - var_chaste_interface__IKs__C10 - var_chaste_interface__IKs__C11 - var_chaste_interface__IKs__C12 - var_chaste_interface__IKs__C13 - var_chaste_interface__IKs__C14 - var_chaste_interface__IKs__C15 - var_chaste_interface__IKs__C2 - var_chaste_interface__IKs__C3 - var_chaste_interface__IKs__C4 - var_chaste_interface__IKs__C5 - var_chaste_interface__IKs__C6 - var_chaste_interface__IKs__C7 - var_chaste_interface__IKs__C8 - var_chaste_interface__IKs__C9 - var_chaste_interface__IKs__O1; // dimensionless
        const double var_IKs__OKs = var_chaste_interface__IKs__O1 + var_IKs__O2; // dimensionless
        const double var_IKs__gKs = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca__Ca_i), 1.3999999999999999))) * NV_Ith_S(mParameters, 16); // mS_per_uF
        const double var_IKs__theta = 0.089538306411019994; // per_ms
        const double var_INaCa__KmCa_act = 0.000125; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__denom_1 = 1.0 + pow(var_INaCa__KmCa_act, 2) / pow(var_chaste_interface__Ca__Ca_i, 2); // dimensionless
        const double var_INaCa__denom_ss_1 = 1.0 + pow(var_INaCa__KmCa_act, 2) / pow(var_chaste_interface__Ca__Ca_ss_sr, 2); // dimensionless
        const double var_INaCa__eta = 0.27000000000000002; // dimensionless
        const double var_INaCa__ksat = 0.32000000000000001; // dimensionless
        const double var_INaK__V_half = -92.0; // mV
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__kmnai = 2.6000000000000001; // mM
        const double var_INaK__sigma = 1.0; // dimensionless
        const double var_INaL_hL_gate__tau_hL = 600.0; // ms
        const double var_INaL_mL_gate__B = -0.10000000000000001; // per_mV
        const double var_INaL_mL_gate__A = -0.32000000000000001 / var_INaL_mL_gate__B; // per_ms
        const double var_INaL_mL_gate__v0 = -47.130000000000003; // mV
        const double var_INa_m_gate__B = -0.10000000000000001; // per_mV
        const double var_INa_m_gate__A = -0.32000000000000001 / var_INa_m_gate__B; // per_ms
        const double var_INa_m_gate__v0 = -47.130000000000003; // mV
        const double var_INab__B = 1.0; // dimensionless
        const double var_INab__v0 = 0; // dimensionless
        const double var_Ileak__nsrbar = 15.0; // mM
        const double var_Ileak__Ileak = var_chaste_interface__Ca__Ca_NSR * NV_Ith_S(mParameters, 0) / var_Ileak__nsrbar; // mM_per_ms
        const double var_IpCa__KmpCa = 0.00050000000000000001; // mM
        const double var_IpCa__IpCa = var_chaste_interface__Ca__Ca_i * NV_Ith_S(mParameters, 10) / (var_chaste_interface__Ca__Ca_i + var_IpCa__KmpCa); // uA_per_uF
        const double var_Irel__K_beta = 0.28000000000000003; // mM
        const double var_Irel__Krel_infinity = 1.0; // mM
        const double var_Irel__Krel_tau = 0.0123; // mM
        const double var_Irel__beta_0 = 4.75; // ms
        const double var_Irel__delta_beta_0 = 1.0; // dimensionless
        const double var_Irel__h_beta = 10.0; // dimensionless
        const double var_Irel__delta_beta_CaMK = var_Irel__delta_beta_0 / (1.0 + pow((var_Irel__K_beta / var_CaMK_active__CaMK_active), var_Irel__h_beta)); // dimensionless
        const double var_Irel__beta_tau = (1.0 + var_Irel__delta_beta_CaMK) * var_Irel__beta_0; // ms
        const double var_Irel__h_rel = 8.0; // dimensionless
        const double var_Irel__alpha_rel = var_Irel__beta_tau * NV_Ith_S(mParameters, 1); // mM_per_uA_per_uF_per_ms
        const double var_Irel__tau_rel = var_Irel__beta_tau / (1.0 + var_Irel__Krel_tau / var_chaste_interface__Ca__Ca_JSR); // ms
        const double var_Ito2__Ito2_max_scaling_factor = 1.0; // dimensionless
        const double var_Ito2__kCa_ito2 = 0.40000000000000002; // mM_per_ms
        const double var_Ito2__KCa_ito2 = 1.0 - 1 / (1.0 + pow(var_chaste_interface__Irel__Irel, 2) / pow(var_Ito2__kCa_ito2, 2)); // dimensionless
        const double var_Ito2__v0 = 0; // mV
        const double var_Ito2__zCl = -1.0; // dimensionless
        const double var_Ito2_i2f_gate__tau_i2f = 8.0; // ms
        const double var_Itr__tautr = 25.0; // ms
        const double var_Itr__Itr = (-var_chaste_interface__Ca__Ca_JSR + var_chaste_interface__Ca__Ca_NSR) / var_Itr__tautr; // mM_per_ms
        const double d_dt_chaste_interface_var_Ca__Ca_JSR = (-var_chaste_interface__Irel__Irel + var_Itr__Itr) * var_Ca__bcsqn; // mM / ms
        const double var_Iup__delta_iupCaMK_bar = 0.75; // dimensionless
        const double var_Iup__delta_kmPLB_bar = 0.00017000000000000001; // mM
        const double var_Iup__kmCaMK = 0.14999999999999999; // mM
        const double var_Iup__delta_iupCaMK = var_CaMK_active__CaMK_active * var_Iup__delta_iupCaMK_bar / (var_CaMK_active__CaMK_active + var_Iup__kmCaMK); // dimensionless
        const double var_Iup__delta_kmPLB = var_CaMK_active__CaMK_active * var_Iup__delta_kmPLB_bar / (var_CaMK_active__CaMK_active + var_Iup__kmCaMK); // mM
        const double var_Iup__kmup = 0.00092000000000000003; // mM
        const double var_Iup__Iup = (1.0 + var_Iup__delta_iupCaMK) * var_chaste_interface__Ca__Ca_i * NV_Ith_S(mParameters, 2) / (-var_Iup__delta_kmPLB + var_chaste_interface__Ca__Ca_i + var_Iup__kmup); // mM_per_ms
        const double var_INaK__PNa = pow(var_chaste_interface__Na__Na_i, 3) / pow((var_INaK__kmnai + var_chaste_interface__Na__Na_i), 3); // dimensionless
        const double var_Na__Idiff_Na = (-var_chaste_interface__Na__Na_i + var_chaste_interface__Na__Na_ss_sr) / var_Ca__tau_diff; // mM_per_ms
        const double var_cell_geometry__a = 0.0011000000000000001; // cm
        const double var_cell_geometry__l = 0.01; // cm
        const double var_cell_geometry__ageo = 2.0 * M_PI * pow(var_cell_geometry__a, 2) + 2.0 * M_PI * var_cell_geometry__a * var_cell_geometry__l; // cm2
        const double var_cell_geometry__Acap = 2.0 * var_cell_geometry__ageo; // cm2
        const double var_cell_geometry__vcell = 1000.0 * M_PI * pow(var_cell_geometry__a, 2) * var_cell_geometry__l; // uL
        const double var_cell_geometry__Vjsr = 0.0047999999999999996 * var_cell_geometry__vcell; // uL
        const double var_cell_geometry__Vmyo = 0.67800000000000005 * var_cell_geometry__vcell; // uL
        const double var_cell_geometry__Vnsr = 0.055199999999999999 * var_cell_geometry__vcell; // uL
        const double d_dt_chaste_interface_var_Ca__Ca_NSR = -var_Ileak__Ileak - var_Itr__Itr * var_cell_geometry__Vjsr / var_cell_geometry__Vnsr + var_Iup__Iup; // mM / ms
        const double var_cell_geometry__Vss_CaL = 0.002 * var_cell_geometry__vcell; // uL
        const double var_cell_geometry__Vss_sr = 0.02 * var_cell_geometry__vcell; // uL
        const double var_ICaL__ACT_infinity = 1 / (1.0 + exp(1.4349206349206352 - 0.10582010582010583 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_ICaL__ACT_tau = 0.58999999999999997 + 0.80000000000000004 * exp(0.67599999999999993 + 0.051999999999999998 * var_chaste_interface__membrane__Vm) / (1.0 + exp(1.7160000000000002 + 0.13200000000000001 * var_chaste_interface__membrane__Vm)); // ms
        const double var_ICaL__IV_beta_star = 1 / ((1.0 + exp(-0.019709447580272044 - 0.092532617747756077 * var_chaste_interface__membrane__Vm)) * var_ICaL__IV_beta_infinity_star); // dimensionless
        const double var_ICaL__IV_infinity = 0.20000000000000001 + 0.80000000000000004 / (1.0 + exp(5.833333333333333 + 0.33333333333333331 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_ICaL__IV_infinity_star = 9.9990000999900015e-5 + 0.99990000999900008 / (1.0 + exp(5.833333333333333 + 0.33333333333333331 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_ICaL__IV_tau = 1 / (0.040277106492669565 / (1.0 + exp(4.7444197507005512 + 0.096627693496956227 * var_chaste_interface__membrane__Vm)) + 0.032730010146303147 / (1.0 + exp(-0.019709447580272044 - 0.092532617747756077 * var_chaste_interface__membrane__Vm))); // ms
        const double var_ICaL__IV_tau_star = 1 / (0.040277106492669565 / (1.0 + exp(4.7444197507005512 + 0.096627693496956227 * var_chaste_interface__membrane__Vm)) + var_ICaL__IV_beta_star); // ms
        const double var_ICaL__alpha = var_ICaL__ACT_infinity / var_ICaL__ACT_tau; // per_ms
        const double var_ICaL__beta = (1.0 - var_ICaL__ACT_infinity) / var_ICaL__ACT_tau; // per_ms
        const double var_ICaL__x = var_ICaL__IV_infinity / var_ICaL__IV_tau; // per_ms
        const double var_ICaL__x_star = var_ICaL__IV_infinity_star / var_ICaL__IV_tau_star; // per_ms
        const double var_ICaL__y = (1.0 - var_ICaL__IV_infinity) / var_ICaL__IV_tau; // per_ms
        const double d_dt_chaste_interface_var_ICaL__C = (-var_ICaL__alpha - var_ICaL__delta - var_ICaL__y) * var_chaste_interface__ICaL__C + var_chaste_interface__ICaL__CI * var_ICaL__x + var_chaste_interface__ICaL__C_star * var_ICaL__theta + var_chaste_interface__ICaL__O * var_ICaL__beta; // 1 / ms
        const double d_dt_chaste_interface_var_ICaL__O = (-var_ICaL__beta - var_ICaL__delta - var_ICaL__y) * var_chaste_interface__ICaL__O + var_chaste_interface__ICaL__C * var_ICaL__alpha + var_chaste_interface__ICaL__OI * var_ICaL__x + var_chaste_interface__ICaL__O_star * var_ICaL__theta; // 1 / ms
        const double var_ICaL__y_star = (1.0 - var_ICaL__IV_infinity_star) / var_ICaL__IV_tau_star; // per_ms
        const double d_dt_chaste_interface_var_ICaL__C_star = (-var_ICaL__alpha - var_ICaL__theta - var_ICaL__y_star) * var_chaste_interface__ICaL__C_star + var_chaste_interface__ICaL__C * var_ICaL__delta + var_chaste_interface__ICaL__CI_star * var_ICaL__x_star + var_chaste_interface__ICaL__O_star * var_ICaL__beta; // 1 / ms
        const double d_dt_chaste_interface_var_ICaL__O_star = (-var_ICaL__beta - var_ICaL__theta - var_ICaL__y_star) * var_chaste_interface__ICaL__O_star + var_chaste_interface__ICaL__C_star * var_ICaL__alpha + var_chaste_interface__ICaL__O * var_ICaL__delta + var_ICaL__OI_star * var_ICaL__x_star; // 1 / ms
        const double var_ICaL__delta_I = var_ICaL__delta * var_ICaL__theta_I * var_ICaL__x * var_ICaL__y_star / (var_ICaL__theta * var_ICaL__x_star * var_ICaL__y); // per_ms
        const double d_dt_chaste_interface_var_ICaL__CI = (-var_ICaL__alpha - var_ICaL__delta_I - var_ICaL__x) * var_chaste_interface__ICaL__CI + var_chaste_interface__ICaL__C * var_ICaL__y + var_chaste_interface__ICaL__CI_star * var_ICaL__theta_I + var_chaste_interface__ICaL__OI * var_ICaL__beta; // 1 / ms
        const double d_dt_chaste_interface_var_ICaL__CI_star = (-var_ICaL__alpha - var_ICaL__theta_I - var_ICaL__x_star) * var_chaste_interface__ICaL__CI_star + var_chaste_interface__ICaL__CI * var_ICaL__delta_I + var_chaste_interface__ICaL__C_star * var_ICaL__y_star + var_ICaL__OI_star * var_ICaL__beta; // 1 / ms
        const double d_dt_chaste_interface_var_ICaL__OI = (-var_ICaL__beta - var_ICaL__delta_I - var_ICaL__x) * var_chaste_interface__ICaL__OI + var_chaste_interface__ICaL__CI * var_ICaL__alpha + var_chaste_interface__ICaL__O * var_ICaL__y + var_ICaL__OI_star * var_ICaL__theta_I; // 1 / ms
        const double var_IKp__Kp = 1 / (1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_IKr_r_gate__r = 1 / (1.0 + exp(0.64935064935064934 + 0.064935064935064929 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_IKr_xr_gate__U_1 = (-var_IKr_xr_gate__v0_1 + var_chaste_interface__membrane__Vm) * var_IKr_xr_gate__B_1; // dimensionless
        const double var_IKr_xr_gate__U_2 = (-var_IKr_xr_gate__v0_2 + var_chaste_interface__membrane__Vm) * var_IKr_xr_gate__B_2; // dimensionless
        const double var_IKr_xr_gate__temp_part_1 = (((var_IKr_xr_gate__U_1 >= -9.9999999999999995e-8) && (var_IKr_xr_gate__U_1 <= 9.9999999999999995e-8)) ? ((1.0 - 0.5 * var_IKr_xr_gate__U_1) * var_IKr_xr_gate__A_1) : (var_IKr_xr_gate__A_1 * var_IKr_xr_gate__U_1 / (-1.0 + exp(var_IKr_xr_gate__U_1)))); // dimensionless
        const double var_IKr_xr_gate__temp_part_2 = (((var_IKr_xr_gate__U_2 >= -9.9999999999999995e-8) && (var_IKr_xr_gate__U_2 <= 9.9999999999999995e-8)) ? ((1.0 - 0.5 * var_IKr_xr_gate__U_2) * var_IKr_xr_gate__A_2) : (var_IKr_xr_gate__A_2 * var_IKr_xr_gate__U_2 / (-1.0 + exp(var_IKr_xr_gate__U_2)))); // dimensionless
        const double var_IKr_xr_gate__tau_xr = 1 / (var_IKr_xr_gate__temp_part_1 + var_IKr_xr_gate__temp_part_2); // ms
        const double var_IKr_xr_gate__xr_infinity = 1 / (1.0 + exp(-2.3729411764705883 - 0.23529411764705882 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double d_dt_chaste_interface_var_IKr_xr_gate__xr = (-var_chaste_interface__IKr_xr_gate__xr + var_IKr_xr_gate__xr_infinity) / var_IKr_xr_gate__tau_xr; // 1 / ms
        const double var_INaL_hL_gate__hL_infinity = 1 / (1.0 + exp(14.918032786885247 + 0.16393442622950821 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double d_dt_chaste_interface_var_INaL_hL_gate__hL = (-var_chaste_interface__INaL_hL_gate__hL + var_INaL_hL_gate__hL_infinity) / var_INaL_hL_gate__tau_hL; // 1 / ms
        const double var_INaL_mL_gate__U = (-var_INaL_mL_gate__v0 + var_chaste_interface__membrane__Vm) * var_INaL_mL_gate__B; // dimensionless
        const double var_INaL_mL_gate__amL = (((var_INaL_mL_gate__U >= -9.9999999999999995e-8) && (var_INaL_mL_gate__U <= 9.9999999999999995e-8)) ? ((1.0 - 0.5 * var_INaL_mL_gate__U) * var_INaL_mL_gate__A) : (var_INaL_mL_gate__A * var_INaL_mL_gate__U / (-1.0 + exp(var_INaL_mL_gate__U)))); // per_ms
        const double var_INaL_mL_gate__bmL = 0.080000000000000002 * exp(-0.090909090909090912 * var_chaste_interface__membrane__Vm); // per_ms
        const double d_dt_chaste_interface_var_INaL_mL_gate__mL = (1.0 - var_chaste_interface__INaL_mL_gate__mL) * var_INaL_mL_gate__amL - var_INaL_mL_gate__bmL * var_chaste_interface__INaL_mL_gate__mL; // 1 / ms
        const double var_INa_h_gate__ah = ((var_chaste_interface__membrane__Vm >= -40.0) ? (0) : (0.13500000000000001 * exp(-11.764705882352942 - 0.14705882352941177 * var_chaste_interface__membrane__Vm))); // per_ms
        const double var_INa_h_gate__bh = ((var_chaste_interface__membrane__Vm >= -40.0) ? (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 - 0.0900900900900901 * var_chaste_interface__membrane__Vm))) : (310000.0 * exp(0.34999999999999998 * var_chaste_interface__membrane__Vm) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__membrane__Vm))); // per_ms
        const double d_dt_chaste_interface_var_INa_h_gate__h = (1.0 - var_chaste_interface__INa_h_gate__h) * var_INa_h_gate__ah - var_INa_h_gate__bh * var_chaste_interface__INa_h_gate__h; // 1 / ms
        const double var_INa_j_gate__aj = ((var_chaste_interface__membrane__Vm >= -40.0) ? (0) : ((37.780000000000001 + var_chaste_interface__membrane__Vm) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__Vm) - 6.9480000000000006e-5 * exp(-0.043909999999999998 * var_chaste_interface__membrane__Vm)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane__Vm)))); // per_ms
        const double var_INa_j_gate__bj = ((var_chaste_interface__membrane__Vm >= -40.0) ? (0.29999999999999999 * exp(-2.5349999999999999e-7 * var_chaste_interface__membrane__Vm) / (1.0 + exp(-3.2000000000000002 - 0.10000000000000001 * var_chaste_interface__membrane__Vm))) : (0.1212 * exp(-0.01052 * var_chaste_interface__membrane__Vm) / (1.0 + exp(-5.5312920000000005 - 0.13780000000000001 * var_chaste_interface__membrane__Vm)))); // per_ms
        const double d_dt_chaste_interface_var_INa_j_gate__j = (1.0 - var_chaste_interface__INa_j_gate__j) * var_INa_j_gate__aj - var_INa_j_gate__bj * var_chaste_interface__INa_j_gate__j; // 1 / ms
        const double var_INa_m_gate__U = (-var_INa_m_gate__v0 + var_chaste_interface__membrane__Vm) * var_INa_m_gate__B; // dimensionless
        const double var_INa_m_gate__am = (((var_INa_m_gate__U >= -9.9999999999999995e-8) && (var_INa_m_gate__U <= 9.9999999999999995e-8)) ? ((1.0 - 0.5 * var_INa_m_gate__U) * var_INa_m_gate__A) : (var_INa_m_gate__A * var_INa_m_gate__U / (-1.0 + exp(var_INa_m_gate__U)))); // per_ms
        const double var_INa_m_gate__bm = 0.080000000000000002 * exp(-0.090909090909090912 * var_chaste_interface__membrane__Vm); // per_ms
        const double d_dt_chaste_interface_var_INa_m_gate__m = (1.0 - var_chaste_interface__INa_m_gate__m) * var_INa_m_gate__am - var_INa_m_gate__bm * var_chaste_interface__INa_m_gate__m; // 1 / ms
        const double var_Ito1__rto1 = exp(0.0018181818181818182 * var_chaste_interface__membrane__Vm); // dimensionless
        const double var_Ito1_a_gate__a_infinity = 1 / (1.0 + exp(-1.3230057479321462 - 0.14019346698443852 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_Ito1_a_gate__alpha_a = 0.82719827942757873 / (1.0 + exp(0.62658348478969694 - 0.034035137876343539 * var_chaste_interface__membrane__Vm)); // per_ms
        const double var_Ito1_a_gate__beta_a = 3.5 / (1.0 + exp(3.403513787634354 + 0.034035137876343539 * var_chaste_interface__membrane__Vm)); // per_ms
        const double var_Ito1_a_gate__tau_a = 1 / (var_Ito1_a_gate__alpha_a + var_Ito1_a_gate__beta_a); // ms
        const double d_dt_chaste_interface_var_Ito1_a_gate__a = (-var_chaste_interface__Ito1_a_gate__a + var_Ito1_a_gate__a_infinity) / var_Ito1_a_gate__tau_a; // 1 / ms
        const double var_Ito1_i1f_gate__alpha_i1f = 0.025000000000000001 / (1.0 + exp(11.6 + 0.20000000000000001 * var_chaste_interface__membrane__Vm)); // per_ms
        const double var_Ito1_i1f_gate__beta_i1f = 0.10208977775055385 / (1.0 + exp(-2.1111111111111112 - 0.1111111111111111 * var_chaste_interface__membrane__Vm)); // per_ms
        const double d_dt_chaste_interface_var_Ito1_i1f_gate__i1f = (1.0 - var_chaste_interface__Ito1_i1f_gate__i1f) * var_Ito1_i1f_gate__alpha_i1f - var_Ito1_i1f_gate__beta_i1f * var_chaste_interface__Ito1_i1f_gate__i1f; // 1 / ms
        const double var_Ito1_i1s_gate__alpha_i1s = 0.0040000000000000001 / (1.0 + exp(12.0 + 0.20000000000000001 * var_chaste_interface__membrane__Vm)); // per_ms
        const double var_Ito1_i1s_gate__beta_i1s = 0.10208977775055385 / (1.0 + exp(-2.1111111111111112 - 0.1111111111111111 * var_chaste_interface__membrane__Vm)); // per_ms
        const double d_dt_chaste_interface_var_Ito1_i1s_gate__i1s = (1.0 - var_chaste_interface__Ito1_i1s_gate__i1s) * var_Ito1_i1s_gate__alpha_i1s - var_Ito1_i1s_gate__beta_i1s * var_chaste_interface__Ito1_i1s_gate__i1s; // 1 / ms
        const double var_Ito2_i2f_gate__alpha_i2f = 0.025000000000000001 / (1.0 + exp(11.6 + 0.20000000000000001 * var_chaste_interface__membrane__Vm)); // per_ms
        const double var_Ito2_i2f_gate__beta_i2f = 0.20000000000000001 / (1.0 + exp(-2.1111111111111112 - 0.1111111111111111 * var_chaste_interface__membrane__Vm)); // per_ms
        const double var_Ito2_i2f_gate__i2f_infinity = var_Ito2_i2f_gate__alpha_i2f / (var_Ito2_i2f_gate__alpha_i2f + var_Ito2_i2f_gate__beta_i2f); // dimensionless
        const double d_dt_chaste_interface_var_Ito2_i2f_gate__i2f = (-var_chaste_interface__Ito2_i2f_gate__i2f + var_Ito2_i2f_gate__i2f_infinity) / var_Ito2_i2f_gate__tau_i2f; // 1 / ms
        const double var_membrane__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_membrane__i_Stim = var_membrane__i_Stim_converted / HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double var_INaCa__denom_3 = pow(var_INaCa__KmNao, 3) * var_chaste_interface__Ca__Ca_i + pow(var_chaste_interface__Na__Na_i, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_chaste_interface__Ca__Ca_i / var_INaCa__KmCai) * NV_Ith_S(mParameters, 3); // mM4
        const double var_INaCa__denom_ss_3 = pow(var_INaCa__KmNao, 3) * var_chaste_interface__Ca__Ca_ss_sr + pow(var_chaste_interface__Na__Na_ss_sr, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_chaste_interface__Ca__Ca_ss_sr / var_INaCa__KmCai) * NV_Ith_S(mParameters, 3); // mM4
        const double var_model_parameters__Cl_o = 100.0; // mM
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_cell_geometry__AF = var_cell_geometry__Acap / var_model_parameters__F; // uF_mole_per_C
        const double var_IK1__gK1 = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 4)) * NV_Ith_S(mParameters, 12); // mS_per_uF
        const double var_IKr__gKr = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 4)) * NV_Ith_S(mParameters, 15); // mS_per_uF
        const double var_INaK__PK = NV_Ith_S(mParameters, 4) / (var_INaK__kmko + NV_Ith_S(mParameters, 4)); // dimensionless
        const double var_INaCa__denom_4 = pow(var_chaste_interface__Na__Na_i, 3) * NV_Ith_S(mParameters, 3) + pow(NV_Ith_S(mParameters, 5), 3) * var_chaste_interface__Ca__Ca_i + pow(NV_Ith_S(mParameters, 5), 3) * (1.0 + pow(var_chaste_interface__Na__Na_i, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_INaCa__denom_ss_4 = pow(var_chaste_interface__Na__Na_ss_sr, 3) * NV_Ith_S(mParameters, 3) + pow(NV_Ith_S(mParameters, 5), 3) * var_chaste_interface__Ca__Ca_ss_sr + pow(NV_Ith_S(mParameters, 5), 3) * (1.0 + pow(var_chaste_interface__Na__Na_ss_sr, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_ICaL__B = 2.0 * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T); // per_mV
        const double var_ICaL__A = 4.0 * pow(var_model_parameters__F, 2) * (-var_ICaL__gamma_Cao * NV_Ith_S(mParameters, 3) + var_chaste_interface__Ca__Ca_ss_CaL * var_ICaL__gamma_Cai * exp(2.0 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * NV_Ith_S(mParameters, 6) / (var_ICaL__B * var_model_parameters__R * var_model_parameters__T); // uA_per_uF
        const double var_ICaL__U = (-var_ICaL__v0 + var_chaste_interface__membrane__Vm) * var_ICaL__B; // dimensionless
        const double var_ICaL__ICaL_max = (((var_ICaL__U >= -9.9999999999999995e-8) && (var_ICaL__U <= 9.9999999999999995e-8)) ? ((1.0 - 0.5 * var_ICaL__U) * var_ICaL__A) : (var_ICaL__A * var_ICaL__U / (-1.0 + exp(var_ICaL__U)))); // uA_per_uF
        const double var_ICaL__ICaL = (var_chaste_interface__ICaL__O + var_chaste_interface__ICaL__O_star) * var_ICaL__ICaL_max; // uA_per_uF
        const double d_dt_chaste_interface_var_Ca__Ca_ss_CaL = -(-var_Ca__Idiff_ss * var_cell_geometry__Vss_sr / var_cell_geometry__Vss_CaL + 0.5 * var_ICaL__ICaL * var_cell_geometry__AF / var_cell_geometry__Vss_CaL) * var_Ca__bss_cal; // mM / ms
        const double var_ICab__B = 2.0 * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T); // per_mV
        const double var_ICab__A = 4.0 * pow(var_model_parameters__F, 2) * (-var_ICab__gamma_Ca_o * NV_Ith_S(mParameters, 3) + var_chaste_interface__Ca__Ca_i * var_ICab__gamma_Ca_i * exp(2.0 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * NV_Ith_S(mParameters, 7) / (var_ICab__B * var_model_parameters__R * var_model_parameters__T); // uA_per_uF
        const double var_ICab__U = (-var_ICab__v0 + var_chaste_interface__membrane__Vm) * var_ICab__B; // dimensionless
        const double var_ICab__ICab = (((var_ICab__U >= -9.9999999999999995e-8) && (var_ICab__U <= 9.9999999999999995e-8)) ? ((1.0 - 0.5 * var_ICab__U) * var_ICab__A) : (var_ICab__A * var_ICab__U / (-1.0 + exp(var_ICab__U)))); // uA_per_uF
        const double var_IKs__alpha = 0.014864597980859999 * exp(0.029877301235880002 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__beta = 0.083986312199829993 * exp(-0.055461057126639998 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double d_dt_chaste_interface_var_IKs__C1 = var_chaste_interface__IKs__C2 * var_IKs__beta - 4.0 * var_chaste_interface__IKs__C1 * var_IKs__alpha; // 1 / ms
        const double var_IKs__delta = 0.0031173268874 * exp(-0.42625451944376003 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__eta = 0.077319900973309999 * exp(-0.06472612248871 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__gamma = 0.01460066118316 * exp(0.24464953099645001 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double d_dt_chaste_interface_var_IKs__C10 = (-2.0 * var_IKs__alpha - 2.0 * var_IKs__delta) * var_chaste_interface__IKs__C10 + var_chaste_interface__IKs__C11 * var_IKs__beta + var_chaste_interface__IKs__C7 * var_IKs__gamma; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__C11 = (-var_IKs__alpha - var_IKs__beta - var_IKs__gamma - 2.0 * var_IKs__delta) * var_chaste_interface__IKs__C11 + 2.0 * var_chaste_interface__IKs__C10 * var_IKs__alpha + 2.0 * var_chaste_interface__IKs__C12 * var_IKs__beta + 2.0 * var_chaste_interface__IKs__C8 * var_IKs__gamma + 3.0 * var_chaste_interface__IKs__C13 * var_IKs__delta; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__C12 = (-2.0 * var_IKs__beta - 2.0 * var_IKs__delta - 2.0 * var_IKs__gamma) * var_chaste_interface__IKs__C12 + var_chaste_interface__IKs__C11 * var_IKs__alpha + 3.0 * var_chaste_interface__IKs__C14 * var_IKs__delta + 3.0 * var_chaste_interface__IKs__C9 * var_IKs__gamma; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__C13 = (-var_IKs__alpha - 3.0 * var_IKs__delta) * var_chaste_interface__IKs__C13 + var_chaste_interface__IKs__C11 * var_IKs__gamma + var_chaste_interface__IKs__C14 * var_IKs__beta; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__C14 = (-var_IKs__beta - var_IKs__gamma - 3.0 * var_IKs__delta) * var_chaste_interface__IKs__C14 + var_chaste_interface__IKs__C13 * var_IKs__alpha + 2.0 * var_chaste_interface__IKs__C12 * var_IKs__gamma + 4.0 * var_chaste_interface__IKs__C15 * var_IKs__delta; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__C15 = (-var_IKs__theta - 4.0 * var_IKs__delta) * var_chaste_interface__IKs__C15 + var_chaste_interface__IKs__C14 * var_IKs__gamma + var_chaste_interface__IKs__O1 * var_IKs__eta; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__C2 = (-var_IKs__beta - var_IKs__gamma - 3.0 * var_IKs__alpha) * var_chaste_interface__IKs__C2 + var_chaste_interface__IKs__C6 * var_IKs__delta + 2.0 * var_chaste_interface__IKs__C3 * var_IKs__beta + 4.0 * var_chaste_interface__IKs__C1 * var_IKs__alpha; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__C3 = (-2.0 * var_IKs__alpha - 2.0 * var_IKs__beta - 2.0 * var_IKs__gamma) * var_chaste_interface__IKs__C3 + var_chaste_interface__IKs__C7 * var_IKs__delta + 3.0 * var_chaste_interface__IKs__C2 * var_IKs__alpha + 3.0 * var_chaste_interface__IKs__C4 * var_IKs__beta; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__C4 = (-var_IKs__alpha - 3.0 * var_IKs__beta - 3.0 * var_IKs__gamma) * var_chaste_interface__IKs__C4 + var_chaste_interface__IKs__C8 * var_IKs__delta + 2.0 * var_chaste_interface__IKs__C3 * var_IKs__alpha + 4.0 * var_chaste_interface__IKs__C5 * var_IKs__beta; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__C5 = (-4.0 * var_IKs__beta - 4.0 * var_IKs__gamma) * var_chaste_interface__IKs__C5 + var_chaste_interface__IKs__C4 * var_IKs__alpha + var_chaste_interface__IKs__C9 * var_IKs__delta; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__C6 = (-var_IKs__delta - 3.0 * var_IKs__alpha) * var_chaste_interface__IKs__C6 + var_chaste_interface__IKs__C2 * var_IKs__gamma + var_chaste_interface__IKs__C7 * var_IKs__beta; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__C7 = (-var_IKs__beta - var_IKs__delta - var_IKs__gamma - 2.0 * var_IKs__alpha) * var_chaste_interface__IKs__C7 + 2.0 * var_chaste_interface__IKs__C10 * var_IKs__delta + 2.0 * var_chaste_interface__IKs__C3 * var_IKs__gamma + 2.0 * var_chaste_interface__IKs__C8 * var_IKs__beta + 3.0 * var_chaste_interface__IKs__C6 * var_IKs__alpha; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__C8 = (-var_IKs__alpha - var_IKs__delta - 2.0 * var_IKs__beta - 2.0 * var_IKs__gamma) * var_chaste_interface__IKs__C8 + 2.0 * var_chaste_interface__IKs__C11 * var_IKs__delta + 2.0 * var_chaste_interface__IKs__C7 * var_IKs__alpha + 3.0 * var_chaste_interface__IKs__C4 * var_IKs__gamma + 3.0 * var_chaste_interface__IKs__C9 * var_IKs__beta; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__C9 = (-var_IKs__delta - 3.0 * var_IKs__beta - 3.0 * var_IKs__gamma) * var_chaste_interface__IKs__C9 + var_chaste_interface__IKs__C8 * var_IKs__alpha + 2.0 * var_chaste_interface__IKs__C12 * var_IKs__delta + 4.0 * var_chaste_interface__IKs__C5 * var_IKs__gamma; // 1 / ms
        const double var_IKs__omega = 0.79405459958640001 * exp(-0.080173781929769997 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__psi = 0.58638228663014003 * exp(0.28205554331496002 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double d_dt_chaste_interface_var_IKs__O1 = (-var_IKs__eta - var_IKs__psi) * var_chaste_interface__IKs__O1 + var_chaste_interface__IKs__C15 * var_IKs__theta + var_IKs__O2 * var_IKs__omega; // 1 / ms
        const double var_INaCa__denom_2 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // dimensionless
        const double var_INaCa__denom_ss_2 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // dimensionless
        const double var_INaCa__num_ss = 0.20000000000000001 * (pow(var_chaste_interface__Na__Na_ss_sr, 3) * NV_Ith_S(mParameters, 3) * exp(var_INaCa__eta * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) - pow(NV_Ith_S(mParameters, 5), 3) * var_chaste_interface__Ca__Ca_ss_sr * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * NV_Ith_S(mParameters, 17); // mM4_uA_per_uF
        const double var_INaCa__INaCa_ss_sr = var_INaCa__num_ss / ((var_INaCa__denom_ss_3 + var_INaCa__denom_ss_4) * var_INaCa__denom_ss_1 * var_INaCa__denom_ss_2); // uA_per_uF
        const double d_dt_chaste_interface_var_Ca__Ca_ss_sr = -(-var_chaste_interface__Irel__Irel * var_cell_geometry__Vjsr / var_cell_geometry__Vss_sr - var_INaCa__INaCa_ss_sr * var_cell_geometry__AF / var_cell_geometry__Vss_sr + var_Ca__Idiff + var_Ca__Idiff_ss) * var_Ca__bss_sr; // mM / ms
        const double d_dt_chaste_interface_var_Na__Na_ss_sr = -var_Na__Idiff_Na - 3.0 * var_INaCa__INaCa_ss_sr * var_cell_geometry__AF / var_cell_geometry__Vss_sr; // mM / ms
        const double var_INaCa__numerator = 0.80000000000000004 * (pow(var_chaste_interface__Na__Na_i, 3) * NV_Ith_S(mParameters, 3) * exp(var_INaCa__eta * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) - pow(NV_Ith_S(mParameters, 5), 3) * var_chaste_interface__Ca__Ca_i * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * NV_Ith_S(mParameters, 17); // mM4_uA_per_uF
        const double var_INaCa__INaCa_cai = var_INaCa__numerator / ((var_INaCa__denom_3 + var_INaCa__denom_4) * var_INaCa__denom_1 * var_INaCa__denom_2); // uA_per_uF
        const double var_INaCa__INaCa = var_INaCa__INaCa_cai + var_INaCa__INaCa_ss_sr; // uA_per_uF
        const double d_dt_chaste_interface_var_Ca__Ca_i = ((-var_Iup__Iup + var_Ileak__Ileak) * var_cell_geometry__Vnsr / var_cell_geometry__Vmyo + var_Ca__Idiff * var_cell_geometry__Vss_sr / var_cell_geometry__Vmyo + 0.5 * (-var_ICab__ICab - var_IpCa__IpCa + 2.0 * var_INaCa__INaCa) * var_cell_geometry__AF / var_cell_geometry__Vmyo) * var_Ca__bmyo; // mM / ms
        const double var_INaK__phi = (-var_INaK__V_half + var_chaste_interface__membrane__Vm) * var_INaK__sigma * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T); // dimensionless
        const double var_INaK__fv = 1 / (1.0 + exp(-var_INaK__phi)); // dimensionless
        const double var_INaK__INaK = var_INaK__PK * var_INaK__PNa * var_INaK__fv * NV_Ith_S(mParameters, 18); // uA_per_uF
        const double var_INab__phi = var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T); // dimensionless
        const double var_INab__A = (-NV_Ith_S(mParameters, 5) + var_chaste_interface__Na__Na_i * exp(var_INab__phi)) * NV_Ith_S(mParameters, 9) * var_model_parameters__F / var_INab__B; // uA_per_uF
        const double var_INab__U = (-var_INab__v0 + var_INab__phi) * var_INab__B; // dimensionless
        const double var_INab__INab = (((var_INab__U >= -9.9999999999999995e-8) && (var_INab__U <= 9.9999999999999995e-8)) ? ((1.0 - 0.5 * var_INab__U) * var_INab__A) : (var_INab__A * var_INab__U / (-1.0 + exp(var_INab__U)))); // uA_per_uF
        const double var_Irel__rel_infinity = var_ICaL__ICaL * var_Irel__alpha_rel / (1.0 + pow((var_Irel__Krel_infinity / var_chaste_interface__Ca__Ca_JSR), var_Irel__h_rel)); // mM_per_ms
        const double d_dt_chaste_interface_var_Irel__Irel = (-var_chaste_interface__Irel__Irel - var_Irel__rel_infinity) / var_Irel__tau_rel; // mM_per_ms / ms
        const double var_Ito2__B = var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T); // per_mV
        const double var_Ito2__A = -pow(var_Ito2__zCl, 2) * pow(var_model_parameters__F, 2) * (-var_model_parameters__Cl_o * exp(var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) + var_chaste_interface__Cl__Cl_i) * NV_Ith_S(mParameters, 19) / (var_Ito2__B * var_model_parameters__R * var_model_parameters__T); // uA_per_uF
        const double var_Ito2__U = (-var_Ito2__v0 + var_chaste_interface__membrane__Vm) * var_Ito2__B; // dimensionless
        const double var_Ito2__Ito2_max = (((var_Ito2__U >= -9.9999999999999995e-8) && (var_Ito2__U <= 9.9999999999999995e-8)) ? ((1.0 - 0.5 * var_Ito2__U) * var_Ito2__A) : (var_Ito2__A * var_Ito2__U / (-1.0 + exp(var_Ito2__U)))); // uA_per_uF
        const double var_Ito2__Ito2 = var_Ito2__Ito2_max * var_Ito2__Ito2_max_scaling_factor * var_Ito2__KCa_ito2 * var_chaste_interface__Ito2_i2f_gate__i2f; // uA_per_uF
        const double d_dt_chaste_interface_var_Cl__Cl_ss = -var_Cl__Idiff_Cl + var_Ito2__Ito2 * var_cell_geometry__AF / var_cell_geometry__Vss_sr; // mM / ms
        const double var_reversal_potentials__ECl = -var_model_parameters__R * var_model_parameters__T * log(var_model_parameters__Cl_o / var_chaste_interface__Cl__Cl_i) / var_model_parameters__F; // mV
        const double var_IClb__IClb = (-var_reversal_potentials__ECl + var_chaste_interface__membrane__Vm) * NV_Ith_S(mParameters, 8); // uA_per_uF
        const double var_reversal_potentials__EK = var_model_parameters__R * var_model_parameters__T * log(NV_Ith_S(mParameters, 4) / var_chaste_interface__K__K_i) / var_model_parameters__F; // mV
        const double var_CT_K_Cl__CT_K_Cl = (-var_reversal_potentials__ECl + var_reversal_potentials__EK) * var_CT_K_Cl__CT_K_Cl_max / (87.825100000000006 - var_reversal_potentials__ECl + var_reversal_potentials__EK); // mM_per_ms
        const double var_IK1_K1_gate__alpha_k1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__Vm - 0.23849999999999999 * var_reversal_potentials__EK)); // dimensionless
        const double var_IK1_K1_gate__beta_k1 = (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__Vm - 0.080320000000000003 * var_reversal_potentials__EK) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__Vm - 0.061749999999999999 * var_reversal_potentials__EK)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__EK - 0.51429999999999998 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_IK1_K1_gate__K1 = var_IK1_K1_gate__alpha_k1 / (var_IK1_K1_gate__alpha_k1 + var_IK1_K1_gate__beta_k1); // dimensionless
        const double var_IK1__IK1 = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IK1__gK1 * var_IK1_K1_gate__K1; // uA_per_uF
        const double var_IKp__IKp = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IKp__Kp * NV_Ith_S(mParameters, 14); // uA_per_uF
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IKr__gKr * var_IKr_r_gate__r * var_chaste_interface__IKr_xr_gate__xr; // uA_per_uF
        const double var_Ito1__Ito1 = pow(var_chaste_interface__Ito1_a_gate__a, 3) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * NV_Ith_S(mParameters, 20) * var_Ito1__rto1 * var_chaste_interface__Ito1_i1f_gate__i1f * var_chaste_interface__Ito1_i1s_gate__i1s; // uA_per_uF
        const double var_reversal_potentials__ENa = var_model_parameters__R * var_model_parameters__T * log(NV_Ith_S(mParameters, 5) / var_chaste_interface__Na__Na_i) / var_model_parameters__F; // mV
        const double var_CT_Na_Cl__CT_Na_Cl = pow((-var_reversal_potentials__ECl + var_reversal_potentials__ENa), 4) * var_CT_Na_Cl__CT_Na_Cl_max / (59494197.640692554 + pow((-var_reversal_potentials__ECl + var_reversal_potentials__ENa), 4)); // mM_per_ms
        const double d_dt_chaste_interface_var_Cl__Cl_i = var_Cl__Idiff_Cl * var_cell_geometry__Vss_sr / var_cell_geometry__Vmyo + var_IClb__IClb * var_cell_geometry__AF / var_cell_geometry__Vmyo + var_CT_K_Cl__CT_K_Cl + var_CT_Na_Cl__CT_Na_Cl; // mM / ms
        const double var_INa__INa = pow(var_chaste_interface__INa_m_gate__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__Vm) * NV_Ith_S(mParameters, 11) * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j; // uA_per_uF
        const double var_INaL__INaL = pow(var_chaste_interface__INaL_mL_gate__mL, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__Vm) * NV_Ith_S(mParameters, 13) * var_chaste_interface__INaL_hL_gate__hL; // uA_per_uF
        const double d_dt_chaste_interface_var_Na__Na_i = var_Na__Idiff_Na * var_cell_geometry__Vss_sr / var_cell_geometry__Vmyo - (3.0 * var_INaCa__INaCa + 3.0 * var_INaK__INaK + var_INa__INa + var_INaL__INaL + var_INab__INab) * var_cell_geometry__AF / var_cell_geometry__Vmyo + var_CT_Na_Cl__CT_Na_Cl; // mM / ms
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = var_model_parameters__R * var_model_parameters__T * log((NV_Ith_S(mParameters, 5) * var_reversal_potentials__prnak + NV_Ith_S(mParameters, 4)) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__prnak + var_chaste_interface__K__K_i)) / var_model_parameters__F; // mV
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__membrane__Vm) * var_IKs__OKs * var_IKs__gKs; // uA_per_uF
        const double d_dt_chaste_interface_var_K__K_i = -(-2.0 * var_INaK__INaK + var_IK1__IK1 + var_IKp__IKp + var_IKr__IKr + var_IKs__IKs + var_Ito1__Ito1 + var_membrane__i_Stim) * var_cell_geometry__AF / var_cell_geometry__Vmyo + var_CT_K_Cl__CT_K_Cl; // mM / ms

        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_membrane__Vm = 0.0;
        }
        else
        {
            const double var_membrane__caiont = -2.0 * var_INaCa__INaCa - 2.0 * var_INaCa__INaCa_ss_sr + var_ICaL__ICaL + var_ICab__ICab + var_IpCa__IpCa; // uA_per_uF
            const double var_membrane__clont = var_IClb__IClb + var_Ito2__Ito2; // uA_per_uF
            const double var_membrane__naiont = 3.0 * var_INaCa__INaCa + 3.0 * var_INaCa__INaCa_ss_sr + 3.0 * var_INaK__INaK + var_INa__INa + var_INaL__INaL + var_INab__INab; // uA_per_uF
            const double var_membrane__kiont = -2.0 * var_INaK__INaK + var_IK1__IK1 + var_IKp__IKp + var_IKr__IKr + var_IKs__IKs + var_Ito1__Ito1 + var_membrane__i_Stim; // uA_per_uF
            d_dt_chaste_interface_var_membrane__Vm = -var_membrane__caiont - var_membrane__clont - var_membrane__kiont - var_membrane__naiont; // mV / ms
        }
        
        NV_Ith_S(rDY,0) = d_dt_chaste_interface_var_membrane__Vm;
        NV_Ith_S(rDY,1) = d_dt_chaste_interface_var_Ca__Ca_i;
        NV_Ith_S(rDY,2) = d_dt_chaste_interface_var_IKs__C1;
        NV_Ith_S(rDY,3) = d_dt_chaste_interface_var_IKs__C2;
        NV_Ith_S(rDY,4) = d_dt_chaste_interface_var_IKs__C3;
        NV_Ith_S(rDY,5) = d_dt_chaste_interface_var_IKs__C4;
        NV_Ith_S(rDY,6) = d_dt_chaste_interface_var_IKs__C5;
        NV_Ith_S(rDY,7) = d_dt_chaste_interface_var_IKs__C6;
        NV_Ith_S(rDY,8) = d_dt_chaste_interface_var_IKs__C7;
        NV_Ith_S(rDY,9) = d_dt_chaste_interface_var_IKs__C8;
        NV_Ith_S(rDY,10) = d_dt_chaste_interface_var_IKs__C9;
        NV_Ith_S(rDY,11) = d_dt_chaste_interface_var_IKs__C10;
        NV_Ith_S(rDY,12) = d_dt_chaste_interface_var_IKs__C11;
        NV_Ith_S(rDY,13) = d_dt_chaste_interface_var_IKs__C12;
        NV_Ith_S(rDY,14) = d_dt_chaste_interface_var_IKs__C13;
        NV_Ith_S(rDY,15) = d_dt_chaste_interface_var_IKs__C14;
        NV_Ith_S(rDY,16) = d_dt_chaste_interface_var_IKs__C15;
        NV_Ith_S(rDY,17) = d_dt_chaste_interface_var_IKs__O1;
        NV_Ith_S(rDY,18) = d_dt_chaste_interface_var_ICaL__C;
        NV_Ith_S(rDY,19) = d_dt_chaste_interface_var_ICaL__O;
        NV_Ith_S(rDY,20) = d_dt_chaste_interface_var_ICaL__C_star;
        NV_Ith_S(rDY,21) = d_dt_chaste_interface_var_ICaL__O_star;
        NV_Ith_S(rDY,22) = d_dt_chaste_interface_var_ICaL__CI;
        NV_Ith_S(rDY,23) = d_dt_chaste_interface_var_ICaL__OI;
        NV_Ith_S(rDY,24) = d_dt_chaste_interface_var_ICaL__CI_star;
        NV_Ith_S(rDY,25) = d_dt_chaste_interface_var_INa_m_gate__m;
        NV_Ith_S(rDY,26) = d_dt_chaste_interface_var_INa_h_gate__h;
        NV_Ith_S(rDY,27) = d_dt_chaste_interface_var_INa_j_gate__j;
        NV_Ith_S(rDY,28) = d_dt_chaste_interface_var_INaL_mL_gate__mL;
        NV_Ith_S(rDY,29) = d_dt_chaste_interface_var_INaL_hL_gate__hL;
        NV_Ith_S(rDY,30) = d_dt_chaste_interface_var_IKr_xr_gate__xr;
        NV_Ith_S(rDY,31) = d_dt_chaste_interface_var_Ito1_a_gate__a;
        NV_Ith_S(rDY,32) = d_dt_chaste_interface_var_Ito1_i1f_gate__i1f;
        NV_Ith_S(rDY,33) = d_dt_chaste_interface_var_Ito1_i1s_gate__i1s;
        NV_Ith_S(rDY,34) = d_dt_chaste_interface_var_Ito2_i2f_gate__i2f;
        NV_Ith_S(rDY,35) = d_dt_chaste_interface_var_Irel__Irel;
        NV_Ith_S(rDY,36) = d_dt_chaste_interface_var_Ca__Ca_JSR;
        NV_Ith_S(rDY,37) = d_dt_chaste_interface_var_Ca__Ca_NSR;
        NV_Ith_S(rDY,38) = d_dt_chaste_interface_var_Ca__Ca_ss_sr;
        NV_Ith_S(rDY,39) = d_dt_chaste_interface_var_Ca__Ca_ss_CaL;
        NV_Ith_S(rDY,40) = d_dt_chaste_interface_var_Na__Na_i;
        NV_Ith_S(rDY,41) = d_dt_chaste_interface_var_Na__Na_ss_sr;
        NV_Ith_S(rDY,42) = d_dt_chaste_interface_var_Cl__Cl_i;
        NV_Ith_S(rDY,43) = d_dt_chaste_interface_var_Cl__Cl_ss;
        NV_Ith_S(rDY,44) = d_dt_chaste_interface_var_K__K_i;
        NV_Ith_S(rDY,45) = d_dt_chaste_interface_var_CaMK_active__CaMK_trap;
    }

    void Celldecker_2009FromCellMLCvode::EvaluateAnalyticJacobian(double var_chaste_interface__environment__time, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__Ca__Ca_i = NV_Ith_S(rY, 1);
        // Units: mM; Initial value: 8.38749860095482e-05
        double var_chaste_interface__IKs__C1 = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.476679784307081
        double var_chaste_interface__IKs__C2 = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.255181042718489
        double var_chaste_interface__IKs__C3 = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.0512272866698557
        double var_chaste_interface__IKs__C4 = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.0045705849736195
        double var_chaste_interface__IKs__C5 = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.000152923243503507
        double var_chaste_interface__IKs__C6 = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.132814156809568
        double var_chaste_interface__IKs__C7 = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.053324572164618
        double var_chaste_interface__IKs__C8 = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.00713656414955778
        double var_chaste_interface__IKs__C9 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.000318368292970148
        double var_chaste_interface__IKs__C10 = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.0138769647384953
        double var_chaste_interface__IKs__C11 = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.00371438476499172
        double var_chaste_interface__IKs__C12 = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.000248553788631871
        double var_chaste_interface__IKs__C13 = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 0.000644426171899078
        double var_chaste_interface__IKs__C14 = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 8.62495047666861e-05
        double var_chaste_interface__IKs__C15 = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 1.12344645485893e-05
        double var_chaste_interface__IKs__O1 = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 1.05292905767805e-05
        double var_chaste_interface__ICaL__C = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 0.99996982093287
        double var_chaste_interface__ICaL__O = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 2.26882961412491e-05
        double var_chaste_interface__ICaL__C_star = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 7.49117189549873e-06
        double var_chaste_interface__ICaL__O_star = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 1.23556404128518e-10
        double var_chaste_interface__ICaL__CI = NV_Ith_S(rY, 22);
        // Units: dimensionless; Initial value: 5.89853003114132e-11
        double var_chaste_interface__ICaL__OI = NV_Ith_S(rY, 23);
        // Units: dimensionless; Initial value: 8.01952813127322e-17
        double var_chaste_interface__ICaL__CI_star = NV_Ith_S(rY, 24);
        // Units: dimensionless; Initial value: 1.9237001017021e-09
        double var_chaste_interface__INa_m_gate__m = NV_Ith_S(rY, 25);
        // Units: dimensionless; Initial value: 0.00101841101248412
        double var_chaste_interface__INa_h_gate__h = NV_Ith_S(rY, 26);
        // Units: dimensionless; Initial value: 0.991354143386887
        double var_chaste_interface__INa_j_gate__j = NV_Ith_S(rY, 27);
        // Units: dimensionless; Initial value: 0.99709036251243
        double var_chaste_interface__INaL_mL_gate__mL = NV_Ith_S(rY, 28);
        // Units: dimensionless; Initial value: 0.00101841101248412
        double var_chaste_interface__INaL_hL_gate__hL = NV_Ith_S(rY, 29);
        // Units: dimensionless; Initial value: 0.319611809402137
        double var_chaste_interface__IKr_xr_gate__xr = NV_Ith_S(rY, 30);
        // Units: dimensionless; Initial value: 4.06959064407486e-06
        double var_chaste_interface__Ito1_a_gate__a = NV_Ith_S(rY, 31);
        // Units: dimensionless; Initial value: 1.76776038804228e-05
        double var_chaste_interface__Ito1_i1f_gate__i1f = NV_Ith_S(rY, 32);
        // Units: dimensionless; Initial value: 0.997976503910799
        double var_chaste_interface__Ito1_i1s_gate__i1s = NV_Ith_S(rY, 33);
        // Units: dimensionless; Initial value: 0.947581184798815
        double var_chaste_interface__Ito2_i2f_gate__i2f = NV_Ith_S(rY, 34);
        // Units: dimensionless; Initial value: 0.996044894628276
        double var_chaste_interface__Irel__Irel = NV_Ith_S(rY, 35);
        // Units: mM_per_ms; Initial value: 0.000714227102027745
        double var_chaste_interface__Ca__Ca_JSR = NV_Ith_S(rY, 36);
        // Units: mM; Initial value: 0.993914988616979
        double var_chaste_interface__Ca__Ca_NSR = NV_Ith_S(rY, 37);
        // Units: mM; Initial value: 1.01475649943057
        double var_chaste_interface__Ca__Ca_ss_sr = NV_Ith_S(rY, 38);
        // Units: mM; Initial value: 0.00011296707102434
        double var_chaste_interface__Ca__Ca_ss_CaL = NV_Ith_S(rY, 39);
        // Units: mM; Initial value: 0.000119239795531548
        double var_chaste_interface__Na__Na_i = NV_Ith_S(rY, 40);
        // Units: mM; Initial value: 8.01031392415197
        double var_chaste_interface__Na__Na_ss_sr = NV_Ith_S(rY, 41);
        // Units: mM; Initial value: 8.01033434859049
        double var_chaste_interface__Cl__Cl_i = NV_Ith_S(rY, 42);
        // Units: mM; Initial value: 20.6683603724432
        double var_chaste_interface__K__K_i = NV_Ith_S(rY, 44);
        // Units: mM; Initial value: 144.907134343314
        double var_chaste_interface__CaMK_active__CaMK_trap = NV_Ith_S(rY, 45);
        // Units: dimensionless; Initial value: 0.0114911034744777
        const double var_x0 = 2463.3848322107292 * NV_Ith_S(mParameters, 3);
        const double var_x1 = exp(0.074871767015605231 * var_chaste_interface__membrane__Vm);
        const double var_x2 = var_x1 * var_chaste_interface__Ca__Ca_i;
        const double var_x3 = 192970.0 - 7224.0024405006716 * var_chaste_interface__membrane__Vm;
        const double var_x4 = var_x3 * NV_Ith_S(mParameters, 7);
        const double var_x5 = (var_chaste_interface__membrane__Vm >= -1.3356169352749131e-6) && (var_chaste_interface__membrane__Vm <= 1.3356169352749131e-6);
        const double var_x6 = -1.0 + var_x1;
        const double var_x7 = 1 / var_x6;
        const double var_x8 = 14448.004881001343 * var_x7;
        const double var_x9 = -0.34100000000000003 * NV_Ith_S(mParameters, 3);
        const double var_x10 = (var_x9 + var_x2) * NV_Ith_S(mParameters, 7);
        const double var_x11 = var_x10 * var_x8;
        const double var_x12 = NV_Ith_S(mParameters, 7) * var_chaste_interface__membrane__Vm;
        const double var_x13 = 1081.7476552906598 * var_x7;
        const double var_x14 = 1081.7476552906598 * var_x1 * var_chaste_interface__membrane__Vm / pow(var_x6, 2);
        const double var_x15 = ((var_x5) ? ((var_x0 - 7224.0024405006716 * var_x2) * NV_Ith_S(mParameters, 7) + 0.074871767015605231 * var_x2 * var_x4) : (var_x11 - var_x10 * var_x14 + var_x12 * var_x13 * var_x2));
        const double var_x16 = 0.037435883507802616 * var_chaste_interface__membrane__Vm;
        const double var_x17 = exp(var_x16);
        const double var_x18 = var_x17 * var_chaste_interface__Na__Na_i;
        const double var_x19 = 1806.0006101251679 * var_chaste_interface__membrane__Vm;
        const double var_x20 = (96485.0 - var_x19) * NV_Ith_S(mParameters, 9);
        const double var_x21 = (var_chaste_interface__membrane__Vm >= -2.6712338705498262e-6) && (var_chaste_interface__membrane__Vm <= 2.6712338705498262e-6);
        const double var_x22 = -1.0 + var_x17;
        const double var_x23 = 1 / var_x22;
        const double var_x24 = 3612.0012202503358 * var_x23;
        const double var_x25 = (var_x18 - NV_Ith_S(mParameters, 5)) * NV_Ith_S(mParameters, 9);
        const double var_x26 = NV_Ith_S(mParameters, 9) * var_chaste_interface__membrane__Vm;
        const double var_x27 = 135.21845691133248 * var_x17 * var_chaste_interface__membrane__Vm / pow(var_x22, 2);
        const double var_x28 = ((var_x21) ? ((1806.0006101251679 * NV_Ith_S(mParameters, 5) - 1806.0006101251679 * var_x18) * NV_Ith_S(mParameters, 9) + 0.037435883507802616 * var_x18 * var_x20) : (var_x24 * var_x25 - var_x25 * var_x27 + 135.21845691133248 * var_x18 * var_x23 * var_x26));
        const double var_x29 = -var_chaste_interface__ICaL__O - var_chaste_interface__ICaL__O_star;
        const double var_x30 = var_x1 * var_chaste_interface__Ca__Ca_ss_CaL;
        const double var_x31 = var_x3 * NV_Ith_S(mParameters, 6);
        const double var_x32 = (var_x9 + var_x30) * NV_Ith_S(mParameters, 6);
        const double var_x33 = var_x32 * var_x8;
        const double var_x34 = NV_Ith_S(mParameters, 6) * var_chaste_interface__membrane__Vm;
        const double var_x35 = ((var_x5) ? ((var_x0 - 7224.0024405006716 * var_x30) * NV_Ith_S(mParameters, 6) + 0.074871767015605231 * var_x30 * var_x31) : (var_x33 - var_x14 * var_x32 + var_x13 * var_x30 * var_x34));
        const double var_x36 = exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__membrane__Vm);
        const double var_x37 = 1.0 + var_x36;
        const double var_x38 = NV_Ith_S(mParameters, 14) / var_x37;
        const double var_x39 = (-96485.0 + var_x19) * NV_Ith_S(mParameters, 19);
        const double var_x40 = (-100.0 * var_x17 + var_chaste_interface__Cl__Cl_i) * NV_Ith_S(mParameters, 19);
        const double var_x41 = var_x24 * var_x40;
        const double var_x42 = NV_Ith_S(mParameters, 19) * var_chaste_interface__membrane__Vm;
        const double var_x43 = ((var_x21) ? ((1806.0006101251679 * var_chaste_interface__Cl__Cl_i - 180600.06101251679 * var_x17) * NV_Ith_S(mParameters, 19) - 3.7435883507802616 * var_x17 * var_x39) : (-var_x41 + var_x27 * var_x40 + 13521.845691133247 * var_x17 * var_x23 * var_x42));
        const double var_x44 = pow(var_chaste_interface__Irel__Irel, 2);
        const double var_x45 = 1 / (1.0 + 6.2499999999999991 * var_x44);
        const double var_x46 = -1.0 + var_x45;
        const double var_x47 = var_x46 * var_chaste_interface__Ito2_i2f_gate__i2f;
        const double var_x48 = 1.0 - var_chaste_interface__IKs__C1 - var_chaste_interface__IKs__C10 - var_chaste_interface__IKs__C11 - var_chaste_interface__IKs__C12 - var_chaste_interface__IKs__C13 - var_chaste_interface__IKs__C14 - var_chaste_interface__IKs__C15 - var_chaste_interface__IKs__C2 - var_chaste_interface__IKs__C3 - var_chaste_interface__IKs__C4 - var_chaste_interface__IKs__C5 - var_chaste_interface__IKs__C6 - var_chaste_interface__IKs__C7 - var_chaste_interface__IKs__C8 - var_chaste_interface__IKs__C9;
        const double var_x49 = 1 / var_chaste_interface__Ca__Ca_i;
        const double var_x50 = pow(var_x49, 1.3999999999999999);
        const double var_x51 = 1.0 + 6.4818210260626455e-7 * var_x50;
        const double var_x52 = 1 / var_x51;
        const double var_x53 = (-1.0 - 0.59999999999999998 * var_x52) * NV_Ith_S(mParameters, 16);
        const double var_x54 = var_x48 * var_x53;
        const double var_x55 = pow(var_chaste_interface__INaL_mL_gate__mL, 3) * NV_Ith_S(mParameters, 13);
        const double var_x56 = var_x55 * var_chaste_interface__INaL_hL_gate__hL;
        const double var_x57 = pow(var_chaste_interface__INa_m_gate__m, 3);
        const double var_x58 = var_x57 * NV_Ith_S(mParameters, 11) * var_chaste_interface__INa_j_gate__j;
        const double var_x59 = var_x58 * var_chaste_interface__INa_h_gate__h;
        const double var_x60 = exp(0.64935064935064934 + 0.064935064935064929 * var_chaste_interface__membrane__Vm);
        const double var_x61 = 1.0 + var_x60;
        const double var_x62 = sqrt(NV_Ith_S(mParameters, 4));
        const double var_x63 = var_x62 * NV_Ith_S(mParameters, 15) / var_x61;
        const double var_x64 = 0.43033148291193518 * var_x63;
        const double var_x65 = 1 / var_chaste_interface__K__K_i;
        const double var_x66 = log(var_x65 * NV_Ith_S(mParameters, 4));
        const double var_x67 = 26.712338705498265 * var_x66;
        const double var_x68 = -var_x67 + var_chaste_interface__membrane__Vm;
        const double var_x69 = var_x36 * var_x68 * NV_Ith_S(mParameters, 14) / pow(var_x37, 2);
        const double var_x70 = exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__Vm - 6.3708927812613361 * var_x66);
        const double var_x71 = 1.0 + var_x70;
        const double var_x72 = 1 / var_x71;
        const double var_x73 = exp(-2.4444678999999998 + 13.738155796237757 * var_x66 - 0.51429999999999998 * var_chaste_interface__membrane__Vm);
        const double var_x74 = 1.0 + var_x73;
        const double var_x75 = 1 / var_x74;
        const double var_x76 = exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__Vm - 2.1455350448256207 * var_x66);
        const double var_x77 = exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__Vm - 1.6494869150645177 * var_x66);
        const double var_x78 = var_x77 + 0.49124000000000001 * var_x76;
        const double var_x79 = var_x75 * var_x78;
        const double var_x80 = var_x62 * NV_Ith_S(mParameters, 12) / (var_x79 + 1.02 * var_x72);
        const double var_x81 = var_x72 * var_x80;
        const double var_x82 = pow(var_chaste_interface__Ito1_a_gate__a, 3);
        const double var_x83 = exp(0.0018181818181818182 * var_chaste_interface__membrane__Vm);
        const double var_x84 = var_x82 * var_x83 * NV_Ith_S(mParameters, 20) * var_chaste_interface__Ito1_i1s_gate__i1s;
        const double var_x85 = var_x84 * var_chaste_interface__Ito1_i1f_gate__i1f;
        const double var_x86 = exp(0.010107688547106707 * var_chaste_interface__membrane__Vm);
        const double var_x87 = pow(var_chaste_interface__Na__Na_ss_sr, 3);
        const double var_x88 = var_x87 * NV_Ith_S(mParameters, 3);
        const double var_x89 = var_x86 * var_x88;
        const double var_x90 = exp(-0.027328194960695912 * var_chaste_interface__membrane__Vm);
        const double var_x91 = pow(NV_Ith_S(mParameters, 5), 3);
        const double var_x92 = var_x91 * var_chaste_interface__Ca__Ca_ss_sr;
        const double var_x93 = var_x90 * var_x92;
        const double var_x94 = 1.0 + 0.32000000000000001 * var_x90;
        const double var_x95 = NV_Ith_S(mParameters, 17) / var_x94;
        const double var_x96 = pow(var_chaste_interface__Ca__Ca_ss_sr, (-2));
        const double var_x97 = 1.0 + 1.5624999999999999e-8 * var_x96;
        const double var_x98 = 1 / var_x97;
        const double var_x99 = 1.0 + 0.00053738391835633597 * var_x87;
        const double var_x100 = 0.0035999999999999999 * var_x91;
        const double var_x101 = 1.0 + 277.77777777777777 * var_chaste_interface__Ca__Ca_ss_sr;
        const double var_x102 = 1860.8670000000004 * NV_Ith_S(mParameters, 3);
        const double var_x103 = 1 / (var_x88 + var_x92 + 669921.875 * var_chaste_interface__Ca__Ca_ss_sr + 1.3 * var_x87 + var_x100 * var_x99 + var_x101 * var_x102);
        const double var_x104 = var_x103 * var_x98;
        const double var_x105 = var_x104 * var_x95;
        const double var_x106 = var_x105 * (0.010107688547106707 * var_x89 + 0.027328194960695912 * var_x93);
        const double var_x107 = pow(var_chaste_interface__Na__Na_i, 3);
        const double var_x108 = var_x107 * NV_Ith_S(mParameters, 3);
        const double var_x109 = var_x108 * var_x86;
        const double var_x110 = var_x91 * var_chaste_interface__Ca__Ca_i;
        const double var_x111 = var_x110 * var_x90;
        const double var_x112 = 1.0 + 1.5624999999999999e-8 / pow(var_chaste_interface__Ca__Ca_i, 2);
        const double var_x113 = 1 / var_x112;
        const double var_x114 = 1.0 + 0.00053738391835633597 * var_x107;
        const double var_x115 = 1.0 + 277.77777777777777 * var_chaste_interface__Ca__Ca_i;
        const double var_x116 = 1 / (var_x108 + var_x110 + 669921.875 * var_chaste_interface__Ca__Ca_i + 1.3 * var_x107 + var_x100 * var_x114 + var_x102 * var_x115);
        const double var_x117 = var_x113 * var_x116;
        const double var_x118 = var_x117 * var_x95;
        const double var_x119 = var_x118 * (0.010107688547106707 * var_x109 + 0.027328194960695912 * var_x111);
        const double var_x120 = var_x70 / pow(var_x71, 2);
        const double var_x121 = var_x68 * var_x80;
        const double var_x122 = var_x120 * var_x121;
        const double var_x123 = var_x62 * var_x68;
        const double var_x124 = var_x123 * var_x60 * NV_Ith_S(mParameters, 15) * var_chaste_interface__IKr_xr_gate__xr / pow(var_x61, 2);
        const double var_x125 = var_x73 * var_x78 / pow(var_x74, 2);
        const double var_x126 = 0.24326999999999999 * var_x120 - 0.51429999999999998 * var_x125 - var_x75 * (0.061749999999999999 * var_x77 + 0.039456396800000001 * var_x76);
        const double var_x127 = var_x123 * var_x72 * NV_Ith_S(mParameters, 12) / pow((var_x72 + 0.98039215686274506 * var_x79), 2);
        const double var_x128 = 0.42189361069797565 * var_x127;
        const double var_x129 = var_x89 - var_x93;
        const double var_x130 = var_x90 * NV_Ith_S(mParameters, 17) / pow(var_x94, 2);
        const double var_x131 = var_x104 * var_x129 * var_x130;
        const double var_x132 = var_x109 - var_x111;
        const double var_x133 = var_x117 * var_x130 * var_x132;
        const double var_x134 = var_x68 * var_x85;
        const double var_x135 = 1 / (1.5 + NV_Ith_S(mParameters, 4));
        const double var_x136 = 1 + 0.38461538461538458 * var_chaste_interface__Na__Na_i;
        const double var_x137 = pow(var_x136, (-3));
        const double var_x138 = -var_x16;
        const double var_x139 = exp(-3.444101282717841 + var_x138);
        const double var_x140 = 1.0 + var_x139;
        const double var_x141 = var_x107 * var_x135 * var_x137 * var_x139 * NV_Ith_S(mParameters, 18) * NV_Ith_S(mParameters, 4) / pow(var_x140, 2);
        const double var_x142 = var_x1;
        const double var_x143 = var_x1 * var_x8;
        const double var_x144 = ((var_x5) ? (var_x142 * var_x4) : (var_x12 * var_x143));
        const double var_x145 = 0.00050000000000000001 + var_chaste_interface__Ca__Ca_i;
        const double var_x146 = NV_Ith_S(mParameters, 10) / var_x145;
        const double var_x147 = pow(var_x145, (-2));
        const double var_x148 = var_x147 * var_chaste_interface__Ca__Ca_i * NV_Ith_S(mParameters, 10);
        const double var_x149 = var_x90 * var_x91;
        const double var_x150 = var_x118 * var_x149;
        const double var_x151 = var_x132 * var_x95;
        const double var_x152 = var_x116 * var_x151 / (pow(var_x112, 2) * pow(var_chaste_interface__Ca__Ca_i, 3));
        const double var_x153 = -669921.875 - var_x91 - 516907.50000000012 * NV_Ith_S(mParameters, 3);
        const double var_x154 = 0.0027777373294460648 * NV_Ith_S(mParameters, 3);
        const double var_x155 = 5.3737609329446059e-9 * var_x91;
        const double var_x156 = var_x113 * var_x151 / pow((1.9405247813411081e-6 * var_x107 + 1.4927113702623908e-6 * var_x108 + 1.4927113702623908e-6 * var_x110 + var_x114 * var_x155 + var_x115 * var_x154 + var_chaste_interface__Ca__Ca_i), 2);
        const double var_x157 = 1.7825497879284993e-12 * var_x156;
        const double var_x158 = 1 / (0.018329999999999999 * var_chaste_interface__Na__Na_i + var_chaste_interface__K__K_i);
        const double var_x159 = -26.712338705498265 * log(var_x158 * (0.018329999999999999 * NV_Ith_S(mParameters, 5) + NV_Ith_S(mParameters, 4))) + var_chaste_interface__membrane__Vm;
        const double var_x160 = var_x159 * var_x48 * var_x49 * var_x50 * NV_Ith_S(mParameters, 16) / pow(var_x51, 2);
        const double var_x161 = -var_x159 * var_x53;
        const double var_x162 = 192970.0 + 192970.0 * var_x138;
        const double var_x163 = ((var_x5) ? (var_x162 * var_x32) : (var_x33 * var_chaste_interface__membrane__Vm));
        const double var_x164 = -var_x163;
        const double var_x165 = 1 / var_chaste_interface__Na__Na_i;
        const double var_x166 = log(var_x165 * NV_Ith_S(mParameters, 5));
        const double var_x167 = -26.712338705498265 * var_x166 + var_chaste_interface__membrane__Vm;
        const double var_x168 = var_x167 * NV_Ith_S(mParameters, 11) * var_chaste_interface__INa_h_gate__h;
        const double var_x169 = var_x168 * pow(var_chaste_interface__INa_m_gate__m, 2) * var_chaste_interface__INa_j_gate__j;
        const double var_x170 = var_x167 * var_x58;
        const double var_x171 = var_x168 * var_x57;
        const double var_x172 = var_x167 * pow(var_chaste_interface__INaL_mL_gate__mL, 2) * NV_Ith_S(mParameters, 13) * var_chaste_interface__INaL_hL_gate__hL;
        const double var_x173 = var_x167 * var_x55;
        const double var_x174 = var_x68 * var_x83 * NV_Ith_S(mParameters, 20) * var_chaste_interface__Ito1_i1f_gate__i1f;
        const double var_x175 = var_x174 * pow(var_chaste_interface__Ito1_a_gate__a, 2) * var_chaste_interface__Ito1_i1s_gate__i1s;
        const double var_x176 = var_x68 * var_x84;
        const double var_x177 = var_x174 * var_x82;
        const double var_x178 = ((var_x21) ? (-96485.0 * var_x40 * (1.0 - 0.018717941753901308 * var_chaste_interface__membrane__Vm)) : (-var_x41 * var_chaste_interface__membrane__Vm));
        const double var_x179 = var_x178 * var_chaste_interface__Irel__Irel * var_chaste_interface__Ito2_i2f_gate__i2f / pow((0.16000000000000003 + var_x44), 2);
        const double var_x180 = var_x105 * var_x149;
        const double var_x181 = var_x129 * var_x95;
        const double var_x182 = var_x103 * var_x181 / (pow(var_x97, 2) * pow(var_chaste_interface__Ca__Ca_ss_sr, 3));
        const double var_x183 = var_x181 * var_x98 / pow((1.9405247813411081e-6 * var_x87 + 1.4927113702623908e-6 * var_x88 + 1.4927113702623908e-6 * var_x92 + var_x101 * var_x154 + var_x155 * var_x99 + var_chaste_interface__Ca__Ca_ss_sr), 2);
        const double var_x184 = 8.9127489396424967e-13 * var_x183;
        const double var_x185 = ((var_x5) ? (var_x142 * var_x31) : (var_x143 * var_x34));
        const double var_x186 = ((var_x21) ? (var_x17 * var_x20) : (var_x17 * var_x24 * var_x26));
        const double var_x187 = var_x158 * var_x54;
        const double var_x188 = var_x165 * var_x56;
        const double var_x189 = var_x165 * var_x59;
        const double var_x190 = var_x135 * NV_Ith_S(mParameters, 18) * NV_Ith_S(mParameters, 4) / var_x140;
        const double var_x191 = var_x107 * var_x190 / pow(var_x136, 4);
        const double var_x192 = pow(var_chaste_interface__Na__Na_i, 2);
        const double var_x193 = var_x137 * var_x190 * var_x192;
        const double var_x194 = 3 * NV_Ith_S(mParameters, 3);
        const double var_x195 = 5.8037463182484285e-6 * var_x91;
        const double var_x196 = -3.9000000000000004 * var_x192 - var_x192 * var_x194 - var_x192 * var_x195;
        const double var_x197 = var_x86 * NV_Ith_S(mParameters, 3);
        const double var_x198 = var_x118 * var_x192 * var_x197;
        const double var_x199 = pow(var_chaste_interface__Na__Na_ss_sr, 2);
        const double var_x200 = -3.9000000000000004 * var_x199 - var_x194 * var_x199 - var_x195 * var_x199;
        const double var_x201 = var_x105 * var_x197 * var_x199;
        const double var_x202 = 1 / var_chaste_interface__Cl__Cl_i;
        const double var_x203 = var_x202 * NV_Ith_S(mParameters, 8);
        const double var_x204 = ((var_x21) ? (var_x39) : (-var_x24 * var_x42));
        const double var_x205 = var_x38 * var_x65;
        const double var_x206 = var_x65 * var_x81;
        const double var_x207 = var_x63 * var_x65 * var_chaste_interface__IKr_xr_gate__xr;
        const double var_x208 = var_x120 * var_x65;
        const double var_x209 = 6.4983106368865622 * var_x208 - var_x75 * (1.053972635420138 * var_x65 * var_x76 + 1.6494869150645177 * var_x65 * var_x77) - 13.738155796237757 * var_x125 * var_x65;
        const double var_x210 = var_x65 * var_x85;
        const double var_x211 = var_x121 * var_x208;
        const double var_x212 = 0.0023800000000000002 + var_chaste_interface__Ca__Ca_i;
        const double var_x213 = 1.0 + 0.00011900000000000002 / pow(var_x212, 2) + 3.5000000000000004e-5 * var_x147;
        const double var_x214 = 1 / var_x213;
        const double var_x215 = var_x214;
        const double var_x216 = 3.0851110000007915e-5 * var_x146;
        const double var_x217 = 1.0 - var_chaste_interface__CaMK_active__CaMK_trap;
        const double var_x218 = 1.0 + 0.0015 / var_chaste_interface__Ca__Ca_ss_sr;
        const double var_x219 = 1 / var_x218;
        const double var_x220 = 0.050000000000000003 * var_x219;
        const double var_x221 = var_x217 * var_x220;
        const double var_x222 = 0.14999999999999999 + var_x221 + var_chaste_interface__CaMK_active__CaMK_trap;
        const double var_x223 = 1 / var_x222;
        const double var_x224 = var_x221 + var_chaste_interface__CaMK_active__CaMK_trap;
        const double var_x225 = var_x223 * var_x224;
        const double var_x226 = 0.00092000000000000003 - 0.00017000000000000001 * var_x225 + var_chaste_interface__Ca__Ca_i;
        const double var_x227 = 1 / var_x226;
        const double var_x228 = (1.0 + 0.75 * var_x225) * NV_Ith_S(mParameters, 2);
        const double var_x229 = var_x227 * var_x228;
        const double var_x230 = 0.081415929203539822 * var_x229;
        const double var_x231 = var_x228 * var_chaste_interface__Ca__Ca_i / pow(var_x226, 2);
        const double var_x232 = 0.081415929203539822 * var_x231;
        const double var_x233 = 1.0998727917574584e-16 * var_x156;
        const double var_x234 = 4.9361776000012672e-5 * var_x118;
        const double var_x235 = 0.0054277286135693209 * NV_Ith_S(mParameters, 0);
        const double var_x236 = var_x105 * var_x129;
        const double var_x237 = var_x217 * var_x96 / pow(var_x218, 2);
        const double var_x238 = var_x223 * var_x237;
        const double var_x239 = var_x224 / pow(var_x222, 2);
        const double var_x240 = var_x237 * var_x239;
        const double var_x241 = var_x227 * var_chaste_interface__Ca__Ca_i * NV_Ith_S(mParameters, 2);
        const double var_x242 = var_x241 * (5.6250000000000005e-5 * var_x238 - 5.6250000000000005e-5 * var_x240);
        const double var_x243 = 1.2750000000000002e-8 * var_x238 - 1.2750000000000002e-8 * var_x240;
        const double var_x244 = 2.7496819793936459e-17 * var_x183;
        const double var_x245 = 1 - var_x220;
        const double var_x246 = var_x223 * var_x245;
        const double var_x247 = var_x239 * (-1.0 + var_x220);
        const double var_x248 = var_x241 * (0.75 * var_x246 + 0.75 * var_x247);
        const double var_x249 = 0.00017000000000000001 * var_x246 + 0.00017000000000000001 * var_x247;
        const double var_x250 = exp(-0.0020762336738124813 * var_chaste_interface__membrane__Vm);
        const double var_x251 = 0.00017437520952861502 * var_x250;
        const double var_x252 = exp(0.0011184831685939309 * var_chaste_interface__membrane__Vm);
        const double var_x253 = 6.6503210598028962e-5 * var_x252 * var_chaste_interface__IKs__C1;
        const double var_x254 = 0.059458391923439997 * var_x252;
        const double var_x255 = 0.083986312199829993 * var_x250;
        const double var_x256 = 4.9877407948521721e-5 * var_x252;
        const double var_x257 = -var_x256;
        const double var_x258 = exp(0.0091586713426216482 * var_chaste_interface__membrane__Vm);
        const double var_x259 = 0.00013372265716153579 * var_x258;
        const double var_x260 = var_x251 - var_x259;
        const double var_x261 = 0.00034875041905723004 * var_x250;
        const double var_x262 = exp(-0.015957214534570986 * var_chaste_interface__membrane__Vm);
        const double var_x263 = 4.9743853916628211e-5 * var_x262;
        const double var_x264 = 0.04459379394258 * var_x252;
        const double var_x265 = -var_x264;
        const double var_x266 = 0.01460066118316 * var_x258;
        const double var_x267 = -var_x255 - var_x266;
        const double var_x268 = 0.16797262439965999 * var_x250;
        const double var_x269 = 0.0031173268874 * var_x262;
        const double var_x270 = 3.3251605299014481e-5 * var_x252;
        const double var_x271 = -var_x270;
        const double var_x272 = 0.00026744531432307158 * var_x258;
        const double var_x273 = var_x261 - var_x272;
        const double var_x274 = 0.00052312562858584509 * var_x250;
        const double var_x275 = 0.029729195961719999 * var_x252;
        const double var_x276 = -var_x275;
        const double var_x277 = 0.02920132236632 * var_x258;
        const double var_x278 = -var_x268 - var_x277;
        const double var_x279 = 0.25195893659948998 * var_x250;
        const double var_x280 = 1.662580264950724e-5 * var_x252;
        const double var_x281 = -var_x280;
        const double var_x282 = 0.00040116797148460735 * var_x258;
        const double var_x283 = var_x274 - var_x282;
        const double var_x284 = 0.00069750083811446009 * var_x250;
        const double var_x285 = 0.014864597980859999 * var_x252;
        const double var_x286 = -var_x285;
        const double var_x287 = 0.043801983549479999 * var_x258;
        const double var_x288 = -var_x279 - var_x287;
        const double var_x289 = 0.33594524879931997 * var_x250;
        const double var_x290 = 0.00053489062864614317 * var_x258;
        const double var_x291 = 0.058402644732640001 * var_x258;
        const double var_x292 = -var_x269;
        const double var_x293 = 9.9487707833256423e-5 * var_x262;
        const double var_x294 = 0.0062346537747999999 * var_x262;
        const double var_x295 = -var_x294;
        const double var_x296 = 0.00014923156174988464 * var_x262;
        const double var_x297 = 0.009351980662199999 * var_x262;
        const double var_x298 = -var_x297;
        const double var_x299 = 0.00019897541566651285 * var_x262 * var_chaste_interface__IKs__C15;
        const double var_x300 = 0.0124693075496 * var_x262;
        const double var_x301 = exp(-0.002423079581399111 * var_chaste_interface__membrane__Vm);
        const double var_x302 = 0.00018735227328422869 * var_x301;
        const double var_x303 = 0.077319900973309999 * var_x301;
        const double var_x304 = exp(0.010558998462268819 * var_chaste_interface__membrane__Vm);
        const double var_x305 = exp(-0.00300137636070284 * var_chaste_interface__membrane__Vm);
        const double var_x306 = -0.79405459958640001 * var_x305;
        const double var_x307 = exp(5.833333333333333 + 0.33333333333333331 * var_chaste_interface__membrane__Vm);
        const double var_x308 = 1.0 + var_x307;
        const double var_x309 = 1 / var_x308;
        const double var_x310 = 0.80000000000000004 * var_x309;
        const double var_x311 = exp(-0.019709447580272044 - 0.092532617747756077 * var_chaste_interface__membrane__Vm);
        const double var_x312 = 1.0 + var_x311;
        const double var_x313 = var_x311 / pow(var_x312, 2);
        const double var_x314 = exp(4.7444197507005512 + 0.096627693496956227 * var_chaste_interface__membrane__Vm);
        const double var_x315 = 1.0 + var_x314;
        const double var_x316 = -0.0038918839011179407 * var_x314 / pow(var_x315, 2);
        const double var_x317 = var_x316 + 0.0030285935177480471 * var_x313;
        const double var_x318 = 0.040277106492669565 / var_x315;
        const double var_x319 = 1 / var_x312;
        const double var_x320 = var_x318 + 0.032730010146303147 * var_x319;
        const double var_x321 = var_x307 / pow(var_x308, 2);
        const double var_x322 = 0.26666666666666666 * var_x320 * var_x321;
        const double var_x323 = -var_x322 + var_x317 * (-0.80000000000000004 + var_x310);
        const double var_x324 = exp(1.4349206349206352 - 0.10582010582010583 * var_chaste_interface__membrane__Vm);
        const double var_x325 = 1.0 + var_x324;
        const double var_x326 = exp(1.7160000000000002 + 0.13200000000000001 * var_chaste_interface__membrane__Vm);
        const double var_x327 = 1.0 + var_x326;
        const double var_x328 = exp(0.67599999999999993 + 0.051999999999999998 * var_chaste_interface__membrane__Vm);
        const double var_x329 = var_x328 / var_x327;
        const double var_x330 = 1 / (0.58999999999999997 + 0.80000000000000004 * var_x329);
        const double var_x331 = 0.10582010582010583 * var_x324 * var_x330 / pow(var_x325, 2);
        const double var_x332 = 1 / var_x325;
        const double var_x333 = 1.5624999999999998 * (-0.041599999999999998 * var_x329 + 0.10560000000000001 * var_x326 * var_x328 / pow(var_x327, 2)) / pow((0.73749999999999993 + var_x329), 2);
        const double var_x334 = var_x332 * var_x333;
        const double var_x335 = -var_x331 - var_x334;
        const double var_x336 = 0.20000000000000001 + var_x310;
        const double var_x337 = var_x317 * var_x336;
        const double var_x338 = var_x332;
        const double var_x339 = 1.0 - var_x338;
        const double var_x340 = var_x333 * var_x339;
        const double var_x341 = var_x330 * var_x338;
        const double var_x342 = -var_x341;
        const double var_x343 = 1.0 + 8.1000000000000005e-11 / pow(var_chaste_interface__Ca__Ca_ss_CaL, 4);
        const double var_x344 = 1 / var_x343;
        const double var_x345 = 3.0 * var_x344;
        const double var_x346 = -var_x310;
        const double var_x347 = 0.80000000000000004 + var_x346;
        const double var_x348 = var_x320 * var_x347;
        const double var_x349 = -var_x345 - var_x348;
        const double var_x350 = var_x330 * var_x339;
        const double var_x351 = var_x320 * var_x336;
        const double var_x352 = 1 / (pow(var_x343, 2) * pow(var_chaste_interface__Ca__Ca_ss_CaL, 5));
        const double var_x353 = 9.7200000000000016e-10 * var_x352;
        const double var_x354 = var_x353 * var_chaste_interface__ICaL__C;
        const double var_x355 = var_x331 - var_x340;
        const double var_x356 = -var_x350;
        const double var_x357 = var_x353 * var_chaste_interface__ICaL__O;
        const double var_x358 = 0.99990000999900008 * var_x309;
        const double var_x359 = -0.99990000999900008 + var_x358;
        const double var_x360 = 1 / (25.0 - 17.5 * var_x344);
        const double var_x361 = var_x316 + 0.092532617747756077 * var_x313 * var_x360;
        const double var_x362 = var_x318 + var_x319 * var_x360;
        const double var_x363 = 0.33330000333300003 * var_x321 * var_x362;
        const double var_x364 = -var_x363 + var_x359 * var_x361;
        const double var_x365 = 9.9990000999900015e-5 + var_x358;
        const double var_x366 = var_x361 * var_x365;
        const double var_x367 = -var_x358;
        const double var_x368 = 0.99990000999900008 + var_x367;
        const double var_x369 = var_x362 * var_x368;
        const double var_x370 = -1.0 - var_x369;
        const double var_x371 = var_x362 * var_x365;
        const double var_x372 = 9.0720000000000001e-12 * var_x319 * var_x352 / pow((1 - 0.69999999999999996 * var_x344), 2);
        const double var_x373 = var_x365 * var_x372;
        const double var_x374 = var_x359 * var_x372;
        const double var_x375 = 1.0 + var_x29 - var_chaste_interface__ICaL__C - var_chaste_interface__ICaL__CI - var_chaste_interface__ICaL__CI_star - var_chaste_interface__ICaL__C_star - var_chaste_interface__ICaL__OI;
        const double var_x376 = -var_x371;
        const double var_x377 = var_x356 + var_x376;
        const double var_x378 = 1 / var_x347;
        const double var_x379 = 1 / var_x365;
        const double var_x380 = var_x344 * var_x368 * var_x378 * var_x379;
        const double var_x381 = 7.9999999999999996e-7 * var_x321 * var_x380;
        const double var_x382 = var_x336 * var_x378 * var_x379;
        const double var_x383 = var_x321 * var_x344;
        const double var_x384 = 9.9990000999900006e-7 * var_x382 * var_x383;
        const double var_x385 = var_x336 * var_x368 * var_x383;
        const double var_x386 = 1.2499999999999999e-6 * var_x379 * var_x385 / pow((1 - var_x309), 2);
        const double var_x387 = 1.0001e-6 * var_x378 * var_x385 / pow((0.0001 + var_x309), 2);
        const double var_x388 = var_x322 + var_x381 + var_x386 - var_x384 - var_x387 + var_x317 * (-0.20000000000000001 + var_x346);
        const double var_x389 = var_x317 * var_x347;
        const double var_x390 = 3.0000000000000001e-6 * var_x336 * var_x380;
        const double var_x391 = -var_x351 - var_x390;
        const double var_x392 = 9.7200000000000002e-16 * var_x352 * var_x368 * var_x382;
        const double var_x393 = var_x392 * var_chaste_interface__ICaL__CI;
        const double var_x394 = -9.9990000999900015e-5 + var_x367;
        const double var_x395 = var_x368 * var_chaste_interface__ICaL__C_star;
        const double var_x396 = (var_chaste_interface__membrane__Vm >= -47.130001) && (var_chaste_interface__membrane__Vm <= -47.129999000000005);
        const double var_x397 = -0.10000000000000001 * var_chaste_interface__membrane__Vm;
        const double var_x398 = -4.7130000000000001 + var_x397;
        const double var_x399 = exp(var_x398);
        const double var_x400 = -1.0 + var_x399;
        const double var_x401 = 1 / var_x400;
        const double var_x402 = ((var_x396) ? (0.16) : (-0.32000000000000001 * var_x401 + 0.32000000000000001 * var_x398 * var_x399 / pow(var_x400, 2)));
        const double var_x403 = exp(-0.090909090909090912 * var_chaste_interface__membrane__Vm);
        const double var_x404 = 0.0072727272727272727 * var_x403;
        const double var_x405 = -((var_x396) ? (10.7408 + 0.16 * var_chaste_interface__membrane__Vm) : (3.1999999999999997 * var_x398 * var_x401)) - 0.080000000000000002 * var_x403;
        const double var_x406 = var_chaste_interface__membrane__Vm >= -40.0;
        const double var_x407 = exp(-11.764705882352942 - 0.14705882352941177 * var_chaste_interface__membrane__Vm);
        const double var_x408 = exp(-0.96036036036036043 - 0.0900900900900901 * var_chaste_interface__membrane__Vm);
        const double var_x409 = 1.0 + var_x408;
        const double var_x410 = exp(0.079000000000000001 * var_chaste_interface__membrane__Vm);
        const double var_x411 = exp(0.34999999999999998 * var_chaste_interface__membrane__Vm);
        const double var_x412 = exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane__Vm);
        const double var_x413 = 1.0 + var_x412;
        const double var_x414 = 1 / var_x413;
        const double var_x415 = exp(0.24440000000000001 * var_chaste_interface__membrane__Vm);
        const double var_x416 = exp(-0.043909999999999998 * var_chaste_interface__membrane__Vm);
        const double var_x417 = -127140.0 * var_x415 - 6.9480000000000006e-5 * var_x416;
        const double var_x418 = var_x414 * var_x417;
        const double var_x419 = 37.780000000000001 + var_chaste_interface__membrane__Vm;
        const double var_x420 = exp(-3.2000000000000002 + var_x397);
        const double var_x421 = 1.0 + var_x420;
        const double var_x422 = exp(-2.5349999999999999e-7 * var_chaste_interface__membrane__Vm);
        const double var_x423 = var_x422 / var_x421;
        const double var_x424 = exp(-5.5312920000000005 - 0.13780000000000001 * var_chaste_interface__membrane__Vm);
        const double var_x425 = 1.0 + var_x424;
        const double var_x426 = exp(-0.01052 * var_chaste_interface__membrane__Vm);
        const double var_x427 = var_x426 / var_x425;
        const double var_x428 = exp(14.918032786885247 + 0.16393442622950821 * var_chaste_interface__membrane__Vm);
        const double var_x429 = exp(-2.3729411764705883 - 0.23529411764705882 * var_chaste_interface__membrane__Vm);
        const double var_x430 = 1.0 + var_x429;
        const double var_x431 = (var_chaste_interface__membrane__Vm >= 1.7383992647058824) && (var_chaste_interface__membrane__Vm <= 1.7384007352941175);
        const double var_x432 = 0.2364224 - 0.13600000000000001 * var_chaste_interface__membrane__Vm;
        const double var_x433 = exp(var_x432);
        const double var_x434 = -1.0 + var_x433;
        const double var_x435 = 1 / var_x434;
        const double var_x436 = (var_chaste_interface__membrane__Vm >= -38.360800657030218) && (var_chaste_interface__membrane__Vm <= -38.360799342969777);
        const double var_x437 = 5.8385137599999997 + 0.1522 * var_chaste_interface__membrane__Vm;
        const double var_x438 = exp(var_x437);
        const double var_x439 = -1.0 + var_x438;
        const double var_x440 = 1 / var_x439;
        const double var_x441 = ((var_x431) ? (0.0038902447058823523 + 0.00029999999999999997 * var_chaste_interface__membrane__Vm) : (0.004411764705882352 * var_x432 * var_x435));
        const double var_x442 = ((var_x436) ? (-0.0037830293298291716 - 0.00014999999999999999 * var_chaste_interface__membrane__Vm) : (0.0019710906701708277 * var_x437 * var_x440));
        const double var_x443 = exp(-1.3230057479321462 - 0.14019346698443852 * var_chaste_interface__membrane__Vm);
        const double var_x444 = 1.0 + var_x443;
        const double var_x445 = 0.034035137876343539 * var_chaste_interface__membrane__Vm;
        const double var_x446 = exp(0.62658348478969694 - var_x445);
        const double var_x447 = 1.0 + var_x446;
        const double var_x448 = exp(3.403513787634354 + var_x445);
        const double var_x449 = 1.0 + var_x448;
        const double var_x450 = 3.5 / var_x449;
        const double var_x451 = 0.82719827942757873 / var_x447;
        const double var_x452 = 0.20000000000000001 * var_chaste_interface__membrane__Vm;
        const double var_x453 = exp(11.6 + var_x452);
        const double var_x454 = 1.0 + var_x453;
        const double var_x455 = var_x453 / pow(var_x454, 2);
        const double var_x456 = 0.0050000000000000001 * var_x455;
        const double var_x457 = exp(-2.1111111111111112 - 0.1111111111111111 * var_chaste_interface__membrane__Vm);
        const double var_x458 = 1.0 + var_x457;
        const double var_x459 = var_x457 / pow(var_x458, 2);
        const double var_x460 = 0.011343308638950427 * var_x459;
        const double var_x461 = 1 / var_x454;
        const double var_x462 = 0.025000000000000001 * var_x461;
        const double var_x463 = 1 / var_x458;
        const double var_x464 = -0.10208977775055385 * var_x463;
        const double var_x465 = exp(12.0 + var_x452);
        const double var_x466 = 1.0 + var_x465;
        const double var_x467 = var_chaste_interface__ICaL__O + var_chaste_interface__ICaL__O_star;
        const double var_x468 = 1 / var_chaste_interface__Ca__Ca_JSR;
        const double var_x469 = 1.0 + 0.0123 * var_x468;
        const double var_x470 = pow(var_x468, 8.0);
        const double var_x471 = 1.0 + var_x470;
        const double var_x472 = 1 / var_x471;
        const double var_x473 = var_x469 * var_x472 * NV_Ith_S(mParameters, 1);
        const double var_x474 = var_x467 * var_x473;
        const double var_x475 = -var_x163 * var_x473;
        const double var_x476 = 1 / var_x224;
        const double var_x477 = pow(var_x476, 10.0);
        const double var_x478 = 1.0 + 2.9619676669542428e-6 * var_x477;
        const double var_x479 = 1 / var_x478;
        const double var_x480 = 4.75 + 4.75 * var_x479;
        const double var_x481 = 1 / var_x480;
        const double var_x482 = var_x469 * var_x481;
        const double var_x483 = -var_chaste_interface__Irel__Irel;
        const double var_x484 = var_x163 * var_x467 * NV_Ith_S(mParameters, 1);
        const double var_x485 = var_x472 * var_x484;
        const double var_x486 = var_x483 - var_x480 * var_x485;
        const double var_x487 = var_x469 * var_x486 / pow((1 + var_x479), 2);
        const double var_x488 = var_x476 * var_x477 / pow(var_x478, 2);
        const double var_x489 = var_x237 * var_x488;
        const double var_x490 = var_x482 * var_x485;
        const double var_x491 = var_x488 * (-1 + var_x220);
        const double var_x492 = 0.80000000000000004 + var_chaste_interface__Ca__Ca_JSR;
        const double var_x493 = pow(var_x492, (-2));
        const double var_x494 = 1 / (1.0 + 8.0 * var_x493);
        const double var_x495 = 0.040000000000000001 * var_x494;
        const double var_x496 = 0.0086999999999999994 + var_chaste_interface__Ca__Ca_ss_sr;
        const double var_x497 = 0.00087000000000000001 + var_chaste_interface__Ca__Ca_ss_sr;
        const double var_x498 = 1.0 + 0.0097788000000000007 / pow(var_x496, 2) + 4.0890000000000003e-5 / pow(var_x497, 2);
        const double var_x499 = 1 / var_x498;
        const double var_x500 = var_x499;
        const double var_x501 = 9.3214219101444593e-16 * var_x183;
        const double var_x502 = 0.010458526290002684 * var_chaste_interface__ICaL__O + 0.010458526290002684 * var_chaste_interface__ICaL__O_star;
        const double var_x503 = 0.0086999999999999994 + var_chaste_interface__Ca__Ca_ss_CaL;
        const double var_x504 = 0.00087000000000000001 + var_chaste_interface__Ca__Ca_ss_CaL;
        const double var_x505 = 1.0 + 0.0097788000000000007 / pow(var_x503, 2) + 4.0890000000000003e-5 / pow(var_x504, 2);
        const double var_x506 = 1 / var_x505;
        const double var_x507 = var_x506;
        const double var_x508 = 0.010458526290002684 * var_x163;
        const double var_x509 = -var_x506 * var_x508;
        const double var_x510 = 3.299618375272375e-16 * var_x156;
        const double var_x511 = 8.2490459381809375e-17 * var_x183;
        const double var_x512 = log(100.0 * var_x202);
        const double var_x513 = var_x166 + var_x512;
        const double var_x514 = pow(var_x513, 4);
        const double var_x515 = 7.2099425022651882e-9 * pow(var_x513, 7) / pow((1 + 0.0085580149227345564 * var_x514), 2);
        const double var_x516 = 50.122574928945262 * pow(var_x513, 3) / (59494197.640692554 + 509152.231225166 * var_x514);
        const double var_x517 = var_x165 * var_x515 - var_x165 * var_x516;
        const double var_x518 = var_x202 * var_x515 - var_x202 * var_x516;
        const double var_x519 = 2.796426573043338e-15 * var_x183;
        const double var_x520 = var_x67 + 26.712338705498265 * var_x512;
        const double var_x521 = 0.00047280839508731927 / (87.825100000000006 + var_x520);
        const double var_x522 = 6.1298221377044294e-8 * var_x520 / pow((1 + 0.30415380916729118 * var_x512 + 0.30415380916729118 * var_x66), 2);
        const double var_x523 = var_x202 * var_x522 - var_x202 * var_x521;
        const double var_x524 = var_x522 * var_x65 - var_x521 * var_x65;
        const double var_x525 = 0.0020917052580005369 - 0.0020917052580005369 * var_x45;
        const double var_x526 = var_x525 * var_chaste_interface__Ito2_i2f_gate__i2f;
        const double var_x527 = (-6.1702220000015831e-5 - 3.7021332000009499e-5 * var_x52) * NV_Ith_S(mParameters, 16);
        const double var_x528 = var_x48 * var_x527;
        const double var_x529 = 2.6552407831565281e-5 * var_x63;
        const double var_x530 = 2.6031772383887529e-5 * var_x127;
        const double var_x531 = -var_x159 * var_x527;
        const double var_x532 = var_x158 * var_x528;
        const double var_x533 = 0.0025000000000000005 * var_x219;
        
        // Matrix entries
        IJth(rJacobian, 0, 0) = mSetVoltageDerivativeToZero ? 0.0 : (var_x54 - var_x15 - var_x28 - var_x56 - var_x59 - var_x85 - NV_Ith_S(mParameters, 8) + 0.10468673984798647 * var_x122 + 0.027943602786489299 * var_x124 - var_x38 - 0.40000000000000002 * var_x106 - 0.80000000000000004 * var_x119 - 0.0021299433038121651 * var_x141 - 0.16722408026755853 * var_x69 - 0.4389381125701739 * var_x81 - 0.0034980089549690768 * var_x131 - 0.0069960179099381537 * var_x133 - 0.0018181818181818182 * var_x134 + var_x29 * var_x35 + var_x43 * var_x47 - var_x126 * var_x128 - var_x64 * var_chaste_interface__IKr_xr_gate__xr);
        IJth(rJacobian, 1, 0) = var_x215 * (1.2340444000003168e-5 * var_x106 + 4.9361776000012672e-5 * var_x119 + 1.0791745905076373e-7 * var_x131 + 4.3166983620305491e-7 * var_x133 - 3.0851110000007915e-5 * var_x15);
        IJth(rJacobian, 2, 0) = -var_x253 - var_x251 * var_chaste_interface__IKs__C2;
        IJth(rJacobian, 3, 0) = var_x253 + (var_x257 + var_x260) * var_chaste_interface__IKs__C2 - var_x261 * var_chaste_interface__IKs__C3 - var_x263 * var_chaste_interface__IKs__C6;
        IJth(rJacobian, 4, 0) = var_x256 * var_chaste_interface__IKs__C2 + (var_x271 + var_x273) * var_chaste_interface__IKs__C3 - var_x263 * var_chaste_interface__IKs__C7 - var_x274 * var_chaste_interface__IKs__C4;
        IJth(rJacobian, 5, 0) = var_x270 * var_chaste_interface__IKs__C3 + (var_x281 + var_x283) * var_chaste_interface__IKs__C4 - var_x263 * var_chaste_interface__IKs__C8 - var_x284 * var_chaste_interface__IKs__C5;
        IJth(rJacobian, 6, 0) = var_x280 * var_chaste_interface__IKs__C4 + (var_x284 - var_x290) * var_chaste_interface__IKs__C5 - var_x263 * var_chaste_interface__IKs__C9;
        IJth(rJacobian, 7, 0) = var_x259 * var_chaste_interface__IKs__C2 + (var_x257 + var_x263) * var_chaste_interface__IKs__C6 - var_x251 * var_chaste_interface__IKs__C7;
        IJth(rJacobian, 8, 0) = var_x256 * var_chaste_interface__IKs__C6 + var_x272 * var_chaste_interface__IKs__C3 + (var_x260 + var_x263 + var_x271) * var_chaste_interface__IKs__C7 - var_x261 * var_chaste_interface__IKs__C8 - var_x293 * var_chaste_interface__IKs__C10;
        IJth(rJacobian, 9, 0) = var_x270 * var_chaste_interface__IKs__C7 + var_x282 * var_chaste_interface__IKs__C4 + (var_x263 + var_x273 + var_x281) * var_chaste_interface__IKs__C8 - var_x274 * var_chaste_interface__IKs__C9 - var_x293 * var_chaste_interface__IKs__C11;
        IJth(rJacobian, 10, 0) = var_x280 * var_chaste_interface__IKs__C8 + var_x290 * var_chaste_interface__IKs__C5 + (var_x263 + var_x283) * var_chaste_interface__IKs__C9 - var_x293 * var_chaste_interface__IKs__C12;
        IJth(rJacobian, 11, 0) = var_x259 * var_chaste_interface__IKs__C7 + (var_x271 + var_x293) * var_chaste_interface__IKs__C10 - var_x251 * var_chaste_interface__IKs__C11;
        IJth(rJacobian, 12, 0) = var_x270 * var_chaste_interface__IKs__C10 + var_x272 * var_chaste_interface__IKs__C8 + (var_x260 + var_x281 + var_x293) * var_chaste_interface__IKs__C11 - var_x261 * var_chaste_interface__IKs__C12 - var_x296 * var_chaste_interface__IKs__C13;
        IJth(rJacobian, 13, 0) = var_x280 * var_chaste_interface__IKs__C11 + var_x282 * var_chaste_interface__IKs__C9 + (var_x273 + var_x293) * var_chaste_interface__IKs__C12 - var_x296 * var_chaste_interface__IKs__C14;
        IJth(rJacobian, 14, 0) = var_x259 * var_chaste_interface__IKs__C11 + (var_x281 + var_x296) * var_chaste_interface__IKs__C13 - var_x251 * var_chaste_interface__IKs__C14;
        IJth(rJacobian, 15, 0) = -var_x299 + var_x272 * var_chaste_interface__IKs__C12 + var_x280 * var_chaste_interface__IKs__C13 + (var_x260 + var_x296) * var_chaste_interface__IKs__C14;
        IJth(rJacobian, 16, 0) = var_x299 + var_x259 * var_chaste_interface__IKs__C14 - var_x302 * var_chaste_interface__IKs__O1;
        IJth(rJacobian, 17, 0) = (var_x302 - 0.0061916096628293225 * var_x304) * var_chaste_interface__IKs__O1 - 0.00300137636070284 * var_x305 * (0.79405459958640001 - 0.79405459958640001 * var_chaste_interface__IKs__C1 - 0.79405459958640001 * var_chaste_interface__IKs__C10 - 0.79405459958640001 * var_chaste_interface__IKs__C11 - 0.79405459958640001 * var_chaste_interface__IKs__C12 - 0.79405459958640001 * var_chaste_interface__IKs__C13 - 0.79405459958640001 * var_chaste_interface__IKs__C14 - 0.79405459958640001 * var_chaste_interface__IKs__C15 - 0.79405459958640001 * var_chaste_interface__IKs__C2 - 0.79405459958640001 * var_chaste_interface__IKs__C3 - 0.79405459958640001 * var_chaste_interface__IKs__C4 - 0.79405459958640001 * var_chaste_interface__IKs__C5 - 0.79405459958640001 * var_chaste_interface__IKs__C6 - 0.79405459958640001 * var_chaste_interface__IKs__C7 - 0.79405459958640001 * var_chaste_interface__IKs__C8 - 0.79405459958640001 * var_chaste_interface__IKs__C9 - 0.79405459958640001 * var_chaste_interface__IKs__O1);
        IJth(rJacobian, 18, 0) = var_x337 * var_chaste_interface__ICaL__CI + var_x340 * var_chaste_interface__ICaL__O + (var_x323 + var_x335) * var_chaste_interface__ICaL__C - var_x322 * var_chaste_interface__ICaL__CI - var_x331 * var_chaste_interface__ICaL__O;
        IJth(rJacobian, 19, 0) = var_x331 * var_chaste_interface__ICaL__C + var_x334 * var_chaste_interface__ICaL__C + var_x337 * var_chaste_interface__ICaL__OI + (var_x323 + var_x355) * var_chaste_interface__ICaL__O - var_x322 * var_chaste_interface__ICaL__OI;
        IJth(rJacobian, 20, 0) = var_x340 * var_chaste_interface__ICaL__O_star + var_x366 * var_chaste_interface__ICaL__CI_star + (var_x335 + var_x364) * var_chaste_interface__ICaL__C_star - var_x331 * var_chaste_interface__ICaL__O_star - var_x363 * var_chaste_interface__ICaL__CI_star;
        IJth(rJacobian, 21, 0) = var_x331 * var_chaste_interface__ICaL__C_star + var_x334 * var_chaste_interface__ICaL__C_star + var_x366 * var_x375 + (var_x355 + var_x364) * var_chaste_interface__ICaL__O_star - var_x363 * var_x375;
        IJth(rJacobian, 22, 0) = var_x322 * var_chaste_interface__ICaL__C + var_x340 * var_chaste_interface__ICaL__OI + var_x389 * var_chaste_interface__ICaL__C + (var_x335 + var_x388) * var_chaste_interface__ICaL__CI - var_x331 * var_chaste_interface__ICaL__OI;
        IJth(rJacobian, 23, 0) = var_x322 * var_chaste_interface__ICaL__O + var_x331 * var_chaste_interface__ICaL__CI + var_x334 * var_chaste_interface__ICaL__CI + var_x389 * var_chaste_interface__ICaL__O + (var_x355 + var_x388) * var_chaste_interface__ICaL__OI;
        IJth(rJacobian, 24, 0) = var_x340 * var_x375 + var_x361 * var_x395 + var_x363 * var_chaste_interface__ICaL__C_star + var_x384 * var_chaste_interface__ICaL__CI + var_x387 * var_chaste_interface__ICaL__CI + (var_x335 + var_x363 + var_x361 * var_x394) * var_chaste_interface__ICaL__CI_star - var_x331 * var_x375 - var_x381 * var_chaste_interface__ICaL__CI - var_x386 * var_chaste_interface__ICaL__CI;
        IJth(rJacobian, 25, 0) = var_x402 * (1.0 - var_chaste_interface__INa_m_gate__m) + var_x404 * var_chaste_interface__INa_m_gate__m;
        IJth(rJacobian, 26, 0) = (1.0 - var_chaste_interface__INa_h_gate__h) * ((var_x406) ? (0) : (-0.019852941176470591 * var_x407)) - ((var_x406) ? (0.693000693000693 * var_x408 / pow(var_x409, 2)) : (0.28123999999999999 * var_x410 + 108500.0 * var_x411)) * var_chaste_interface__INa_h_gate__h;
        IJth(rJacobian, 27, 0) = (1.0 - var_chaste_interface__INa_j_gate__j) * ((var_x406) ? (0) : (var_x418 + var_x414 * var_x419 * (3.0508668000000001e-6 * var_x416 - 31073.016 * var_x415) - 0.311 * var_x412 * var_x417 * var_x419 / pow(var_x413, 2))) - ((var_x406) ? (-7.6049999999999996e-8 * var_x423 + 0.029999999999999999 * var_x420 * var_x422 / pow(var_x421, 2)) : (-0.001275024 * var_x427 + 0.016701360000000002 * var_x424 * var_x426 / pow(var_x425, 2))) * var_chaste_interface__INa_j_gate__j;
        IJth(rJacobian, 28, 0) = var_x402 * (1.0 - var_chaste_interface__INaL_mL_gate__mL) + var_x404 * var_chaste_interface__INaL_mL_gate__mL;
        IJth(rJacobian, 29, 0) = -0.00027322404371584699 * var_x428 / pow((1.0 + var_x428), 2);
        IJth(rJacobian, 30, 0) = (-var_chaste_interface__IKr_xr_gate__xr + 1 / var_x430) * (((var_x431) ? (0.00029999999999999997) : (-0.00059999999999999995 * var_x435 + 0.00059999999999999995 * var_x432 * var_x433 / pow(var_x434, 2))) + ((var_x436) ? (-0.00014999999999999999) : (0.00029999999999999997 * var_x440 - 0.00029999999999999997 * var_x437 * var_x438 / pow(var_x439, 2)))) + 0.23529411764705882 * var_x429 * (var_x441 + var_x442) / pow(var_x430, 2);
        IJth(rJacobian, 31, 0) = (-var_chaste_interface__Ito1_a_gate__a + 1 / var_x444) * (0.028153807491391791 * var_x446 / pow(var_x447, 2) - 0.11912298256720238 * var_x448 / pow(var_x449, 2)) + 0.14019346698443852 * var_x443 * (var_x450 + var_x451) / pow(var_x444, 2);
        IJth(rJacobian, 32, 0) = -var_x456 * (1.0 - var_chaste_interface__Ito1_i1f_gate__i1f) - var_x460 * var_chaste_interface__Ito1_i1f_gate__i1f;
        IJth(rJacobian, 33, 0) = -var_x460 * var_chaste_interface__Ito1_i1s_gate__i1s - 0.00080000000000000004 * var_x465 * (1.0 - var_chaste_interface__Ito1_i1s_gate__i1s) / pow(var_x466, 2);
        IJth(rJacobian, 34, 0) = -0.00062500000000000001 * var_x455 / (var_x462 + 0.20000000000000001 * var_x463) + 0.078125 * var_x461 * (var_x456 - 0.022222222222222223 * var_x459) / pow((var_x463 + 0.125 * var_x461), 2);
        IJth(rJacobian, 35, 0) = -var_x35 * var_x474;
        IJth(rJacobian, 38, 0) = -var_x500 * (-0.0004183410516001074 * var_x106 - 3.6584018618208908e-6 * var_x131);
        IJth(rJacobian, 39, 0) = -var_x35 * var_x502 * var_x507;
        IJth(rJacobian, 40, 0) = -3.2375237715229119e-7 * var_x131 - 1.2950095086091648e-6 * var_x133 - 6.1702220000015831e-5 * var_x28 - 6.1702220000015831e-5 * var_x56 - 6.1702220000015831e-5 * var_x59 - 3.7021332000009505e-5 * var_x106 - 0.00014808532800003802 * var_x119 - 3.9426669095813636e-7 * var_x141;
        IJth(rJacobian, 41, 0) = -0.0012550231548003222 * var_x106 - 1.0975205585462671e-5 * var_x131;
        IJth(rJacobian, 42, 0) = 6.1702220000015831e-5 * NV_Ith_S(mParameters, 8);
        IJth(rJacobian, 43, 0) = var_x43 * var_x526;
        IJth(rJacobian, 44, 0) = var_x528 + 2.6284446063875757e-7 * var_x141 + 1.7241823267250181e-6 * var_x124 + 6.4594042531848857e-6 * var_x122 - 1.0318096989969203e-5 * var_x69 - 6.1702220000015831e-5 * var_x38 - 6.1702220000015831e-5 * var_x85 - 2.7083455988196588e-5 * var_x81 - 1.1218585454548334e-7 * var_x134 - var_x126 * var_x530 - var_x529 * var_chaste_interface__IKr_xr_gate__xr;
        IJth(rJacobian, 0, 1) = mSetVoltageDerivativeToZero ? 0.0 : (var_x148 - var_x144 - var_x146 + 0.80000000000000004 * var_x150 - 2.5000000000000002e-8 * var_x152 - 5.4447296618926212e-7 * var_x160 - var_x153 * var_x157);
        IJth(rJacobian, 1, 1) = var_x215 * (-0.14749262536873156 + var_x232 - var_x216 - var_x230 + 1.5425555000003961e-12 * var_x152 + 3.0851110000007915e-5 * var_x148 - 3.0851110000007915e-5 * var_x144 + var_x153 * var_x233 - var_x149 * var_x234) + (0.00023800000000000004 / pow(var_x212, 3) + 7.0000000000000007e-5 / pow(var_x145, 3)) * (0.14749262536873156 * var_chaste_interface__Ca__Ca_ss_sr + 1.2340444000003168e-5 * var_x236 - 0.14749262536873156 * var_chaste_interface__Ca__Ca_i - 3.0851110000007915e-5 * ((var_x5) ? (var_x10 * var_x162) : (var_x11 * var_chaste_interface__membrane__Vm)) + var_x132 * var_x234 + var_x235 * var_chaste_interface__Ca__Ca_NSR - var_x216 * var_chaste_interface__Ca__Ca_i - var_x230 * var_chaste_interface__Ca__Ca_i) / pow(var_x213, 2);
        IJth(rJacobian, 37, 1) = var_x229 - var_x231;
        IJth(rJacobian, 38, 1) = 5.0 * var_x499;
        IJth(rJacobian, 40, 1) = 0.00014808532800003802 * var_x150 - 4.6276665000011881e-12 * var_x152 - var_x153 * var_x510;
        IJth(rJacobian, 44, 1) = -3.3595190743871034e-11 * var_x160;
        IJth(rJacobian, 0, 2) = mSetVoltageDerivativeToZero ? 0.0 : (var_x161);
        IJth(rJacobian, 2, 2) = -var_x254;
        IJth(rJacobian, 3, 2) = var_x254;
        IJth(rJacobian, 17, 2) = var_x306;
        IJth(rJacobian, 44, 2) = var_x531;
        IJth(rJacobian, 0, 3) = mSetVoltageDerivativeToZero ? 0.0 : (var_x161);
        IJth(rJacobian, 2, 3) = var_x255;
        IJth(rJacobian, 3, 3) = var_x265 + var_x267;
        IJth(rJacobian, 4, 3) = var_x264;
        IJth(rJacobian, 7, 3) = var_x266;
        IJth(rJacobian, 17, 3) = var_x306;
        IJth(rJacobian, 44, 3) = var_x531;
        IJth(rJacobian, 0, 4) = mSetVoltageDerivativeToZero ? 0.0 : (var_x161);
        IJth(rJacobian, 3, 4) = var_x268;
        IJth(rJacobian, 4, 4) = var_x276 + var_x278;
        IJth(rJacobian, 5, 4) = var_x275;
        IJth(rJacobian, 8, 4) = var_x277;
        IJth(rJacobian, 17, 4) = var_x306;
        IJth(rJacobian, 44, 4) = var_x531;
        IJth(rJacobian, 0, 5) = mSetVoltageDerivativeToZero ? 0.0 : (var_x161);
        IJth(rJacobian, 4, 5) = var_x279;
        IJth(rJacobian, 5, 5) = var_x286 + var_x288;
        IJth(rJacobian, 6, 5) = var_x285;
        IJth(rJacobian, 9, 5) = var_x287;
        IJth(rJacobian, 17, 5) = var_x306;
        IJth(rJacobian, 44, 5) = var_x531;
        IJth(rJacobian, 0, 6) = mSetVoltageDerivativeToZero ? 0.0 : (var_x161);
        IJth(rJacobian, 5, 6) = var_x289;
        IJth(rJacobian, 6, 6) = -var_x289 - var_x291;
        IJth(rJacobian, 10, 6) = var_x291;
        IJth(rJacobian, 17, 6) = var_x306;
        IJth(rJacobian, 44, 6) = var_x531;
        IJth(rJacobian, 0, 7) = mSetVoltageDerivativeToZero ? 0.0 : (var_x161);
        IJth(rJacobian, 3, 7) = var_x269;
        IJth(rJacobian, 7, 7) = var_x265 + var_x292;
        IJth(rJacobian, 8, 7) = var_x264;
        IJth(rJacobian, 17, 7) = var_x306;
        IJth(rJacobian, 44, 7) = var_x531;
        IJth(rJacobian, 0, 8) = mSetVoltageDerivativeToZero ? 0.0 : (var_x161);
        IJth(rJacobian, 4, 8) = var_x269;
        IJth(rJacobian, 7, 8) = var_x255;
        IJth(rJacobian, 8, 8) = var_x267 + var_x276 + var_x292;
        IJth(rJacobian, 9, 8) = var_x275;
        IJth(rJacobian, 11, 8) = var_x266;
        IJth(rJacobian, 17, 8) = var_x306;
        IJth(rJacobian, 44, 8) = var_x531;
        IJth(rJacobian, 0, 9) = mSetVoltageDerivativeToZero ? 0.0 : (var_x161);
        IJth(rJacobian, 5, 9) = var_x269;
        IJth(rJacobian, 8, 9) = var_x268;
        IJth(rJacobian, 9, 9) = var_x278 + var_x286 + var_x292;
        IJth(rJacobian, 10, 9) = var_x285;
        IJth(rJacobian, 12, 9) = var_x277;
        IJth(rJacobian, 17, 9) = var_x306;
        IJth(rJacobian, 44, 9) = var_x531;
        IJth(rJacobian, 0, 10) = mSetVoltageDerivativeToZero ? 0.0 : (var_x161);
        IJth(rJacobian, 6, 10) = var_x269;
        IJth(rJacobian, 9, 10) = var_x279;
        IJth(rJacobian, 10, 10) = var_x288 + var_x292;
        IJth(rJacobian, 13, 10) = var_x287;
        IJth(rJacobian, 17, 10) = var_x306;
        IJth(rJacobian, 44, 10) = var_x531;
        IJth(rJacobian, 0, 11) = mSetVoltageDerivativeToZero ? 0.0 : (var_x161);
        IJth(rJacobian, 8, 11) = var_x294;
        IJth(rJacobian, 11, 11) = var_x276 + var_x295;
        IJth(rJacobian, 12, 11) = var_x275;
        IJth(rJacobian, 17, 11) = var_x306;
        IJth(rJacobian, 44, 11) = var_x531;
        IJth(rJacobian, 0, 12) = mSetVoltageDerivativeToZero ? 0.0 : (var_x161);
        IJth(rJacobian, 9, 12) = var_x294;
        IJth(rJacobian, 11, 12) = var_x255;
        IJth(rJacobian, 12, 12) = var_x267 + var_x286 + var_x295;
        IJth(rJacobian, 13, 12) = var_x285;
        IJth(rJacobian, 14, 12) = var_x266;
        IJth(rJacobian, 17, 12) = var_x306;
        IJth(rJacobian, 44, 12) = var_x531;
        IJth(rJacobian, 0, 13) = mSetVoltageDerivativeToZero ? 0.0 : (var_x161);
        IJth(rJacobian, 10, 13) = var_x294;
        IJth(rJacobian, 12, 13) = var_x268;
        IJth(rJacobian, 13, 13) = var_x278 + var_x295;
        IJth(rJacobian, 15, 13) = var_x277;
        IJth(rJacobian, 17, 13) = var_x306;
        IJth(rJacobian, 44, 13) = var_x531;
        IJth(rJacobian, 0, 14) = mSetVoltageDerivativeToZero ? 0.0 : (var_x161);
        IJth(rJacobian, 12, 14) = var_x297;
        IJth(rJacobian, 14, 14) = var_x286 + var_x298;
        IJth(rJacobian, 15, 14) = var_x285;
        IJth(rJacobian, 17, 14) = var_x306;
        IJth(rJacobian, 44, 14) = var_x531;
        IJth(rJacobian, 0, 15) = mSetVoltageDerivativeToZero ? 0.0 : (var_x161);
        IJth(rJacobian, 13, 15) = var_x297;
        IJth(rJacobian, 14, 15) = var_x255;
        IJth(rJacobian, 15, 15) = var_x267 + var_x298;
        IJth(rJacobian, 16, 15) = var_x266;
        IJth(rJacobian, 17, 15) = var_x306;
        IJth(rJacobian, 44, 15) = var_x531;
        IJth(rJacobian, 0, 16) = mSetVoltageDerivativeToZero ? 0.0 : (var_x161);
        IJth(rJacobian, 15, 16) = var_x300;
        IJth(rJacobian, 16, 16) = -0.089538306411019994 - var_x300;
        IJth(rJacobian, 17, 16) = 0.089538306411019994 + var_x306;
        IJth(rJacobian, 44, 16) = var_x531;
        IJth(rJacobian, 16, 17) = var_x303;
        IJth(rJacobian, 17, 17) = var_x306 - var_x303 - 0.58638228663014003 * var_x304;
        IJth(rJacobian, 18, 18) = var_x342 + var_x349;
        IJth(rJacobian, 19, 18) = var_x341;
        IJth(rJacobian, 20, 18) = var_x345;
        IJth(rJacobian, 21, 18) = var_x376;
        IJth(rJacobian, 22, 18) = var_x348;
        IJth(rJacobian, 23, 18) = -9.9999999999999995e-7;
        IJth(rJacobian, 24, 18) = var_x356;
        IJth(rJacobian, 0, 19) = mSetVoltageDerivativeToZero ? 0.0 : (var_x164);
        IJth(rJacobian, 18, 19) = var_x350;
        IJth(rJacobian, 19, 19) = var_x349 + var_x356;
        IJth(rJacobian, 21, 19) = var_x345 + var_x376;
        IJth(rJacobian, 23, 19) = -9.9999999999999995e-7 + var_x348;
        IJth(rJacobian, 24, 19) = var_x356;
        IJth(rJacobian, 35, 19) = var_x475;
        IJth(rJacobian, 39, 19) = var_x509;
        IJth(rJacobian, 18, 20) = 1.0;
        IJth(rJacobian, 20, 20) = var_x342 + var_x370;
        IJth(rJacobian, 21, 20) = var_x341 + var_x376;
        IJth(rJacobian, 23, 20) = -9.9999999999999995e-7;
        IJth(rJacobian, 24, 20) = var_x356 + var_x369;
        IJth(rJacobian, 0, 21) = mSetVoltageDerivativeToZero ? 0.0 : (var_x164);
        IJth(rJacobian, 19, 21) = 1.0;
        IJth(rJacobian, 20, 21) = var_x350;
        IJth(rJacobian, 21, 21) = var_x370 + var_x377;
        IJth(rJacobian, 23, 21) = -9.9999999999999995e-7;
        IJth(rJacobian, 24, 21) = var_x356;
        IJth(rJacobian, 35, 21) = var_x475;
        IJth(rJacobian, 39, 21) = var_x509;
        IJth(rJacobian, 18, 22) = var_x351;
        IJth(rJacobian, 21, 22) = var_x376;
        IJth(rJacobian, 22, 22) = var_x342 + var_x391;
        IJth(rJacobian, 23, 22) = -9.9999999999999995e-7 + var_x341;
        IJth(rJacobian, 24, 22) = var_x356 + var_x390;
        IJth(rJacobian, 19, 23) = var_x351;
        IJth(rJacobian, 21, 23) = var_x376;
        IJth(rJacobian, 22, 23) = var_x350;
        IJth(rJacobian, 23, 23) = -9.9999999999999995e-7 + var_x356 + var_x391;
        IJth(rJacobian, 24, 23) = var_x356;
        IJth(rJacobian, 20, 24) = var_x371;
        IJth(rJacobian, 21, 24) = var_x376;
        IJth(rJacobian, 22, 24) = 9.9999999999999995e-7;
        IJth(rJacobian, 23, 24) = -9.9999999999999995e-7;
        IJth(rJacobian, 24, 24) = -9.9999999999999995e-7 + var_x342 + var_x377;
        IJth(rJacobian, 0, 25) = mSetVoltageDerivativeToZero ? 0.0 : (-3 * var_x169);
        IJth(rJacobian, 25, 25) = var_x405;
        IJth(rJacobian, 40, 25) = -0.00018510666000004749 * var_x169;
        IJth(rJacobian, 0, 26) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x170);
        IJth(rJacobian, 26, 26) = -((var_x406) ? (0) : (0.13500000000000001 * var_x407)) - ((var_x406) ? (7.6923076923076916 / var_x409) : (310000.0 * var_x411 + 3.5600000000000001 * var_x410));
        IJth(rJacobian, 40, 26) = -6.1702220000015831e-5 * var_x170;
        IJth(rJacobian, 0, 27) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x171);
        IJth(rJacobian, 27, 27) = -((var_x406) ? (0) : (var_x418 * var_x419)) - ((var_x406) ? (0.29999999999999999 * var_x423) : (0.1212 * var_x427));
        IJth(rJacobian, 40, 27) = -6.1702220000015831e-5 * var_x171;
        IJth(rJacobian, 0, 28) = mSetVoltageDerivativeToZero ? 0.0 : (-3 * var_x172);
        IJth(rJacobian, 28, 28) = var_x405;
        IJth(rJacobian, 40, 28) = -0.00018510666000004749 * var_x172;
        IJth(rJacobian, 0, 29) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x173);
        IJth(rJacobian, 29, 29) = -0.0016666666666666668;
        IJth(rJacobian, 40, 29) = -6.1702220000015831e-5 * var_x173;
        IJth(rJacobian, 0, 30) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x64 * var_x68);
        IJth(rJacobian, 30, 30) = -var_x441 - var_x442;
        IJth(rJacobian, 44, 30) = -var_x529 * var_x68;
        IJth(rJacobian, 0, 31) = mSetVoltageDerivativeToZero ? 0.0 : (-3 * var_x175);
        IJth(rJacobian, 31, 31) = -var_x450 - var_x451;
        IJth(rJacobian, 44, 31) = -0.00018510666000004749 * var_x175;
        IJth(rJacobian, 0, 32) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x176);
        IJth(rJacobian, 32, 32) = var_x464 - var_x462;
        IJth(rJacobian, 44, 32) = -6.1702220000015831e-5 * var_x176;
        IJth(rJacobian, 0, 33) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x177);
        IJth(rJacobian, 33, 33) = var_x464 - 0.0040000000000000001 / var_x466;
        IJth(rJacobian, 44, 33) = -6.1702220000015831e-5 * var_x177;
        IJth(rJacobian, 0, 34) = mSetVoltageDerivativeToZero ? 0.0 : (var_x178 * var_x46);
        IJth(rJacobian, 34, 34) = -0.125;
        IJth(rJacobian, 43, 34) = var_x178 * var_x525;
        IJth(rJacobian, 0, 35) = mSetVoltageDerivativeToZero ? 0.0 : (-0.32000000000000006 * var_x179);
        IJth(rJacobian, 35, 35) = -var_x482;
        IJth(rJacobian, 36, 35) = -var_x494;
        IJth(rJacobian, 38, 35) = 0.23999999999999996 * var_x499;
        IJth(rJacobian, 43, 35) = 0.00066934568256017191 * var_x179;
        IJth(rJacobian, 35, 36) = -0.0123 * var_x481 * var_x486 / pow(var_chaste_interface__Ca__Ca_JSR, 2) - 8.0 * var_x468 * var_x469 * var_x470 * var_x484 / pow(var_x471, 2);
        IJth(rJacobian, 36, 36) = -var_x495 + 0.25 * (var_x483 + 0.040000000000000001 * var_chaste_interface__Ca__Ca_NSR - 0.040000000000000001 * var_chaste_interface__Ca__Ca_JSR) / (pow(var_x492, 3) * pow((0.125 + var_x493), 2));
        IJth(rJacobian, 37, 36) = 0.0034782608695652171;
        IJth(rJacobian, 1, 37) = var_x214 * var_x235;
        IJth(rJacobian, 36, 37) = var_x495;
        IJth(rJacobian, 37, 37) = -0.0034782608695652171 - 0.066666666666666666 * NV_Ith_S(mParameters, 0);
        IJth(rJacobian, 0, 38) = mSetVoltageDerivativeToZero ? 0.0 : (0.40000000000000002 * var_x180 - 1.2500000000000001e-8 * var_x182 - var_x153 * var_x184);
        IJth(rJacobian, 1, 38) = var_x215 * (0.14749262536873156 + 3.8563887500009902e-13 * var_x182 - 1.2340444000003168e-5 * var_x180 - 0.081415929203539822 * var_x242 + var_x153 * var_x244 - var_x232 * var_x243);
        IJth(rJacobian, 35, 38) = -4.6767910530856466e-10 * var_x487 * var_x489 - 1.0552009813524491e-8 * var_x489 * var_x490;
        IJth(rJacobian, 37, 38) = var_x242 + var_x231 * var_x243;
        IJth(rJacobian, 38, 38) = -var_x500 * (5.5 + 0.0004183410516001074 * var_x180 - 1.3073157862503357e-11 * var_x182 - var_x153 * var_x501) - (0.019557600000000001 / pow(var_x496, 3) + 8.1780000000000006e-5 / pow(var_x497, 3)) * (5.5 * var_chaste_interface__Ca__Ca_ss_sr - 0.5 * var_chaste_interface__Ca__Ca_ss_CaL - 0.23999999999999996 * var_chaste_interface__Irel__Irel - 5.0 * var_chaste_interface__Ca__Ca_i - 0.0004183410516001074 * var_x236) / pow(var_x498, 2);
        IJth(rJacobian, 39, 38) = 5.0 * var_x506;
        IJth(rJacobian, 40, 38) = 3.7021332000009505e-5 * var_x180 - 1.156916625000297e-12 * var_x182 - var_x153 * var_x511;
        IJth(rJacobian, 41, 38) = 0.0012550231548003222 * var_x180 - 3.9219473587510072e-11 * var_x182 - var_x153 * var_x519;
        IJth(rJacobian, 45, 38) = 3.7500000000000005e-6 * var_x224 * var_x237 + 1.8750000000000003e-7 * var_x96 * pow(var_x217, 2) / pow(var_x218, 3);
        IJth(rJacobian, 0, 39) = mSetVoltageDerivativeToZero ? 0.0 : (var_x185 * var_x29);
        IJth(rJacobian, 18, 39) = -var_x354;
        IJth(rJacobian, 19, 39) = -var_x357;
        IJth(rJacobian, 20, 39) = var_x354 + var_x373 * var_chaste_interface__ICaL__CI_star + var_x374 * var_chaste_interface__ICaL__C_star;
        IJth(rJacobian, 21, 39) = var_x357 + var_x373 * var_x375 + var_x374 * var_chaste_interface__ICaL__O_star;
        IJth(rJacobian, 22, 39) = -var_x393;
        IJth(rJacobian, 23, 39) = -var_x392 * var_chaste_interface__ICaL__OI;
        IJth(rJacobian, 24, 39) = var_x393 + var_x372 * var_x395 + var_x372 * var_x394 * var_chaste_interface__ICaL__CI_star;
        IJth(rJacobian, 35, 39) = -var_x185 * var_x474;
        IJth(rJacobian, 38, 39) = 0.5 * var_x499;
        IJth(rJacobian, 39, 39) = -var_x507 * (5.0 + var_x185 * var_x502) - (0.019557600000000001 / pow(var_x503, 3) + 8.1780000000000006e-5 / pow(var_x504, 3)) * (5.0 * var_chaste_interface__Ca__Ca_ss_CaL - 5.0 * var_chaste_interface__Ca__Ca_ss_sr + var_x467 * var_x508) / pow(var_x505, 2);
        IJth(rJacobian, 0, 40) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x186 + 0.065648961871082934 * var_x191 + 0.48963716847178318 * var_x187 - 2.4000000000000004 * var_x198 - 0.17068730086481565 * var_x193 - 26.712338705498265 * var_x188 - 26.712338705498265 * var_x189 - var_x157 * var_x196);
        IJth(rJacobian, 1, 40) = var_x215 * (0.00014808532800003802 * var_x198 + var_x196 * var_x233);
        IJth(rJacobian, 40, 40) = -0.14749262536873156 + var_x517 + 1.2152060064426631e-5 * var_x191 - 0.0016482105995215921 * var_x188 - 0.0016482105995215921 * var_x189 - 3.1595356167509241e-5 * var_x193 - 0.00044425598400011404 * var_x198 - 6.1702220000015831e-5 * var_x186 - var_x196 * var_x510;
        IJth(rJacobian, 41, 40) = 5.0;
        IJth(rJacobian, 42, 40) = var_x517;
        IJth(rJacobian, 44, 40) = 2.1063570778339494e-5 * var_x193 + 0.48963716847178318 * var_x532 - 8.1013733762844218e-6 * var_x191;
        IJth(rJacobian, 0, 41) = mSetVoltageDerivativeToZero ? 0.0 : (-1.2000000000000002 * var_x201 - var_x184 * var_x200);
        IJth(rJacobian, 1, 41) = var_x215 * (3.7021332000009505e-5 * var_x201 + var_x200 * var_x244);
        IJth(rJacobian, 38, 41) = -var_x500 * (-0.0012550231548003222 * var_x201 - var_x200 * var_x501);
        IJth(rJacobian, 40, 41) = 0.14749262536873156 - 0.00011106399600002851 * var_x201 - var_x200 * var_x511;
        IJth(rJacobian, 41, 41) = -5.0 - 0.0037650694644009667 * var_x201 - var_x200 * var_x519;
        IJth(rJacobian, 0, 42) = mSetVoltageDerivativeToZero ? 0.0 : (26.712338705498265 * var_x203 + var_x204 * var_x47);
        IJth(rJacobian, 40, 42) = var_x518;
        IJth(rJacobian, 42, 42) = -0.14749262536873156 + var_x518 + var_x523 - 0.0016482105995215921 * var_x203;
        IJth(rJacobian, 43, 42) = 5.0 + var_x204 * var_x526;
        IJth(rJacobian, 44, 42) = var_x523;
        IJth(rJacobian, 42, 43) = 0.14749262536873156;
        IJth(rJacobian, 43, 43) = -5.0;
        IJth(rJacobian, 0, 44) = mSetVoltageDerivativeToZero ? 0.0 : (2.7964276527937963 * var_x211 + 26.712338705498265 * var_x187 - 11.72506353372661 * var_x206 - 11.495160327182951 * var_x207 - 26.712338705498265 * var_x205 - 26.712338705498265 * var_x210 - var_x128 * var_x209);
        IJth(rJacobian, 42, 44) = var_x524;
        IJth(rJacobian, 44, 44) = var_x524 + 0.00017254579424681073 * var_x211 + 26.712338705498265 * var_x532 - 0.00070927691144329649 * var_x207 - 0.0016482105995215921 * var_x205 - 0.0016482105995215921 * var_x210 - 0.00072346244967216237 * var_x206 - var_x209 * var_x530;
        IJth(rJacobian, 1, 45) = var_x215 * (-0.081415929203539822 * var_x248 - var_x232 * var_x249);
        IJth(rJacobian, 35, 45) = 6.2357214041141957e-6 * var_x487 * var_x491 + 0.00014069346418032653 * var_x490 * var_x491;
        IJth(rJacobian, 37, 45) = var_x248 + var_x231 * var_x249;
        IJth(rJacobian, 45, 45) = -0.00068000000000000005 - var_x224 * var_x533 + var_x217 * var_x245 * var_x533;
    }

    N_Vector Celldecker_2009FromCellMLCvode::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const N_Vector & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__Ca__Ca_i = NV_Ith_S(rY, 1);
        // Units: mM; Initial value: 8.38749860095482e-05
        double var_chaste_interface__IKs__C1 = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.476679784307081
        double var_chaste_interface__IKs__C2 = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.255181042718489
        double var_chaste_interface__IKs__C3 = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.0512272866698557
        double var_chaste_interface__IKs__C4 = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.0045705849736195
        double var_chaste_interface__IKs__C5 = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.000152923243503507
        double var_chaste_interface__IKs__C6 = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.132814156809568
        double var_chaste_interface__IKs__C7 = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.053324572164618
        double var_chaste_interface__IKs__C8 = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.00713656414955778
        double var_chaste_interface__IKs__C9 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.000318368292970148
        double var_chaste_interface__IKs__C10 = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.0138769647384953
        double var_chaste_interface__IKs__C11 = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.00371438476499172
        double var_chaste_interface__IKs__C12 = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.000248553788631871
        double var_chaste_interface__IKs__C13 = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 0.000644426171899078
        double var_chaste_interface__IKs__C14 = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 8.62495047666861e-05
        double var_chaste_interface__IKs__C15 = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 1.12344645485893e-05
        double var_chaste_interface__IKs__O1 = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 1.05292905767805e-05
        double var_chaste_interface__ICaL__O = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 2.26882961412491e-05
        double var_chaste_interface__ICaL__O_star = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 1.23556404128518e-10
        double var_chaste_interface__INa_m_gate__m = NV_Ith_S(rY, 25);
        // Units: dimensionless; Initial value: 0.00101841101248412
        double var_chaste_interface__INa_h_gate__h = NV_Ith_S(rY, 26);
        // Units: dimensionless; Initial value: 0.991354143386887
        double var_chaste_interface__INa_j_gate__j = NV_Ith_S(rY, 27);
        // Units: dimensionless; Initial value: 0.99709036251243
        double var_chaste_interface__INaL_mL_gate__mL = NV_Ith_S(rY, 28);
        // Units: dimensionless; Initial value: 0.00101841101248412
        double var_chaste_interface__INaL_hL_gate__hL = NV_Ith_S(rY, 29);
        // Units: dimensionless; Initial value: 0.319611809402137
        double var_chaste_interface__IKr_xr_gate__xr = NV_Ith_S(rY, 30);
        // Units: dimensionless; Initial value: 4.06959064407486e-06
        double var_chaste_interface__Ito1_a_gate__a = NV_Ith_S(rY, 31);
        // Units: dimensionless; Initial value: 1.76776038804228e-05
        double var_chaste_interface__Ito1_i1f_gate__i1f = NV_Ith_S(rY, 32);
        // Units: dimensionless; Initial value: 0.997976503910799
        double var_chaste_interface__Ito1_i1s_gate__i1s = NV_Ith_S(rY, 33);
        // Units: dimensionless; Initial value: 0.947581184798815
        double var_chaste_interface__Ito2_i2f_gate__i2f = NV_Ith_S(rY, 34);
        // Units: dimensionless; Initial value: 0.996044894628276
        double var_chaste_interface__Irel__Irel = NV_Ith_S(rY, 35);
        // Units: mM_per_ms; Initial value: 0.000714227102027745
        double var_chaste_interface__Ca__Ca_NSR = NV_Ith_S(rY, 37);
        // Units: mM; Initial value: 1.01475649943057
        double var_chaste_interface__Ca__Ca_ss_sr = NV_Ith_S(rY, 38);
        // Units: mM; Initial value: 0.00011296707102434
        double var_chaste_interface__Ca__Ca_ss_CaL = NV_Ith_S(rY, 39);
        // Units: mM; Initial value: 0.000119239795531548
        double var_chaste_interface__Na__Na_i = NV_Ith_S(rY, 40);
        // Units: mM; Initial value: 8.01031392415197
        double var_chaste_interface__Na__Na_ss_sr = NV_Ith_S(rY, 41);
        // Units: mM; Initial value: 8.01033434859049
        double var_chaste_interface__Cl__Cl_i = NV_Ith_S(rY, 42);
        // Units: mM; Initial value: 20.6683603724432
        double var_chaste_interface__K__K_i = NV_Ith_S(rY, 44);
        // Units: mM; Initial value: 144.907134343314
        double var_chaste_interface__CaMK_active__CaMK_trap = NV_Ith_S(rY, 45);
        // Units: dimensionless; Initial value: 0.0114911034744777
        
        // Mathematics
        const double var_CaMK_active__CaMK_0 = 0.050000000000000003; // dimensionless
        const double var_CaMK_active__Km = 0.0015; // mM
        const double var_CaMK_active__CaMK_active = (1.0 - var_chaste_interface__CaMK_active__CaMK_trap) * var_CaMK_active__CaMK_0 / (1.0 + var_CaMK_active__Km / var_chaste_interface__Ca__Ca_ss_sr) + var_chaste_interface__CaMK_active__CaMK_trap; // dimensionless
        const double var_ICaL__gamma_Cai = 1.0; // dimensionless
        const double var_ICaL__gamma_Cao = 0.34100000000000003; // dimensionless
        const double var_ICaL__v0 = 0; // mV
        const double var_ICab__gamma_Ca_i = 1.0; // dimensionless
        const double var_ICab__gamma_Ca_o = 0.34100000000000003; // dimensionless
        const double var_ICab__v0 = 0; // mV
        const double var_IKs__O2 = 1.0 - var_chaste_interface__IKs__C1 - var_chaste_interface__IKs__C10 - var_chaste_interface__IKs__C11 - var_chaste_interface__IKs__C12 - var_chaste_interface__IKs__C13 - var_chaste_interface__IKs__C14 - var_chaste_interface__IKs__C15 - var_chaste_interface__IKs__C2 - var_chaste_interface__IKs__C3 - var_chaste_interface__IKs__C4 - var_chaste_interface__IKs__C5 - var_chaste_interface__IKs__C6 - var_chaste_interface__IKs__C7 - var_chaste_interface__IKs__C8 - var_chaste_interface__IKs__C9 - var_chaste_interface__IKs__O1; // dimensionless
        const double var_IKs__OKs = var_chaste_interface__IKs__O1 + var_IKs__O2; // dimensionless
        const double var_IKs__gKs = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca__Ca_i), 1.3999999999999999))) * NV_Ith_S(mParameters, 16); // mS_per_uF
        const double var_INaCa__KmCa_act = 0.000125; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__denom_1 = 1.0 + pow(var_INaCa__KmCa_act, 2) / pow(var_chaste_interface__Ca__Ca_i, 2); // dimensionless
        const double var_INaCa__denom_ss_1 = 1.0 + pow(var_INaCa__KmCa_act, 2) / pow(var_chaste_interface__Ca__Ca_ss_sr, 2); // dimensionless
        const double var_INaCa__eta = 0.27000000000000002; // dimensionless
        const double var_INaCa__ksat = 0.32000000000000001; // dimensionless
        const double var_INaK__V_half = -92.0; // mV
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__kmnai = 2.6000000000000001; // mM
        const double var_INaK__sigma = 1.0; // dimensionless
        const double var_INab__B = 1.0; // dimensionless
        const double var_INab__v0 = 0; // dimensionless
        const double var_Ileak__nsrbar = 15.0; // mM
        const double var_Ileak__Ileak = var_chaste_interface__Ca__Ca_NSR * NV_Ith_S(mParameters, 0) / var_Ileak__nsrbar; // mM_per_ms
        const double var_IpCa__KmpCa = 0.00050000000000000001; // mM
        const double var_IpCa__IpCa = var_chaste_interface__Ca__Ca_i * NV_Ith_S(mParameters, 10) / (var_chaste_interface__Ca__Ca_i + var_IpCa__KmpCa); // uA_per_uF
        const double var_IpCa__IpCa_converted = HeartConfig::Instance()->GetCapacitance() * var_IpCa__IpCa; // uA_per_cm2
        const double var_Ito2__Ito2_max_scaling_factor = 1.0; // dimensionless
        const double var_Ito2__kCa_ito2 = 0.40000000000000002; // mM_per_ms
        const double var_Ito2__KCa_ito2 = 1.0 - 1 / (1.0 + pow(var_chaste_interface__Irel__Irel, 2) / pow(var_Ito2__kCa_ito2, 2)); // dimensionless
        const double var_Ito2__v0 = 0; // mV
        const double var_Ito2__zCl = -1.0; // dimensionless
        const double var_Iup__delta_iupCaMK_bar = 0.75; // dimensionless
        const double var_Iup__delta_kmPLB_bar = 0.00017000000000000001; // mM
        const double var_Iup__kmCaMK = 0.14999999999999999; // mM
        const double var_Iup__delta_iupCaMK = var_CaMK_active__CaMK_active * var_Iup__delta_iupCaMK_bar / (var_CaMK_active__CaMK_active + var_Iup__kmCaMK); // dimensionless
        const double var_Iup__delta_kmPLB = var_CaMK_active__CaMK_active * var_Iup__delta_kmPLB_bar / (var_CaMK_active__CaMK_active + var_Iup__kmCaMK); // mM
        const double var_Iup__kmup = 0.00092000000000000003; // mM
        const double var_Iup__Iup = (1.0 + var_Iup__delta_iupCaMK) * var_chaste_interface__Ca__Ca_i * NV_Ith_S(mParameters, 2) / (-var_Iup__delta_kmPLB + var_chaste_interface__Ca__Ca_i + var_Iup__kmup); // mM_per_ms
        const double var_INaK__PNa = pow(var_chaste_interface__Na__Na_i, 3) / pow((var_INaK__kmnai + var_chaste_interface__Na__Na_i), 3); // dimensionless
        const double var_IKp__Kp = 1 / (1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_IKr_r_gate__r = 1 / (1.0 + exp(0.64935064935064934 + 0.064935064935064929 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_Ito1__rto1 = exp(0.0018181818181818182 * var_chaste_interface__membrane__Vm); // dimensionless
        const double var_membrane__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_INaCa__denom_3 = pow(var_INaCa__KmNao, 3) * var_chaste_interface__Ca__Ca_i + pow(var_chaste_interface__Na__Na_i, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_chaste_interface__Ca__Ca_i / var_INaCa__KmCai) * NV_Ith_S(mParameters, 3); // mM4
        const double var_INaCa__denom_ss_3 = pow(var_INaCa__KmNao, 3) * var_chaste_interface__Ca__Ca_ss_sr + pow(var_chaste_interface__Na__Na_ss_sr, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_chaste_interface__Ca__Ca_ss_sr / var_INaCa__KmCai) * NV_Ith_S(mParameters, 3); // mM4
        const double var_model_parameters__Cl_o = 100.0; // mM
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_IK1__gK1 = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 4)) * NV_Ith_S(mParameters, 12); // mS_per_uF
        const double var_IKr__gKr = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 4)) * NV_Ith_S(mParameters, 15); // mS_per_uF
        const double var_INaK__PK = NV_Ith_S(mParameters, 4) / (var_INaK__kmko + NV_Ith_S(mParameters, 4)); // dimensionless
        const double var_INaCa__denom_4 = pow(var_chaste_interface__Na__Na_i, 3) * NV_Ith_S(mParameters, 3) + pow(NV_Ith_S(mParameters, 5), 3) * var_chaste_interface__Ca__Ca_i + pow(NV_Ith_S(mParameters, 5), 3) * (1.0 + pow(var_chaste_interface__Na__Na_i, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_INaCa__denom_ss_4 = pow(var_chaste_interface__Na__Na_ss_sr, 3) * NV_Ith_S(mParameters, 3) + pow(NV_Ith_S(mParameters, 5), 3) * var_chaste_interface__Ca__Ca_ss_sr + pow(NV_Ith_S(mParameters, 5), 3) * (1.0 + pow(var_chaste_interface__Na__Na_ss_sr, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_ICaL__B = 2.0 * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T); // per_mV
        const double var_ICaL__A = 4.0 * pow(var_model_parameters__F, 2) * (-var_ICaL__gamma_Cao * NV_Ith_S(mParameters, 3) + var_chaste_interface__Ca__Ca_ss_CaL * var_ICaL__gamma_Cai * exp(2.0 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * NV_Ith_S(mParameters, 6) / (var_ICaL__B * var_model_parameters__R * var_model_parameters__T); // uA_per_uF
        const double var_ICaL__U = (-var_ICaL__v0 + var_chaste_interface__membrane__Vm) * var_ICaL__B; // dimensionless
        const double var_ICaL__ICaL_max = (((var_ICaL__U >= -9.9999999999999995e-8) && (var_ICaL__U <= 9.9999999999999995e-8)) ? ((1.0 - 0.5 * var_ICaL__U) * var_ICaL__A) : (var_ICaL__A * var_ICaL__U / (-1.0 + exp(var_ICaL__U)))); // uA_per_uF
        const double var_ICaL__ICaL = (var_chaste_interface__ICaL__O + var_chaste_interface__ICaL__O_star) * var_ICaL__ICaL_max; // uA_per_uF
        const double var_ICaL__ICaL_converted = HeartConfig::Instance()->GetCapacitance() * var_ICaL__ICaL; // uA_per_cm2
        const double var_ICab__B = 2.0 * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T); // per_mV
        const double var_ICab__A = 4.0 * pow(var_model_parameters__F, 2) * (-var_ICab__gamma_Ca_o * NV_Ith_S(mParameters, 3) + var_chaste_interface__Ca__Ca_i * var_ICab__gamma_Ca_i * exp(2.0 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * NV_Ith_S(mParameters, 7) / (var_ICab__B * var_model_parameters__R * var_model_parameters__T); // uA_per_uF
        const double var_ICab__U = (-var_ICab__v0 + var_chaste_interface__membrane__Vm) * var_ICab__B; // dimensionless
        const double var_ICab__ICab = (((var_ICab__U >= -9.9999999999999995e-8) && (var_ICab__U <= 9.9999999999999995e-8)) ? ((1.0 - 0.5 * var_ICab__U) * var_ICab__A) : (var_ICab__A * var_ICab__U / (-1.0 + exp(var_ICab__U)))); // uA_per_uF
        const double var_ICab__ICab_converted = HeartConfig::Instance()->GetCapacitance() * var_ICab__ICab; // uA_per_cm2
        const double var_INaCa__denom_2 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // dimensionless
        const double var_INaCa__denom_ss_2 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // dimensionless
        const double var_INaCa__num_ss = 0.20000000000000001 * (pow(var_chaste_interface__Na__Na_ss_sr, 3) * NV_Ith_S(mParameters, 3) * exp(var_INaCa__eta * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) - pow(NV_Ith_S(mParameters, 5), 3) * var_chaste_interface__Ca__Ca_ss_sr * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * NV_Ith_S(mParameters, 17); // mM4_uA_per_uF
        const double var_INaCa__INaCa_ss_sr = var_INaCa__num_ss / ((var_INaCa__denom_ss_3 + var_INaCa__denom_ss_4) * var_INaCa__denom_ss_1 * var_INaCa__denom_ss_2); // uA_per_uF
        const double var_INaCa__INaCa_ss_sr_converted = HeartConfig::Instance()->GetCapacitance() * var_INaCa__INaCa_ss_sr; // uA_per_cm2
        const double var_INaCa__numerator = 0.80000000000000004 * (pow(var_chaste_interface__Na__Na_i, 3) * NV_Ith_S(mParameters, 3) * exp(var_INaCa__eta * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) - pow(NV_Ith_S(mParameters, 5), 3) * var_chaste_interface__Ca__Ca_i * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * NV_Ith_S(mParameters, 17); // mM4_uA_per_uF
        const double var_INaCa__INaCa_cai = var_INaCa__numerator / ((var_INaCa__denom_3 + var_INaCa__denom_4) * var_INaCa__denom_1 * var_INaCa__denom_2); // uA_per_uF
        const double var_INaCa__INaCa = var_INaCa__INaCa_cai + var_INaCa__INaCa_ss_sr; // uA_per_uF
        const double var_INaCa__INaCa_converted = HeartConfig::Instance()->GetCapacitance() * var_INaCa__INaCa; // uA_per_cm2
        const double var_INaK__phi = (-var_INaK__V_half + var_chaste_interface__membrane__Vm) * var_INaK__sigma * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T); // dimensionless
        const double var_INaK__fv = 1 / (1.0 + exp(-var_INaK__phi)); // dimensionless
        const double var_INaK__INaK = var_INaK__PK * var_INaK__PNa * var_INaK__fv * NV_Ith_S(mParameters, 18); // uA_per_uF
        const double var_INaK__INaK_converted = HeartConfig::Instance()->GetCapacitance() * var_INaK__INaK; // uA_per_cm2
        const double var_INab__phi = var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T); // dimensionless
        const double var_INab__A = (-NV_Ith_S(mParameters, 5) + var_chaste_interface__Na__Na_i * exp(var_INab__phi)) * NV_Ith_S(mParameters, 9) * var_model_parameters__F / var_INab__B; // uA_per_uF
        const double var_INab__U = (-var_INab__v0 + var_INab__phi) * var_INab__B; // dimensionless
        const double var_INab__INab = (((var_INab__U >= -9.9999999999999995e-8) && (var_INab__U <= 9.9999999999999995e-8)) ? ((1.0 - 0.5 * var_INab__U) * var_INab__A) : (var_INab__A * var_INab__U / (-1.0 + exp(var_INab__U)))); // uA_per_uF
        const double var_INab__INab_converted = HeartConfig::Instance()->GetCapacitance() * var_INab__INab; // uA_per_cm2
        const double var_Ito2__B = var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T); // per_mV
        const double var_Ito2__A = -pow(var_Ito2__zCl, 2) * pow(var_model_parameters__F, 2) * (-var_model_parameters__Cl_o * exp(var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) + var_chaste_interface__Cl__Cl_i) * NV_Ith_S(mParameters, 19) / (var_Ito2__B * var_model_parameters__R * var_model_parameters__T); // uA_per_uF
        const double var_Ito2__U = (-var_Ito2__v0 + var_chaste_interface__membrane__Vm) * var_Ito2__B; // dimensionless
        const double var_Ito2__Ito2_max = (((var_Ito2__U >= -9.9999999999999995e-8) && (var_Ito2__U <= 9.9999999999999995e-8)) ? ((1.0 - 0.5 * var_Ito2__U) * var_Ito2__A) : (var_Ito2__A * var_Ito2__U / (-1.0 + exp(var_Ito2__U)))); // uA_per_uF
        const double var_Ito2__Ito2 = var_Ito2__Ito2_max * var_Ito2__Ito2_max_scaling_factor * var_Ito2__KCa_ito2 * var_chaste_interface__Ito2_i2f_gate__i2f; // uA_per_uF
        const double var_Ito2__Ito2_converted = HeartConfig::Instance()->GetCapacitance() * var_Ito2__Ito2; // uA_per_cm2
        const double var_reversal_potentials__ECl = -var_model_parameters__R * var_model_parameters__T * log(var_model_parameters__Cl_o / var_chaste_interface__Cl__Cl_i) / var_model_parameters__F; // mV
        const double var_IClb__IClb = (-var_reversal_potentials__ECl + var_chaste_interface__membrane__Vm) * NV_Ith_S(mParameters, 8); // uA_per_uF
        const double var_IClb__IClb_converted = HeartConfig::Instance()->GetCapacitance() * var_IClb__IClb; // uA_per_cm2
        const double var_reversal_potentials__EK = var_model_parameters__R * var_model_parameters__T * log(NV_Ith_S(mParameters, 4) / var_chaste_interface__K__K_i) / var_model_parameters__F; // mV
        const double var_IK1_K1_gate__alpha_k1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__Vm - 0.23849999999999999 * var_reversal_potentials__EK)); // dimensionless
        const double var_IK1_K1_gate__beta_k1 = (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__Vm - 0.080320000000000003 * var_reversal_potentials__EK) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__Vm - 0.061749999999999999 * var_reversal_potentials__EK)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__EK - 0.51429999999999998 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_IK1_K1_gate__K1 = var_IK1_K1_gate__alpha_k1 / (var_IK1_K1_gate__alpha_k1 + var_IK1_K1_gate__beta_k1); // dimensionless
        const double var_IK1__IK1 = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IK1__gK1 * var_IK1_K1_gate__K1; // uA_per_uF
        const double var_IK1__IK1_converted = HeartConfig::Instance()->GetCapacitance() * var_IK1__IK1; // uA_per_cm2
        const double var_IKp__IKp = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IKp__Kp * NV_Ith_S(mParameters, 14); // uA_per_uF
        const double var_IKp__IKp_converted = HeartConfig::Instance()->GetCapacitance() * var_IKp__IKp; // uA_per_cm2
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IKr__gKr * var_IKr_r_gate__r * var_chaste_interface__IKr_xr_gate__xr; // uA_per_uF
        const double var_IKr__IKr_converted = HeartConfig::Instance()->GetCapacitance() * var_IKr__IKr; // uA_per_cm2
        const double var_Ito1__Ito1 = pow(var_chaste_interface__Ito1_a_gate__a, 3) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * NV_Ith_S(mParameters, 20) * var_Ito1__rto1 * var_chaste_interface__Ito1_i1f_gate__i1f * var_chaste_interface__Ito1_i1s_gate__i1s; // uA_per_uF
        const double var_Ito1__Ito1_converted = HeartConfig::Instance()->GetCapacitance() * var_Ito1__Ito1; // uA_per_cm2
        const double var_reversal_potentials__ENa = var_model_parameters__R * var_model_parameters__T * log(NV_Ith_S(mParameters, 5) / var_chaste_interface__Na__Na_i) / var_model_parameters__F; // mV
        const double var_INa__INa = pow(var_chaste_interface__INa_m_gate__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__Vm) * NV_Ith_S(mParameters, 11) * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j; // uA_per_uF
        const double var_INa__INa_converted = HeartConfig::Instance()->GetCapacitance() * var_INa__INa; // uA_per_cm2
        const double var_INaL__INaL = pow(var_chaste_interface__INaL_mL_gate__mL, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__Vm) * NV_Ith_S(mParameters, 13) * var_chaste_interface__INaL_hL_gate__hL; // uA_per_uF
        const double var_INaL__INaL_converted = HeartConfig::Instance()->GetCapacitance() * var_INaL__INaL; // uA_per_cm2
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = var_model_parameters__R * var_model_parameters__T * log((NV_Ith_S(mParameters, 5) * var_reversal_potentials__prnak + NV_Ith_S(mParameters, 4)) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__prnak + var_chaste_interface__K__K_i)) / var_model_parameters__F; // mV
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__membrane__Vm) * var_IKs__OKs * var_IKs__gKs; // uA_per_uF
        const double var_IKs__IKs_converted = HeartConfig::Instance()->GetCapacitance() * var_IKs__IKs; // uA_per_cm2

        N_Vector dqs = N_VNew_Serial(20);
        NV_Ith_S(dqs, 0) = var_Ileak__Ileak;
        NV_Ith_S(dqs, 1) = var_Iup__Iup;
        NV_Ith_S(dqs, 2) = var_ICaL__ICaL_converted;
        NV_Ith_S(dqs, 3) = var_ICab__ICab_converted;
        NV_Ith_S(dqs, 4) = var_IClb__IClb_converted;
        NV_Ith_S(dqs, 5) = var_INab__INab_converted;
        NV_Ith_S(dqs, 6) = var_IpCa__IpCa_converted;
        NV_Ith_S(dqs, 7) = var_INa__INa_converted;
        NV_Ith_S(dqs, 8) = var_IK1__IK1_converted;
        NV_Ith_S(dqs, 9) = var_INaL__INaL_converted;
        NV_Ith_S(dqs, 10) = var_IKp__IKp_converted;
        NV_Ith_S(dqs, 11) = var_IKr__IKr_converted;
        NV_Ith_S(dqs, 12) = var_IKs__IKs_converted;
        NV_Ith_S(dqs, 13) = var_INaCa__INaCa_converted;
        NV_Ith_S(dqs, 14) = var_INaCa__INaCa_ss_sr_converted;
        NV_Ith_S(dqs, 15) = var_INaK__INaK_converted;
        NV_Ith_S(dqs, 16) = var_membrane__i_Stim_converted;
        NV_Ith_S(dqs, 17) = var_Ito2__Ito2_converted;
        NV_Ith_S(dqs, 18) = var_Ito1__Ito1_converted;
        NV_Ith_S(dqs, 19) = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Celldecker_2009FromCellMLCvode>::Initialise(void)
{
    this->mSystemName = "decker_2009";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "ms";

    // NV_Ith_S(rY, 0):
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("mV");
    this->mInitialConditions.push_back(-87.4947322902196);

    // NV_Ith_S(rY, 1):
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(8.38749860095482e-05);

    // NV_Ith_S(rY, 2):
    this->mVariableNames.push_back("IKs__C1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.476679784307081);

    // NV_Ith_S(rY, 3):
    this->mVariableNames.push_back("IKs__C2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.255181042718489);

    // NV_Ith_S(rY, 4):
    this->mVariableNames.push_back("IKs__C3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0512272866698557);

    // NV_Ith_S(rY, 5):
    this->mVariableNames.push_back("IKs__C4");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0045705849736195);

    // NV_Ith_S(rY, 6):
    this->mVariableNames.push_back("IKs__C5");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000152923243503507);

    // NV_Ith_S(rY, 7):
    this->mVariableNames.push_back("IKs__C6");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.132814156809568);

    // NV_Ith_S(rY, 8):
    this->mVariableNames.push_back("IKs__C7");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.053324572164618);

    // NV_Ith_S(rY, 9):
    this->mVariableNames.push_back("IKs__C8");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00713656414955778);

    // NV_Ith_S(rY, 10):
    this->mVariableNames.push_back("IKs__C9");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000318368292970148);

    // NV_Ith_S(rY, 11):
    this->mVariableNames.push_back("IKs__C10");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0138769647384953);

    // NV_Ith_S(rY, 12):
    this->mVariableNames.push_back("IKs__C11");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00371438476499172);

    // NV_Ith_S(rY, 13):
    this->mVariableNames.push_back("IKs__C12");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000248553788631871);

    // NV_Ith_S(rY, 14):
    this->mVariableNames.push_back("IKs__C13");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000644426171899078);

    // NV_Ith_S(rY, 15):
    this->mVariableNames.push_back("IKs__C14");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(8.62495047666861e-05);

    // NV_Ith_S(rY, 16):
    this->mVariableNames.push_back("IKs__C15");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.12344645485893e-05);

    // NV_Ith_S(rY, 17):
    this->mVariableNames.push_back("IKs__O1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.05292905767805e-05);

    // NV_Ith_S(rY, 18):
    this->mVariableNames.push_back("ICaL__C");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99996982093287);

    // NV_Ith_S(rY, 19):
    this->mVariableNames.push_back("ICaL__O");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.26882961412491e-05);

    // NV_Ith_S(rY, 20):
    this->mVariableNames.push_back("ICaL__C_star");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(7.49117189549873e-06);

    // NV_Ith_S(rY, 21):
    this->mVariableNames.push_back("ICaL__O_star");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.23556404128518e-10);

    // NV_Ith_S(rY, 22):
    this->mVariableNames.push_back("ICaL__CI");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(5.89853003114132e-11);

    // NV_Ith_S(rY, 23):
    this->mVariableNames.push_back("ICaL__OI");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(8.01952813127322e-17);

    // NV_Ith_S(rY, 24):
    this->mVariableNames.push_back("ICaL__CI_star");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.9237001017021e-09);

    // NV_Ith_S(rY, 25):
    this->mVariableNames.push_back("membrane_fast_sodium_current_m_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00101841101248412);

    // NV_Ith_S(rY, 26):
    this->mVariableNames.push_back("membrane_fast_sodium_current_h_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.991354143386887);

    // NV_Ith_S(rY, 27):
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99709036251243);

    // NV_Ith_S(rY, 28):
    this->mVariableNames.push_back("INaL_mL_gate__mL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00101841101248412);

    // NV_Ith_S(rY, 29):
    this->mVariableNames.push_back("INaL_hL_gate__hL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.319611809402137);

    // NV_Ith_S(rY, 30):
    this->mVariableNames.push_back("IKr_xr_gate__xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(4.06959064407486e-06);

    // NV_Ith_S(rY, 31):
    this->mVariableNames.push_back("Ito1_a_gate__a");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.76776038804228e-05);

    // NV_Ith_S(rY, 32):
    this->mVariableNames.push_back("Ito1_i1f_gate__i1f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.997976503910799);

    // NV_Ith_S(rY, 33):
    this->mVariableNames.push_back("Ito1_i1s_gate__i1s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.947581184798815);

    // NV_Ith_S(rY, 34):
    this->mVariableNames.push_back("Ito2_i2f_gate__i2f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.996044894628276);

    // NV_Ith_S(rY, 35):
    this->mVariableNames.push_back("SR_release_current");
    this->mVariableUnits.push_back("mM_per_ms");
    this->mInitialConditions.push_back(0.000714227102027745);

    // NV_Ith_S(rY, 36):
    this->mVariableNames.push_back("Ca__Ca_JSR");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.993914988616979);

    // NV_Ith_S(rY, 37):
    this->mVariableNames.push_back("Ca__Ca_NSR");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(1.01475649943057);

    // NV_Ith_S(rY, 38):
    this->mVariableNames.push_back("Ca__Ca_ss_sr");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.00011296707102434);

    // NV_Ith_S(rY, 39):
    this->mVariableNames.push_back("Ca__Ca_ss_CaL");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.000119239795531548);

    // NV_Ith_S(rY, 40):
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(8.01031392415197);

    // NV_Ith_S(rY, 41):
    this->mVariableNames.push_back("dyadic_space_sodium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(8.01033434859049);

    // NV_Ith_S(rY, 42):
    this->mVariableNames.push_back("cytosolic_chloride_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(20.6683603724432);

    // NV_Ith_S(rY, 43):
    this->mVariableNames.push_back("dyadic_space_chloride_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(20.6683605553303);

    // NV_Ith_S(rY, 44):
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(144.907134343314);

    // NV_Ith_S(rY, 45):
    this->mVariableNames.push_back("CaMK_active__CaMK_trap");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0114911034744777);

    // mParameters[0]:
    this->mParameterNames.push_back("SR_leak_current_max");
    this->mParameterUnits.push_back("mM_per_ms");

    // mParameters[1]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("mM_per_uA_per_uF_per_ms_per_ms");

    // mParameters[2]:
    this->mParameterNames.push_back("SR_uptake_current_max");
    this->mParameterUnits.push_back("mM_per_ms");

    // mParameters[3]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[4]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[5]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[6]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("L_per_F_ms");

    // mParameters[7]:
    this->mParameterNames.push_back("membrane_background_calcium_current_conductance");
    this->mParameterUnits.push_back("L_per_F_ms");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane_background_chloride_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_background_sodium_current_conductance");
    this->mParameterUnits.push_back("L_per_F_ms");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_calcium_pump_current_conductance");
    this->mParameterUnits.push_back("uA_per_uF");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[13]:
    this->mParameterNames.push_back("membrane_persistent_sodium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[14]:
    this->mParameterNames.push_back("membrane_potassium_pump_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[15]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[16]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[17]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("uA_per_uF");

    // mParameters[18]:
    this->mParameterNames.push_back("membrane_sodium_potassium_pump_current_permeability");
    this->mParameterUnits.push_back("uA_per_uF");

    // mParameters[19]:
    this->mParameterNames.push_back("membrane_transient_outward_chloride_current_conductance");
    this->mParameterUnits.push_back("L_per_F_ms");

    // mParameters[20]:
    this->mParameterNames.push_back("membrane_transient_outward_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_leak_current");
    this->mDerivedQuantityUnits.push_back("mM_per_ms");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("SR_uptake_current");
    this->mDerivedQuantityUnits.push_back("mM_per_ms");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_background_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_background_chloride_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_background_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_calcium_pump_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_persistent_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("membrane_potassium_pump_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [11]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [12]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [13]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [14]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_dyadic_space_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [15]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_potassium_pump_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [16]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [17]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_chloride_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [18]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [19]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("ms");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Celldecker_2009FromCellMLCvode)

#endif // CHASTE_CVODE
