#ifdef CHASTE_CVODE
//! @file
//!
//! This source file was generated from CellML by chaste_codegen version 0.6.3
//!
//! Model: ohara_rudy_2011_epi
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: AnalyticCvode)
//! on 2021-03-29 17:27:20
//!
//! <autogenerated>

#include "ohara_rudy_2011_epiCvode.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"



    boost::shared_ptr<RegularStimulus> Cellohara_rudy_2011_epiFromCellMLCvode::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__i_Stim_Amplitude_converted = -80.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__membrane__i_Stim_End = 1.0e+17; // millisecond
        const double var_chaste_interface__membrane__i_Stim_Period = 1000.0; // millisecond
        const double var_chaste_interface__membrane__i_Stim_PulseDuration = 0.5; // millisecond
        const double var_chaste_interface__membrane__i_Stim_Start = 10.0; // millisecond
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__i_Stim_Amplitude_converted),
                var_chaste_interface__membrane__i_Stim_PulseDuration,
                var_chaste_interface__membrane__i_Stim_Period,
                var_chaste_interface__membrane__i_Stim_Start, var_chaste_interface__membrane__i_Stim_End
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }

    double Cellohara_rudy_2011_epiFromCellMLCvode::GetIntracellularCalciumConcentration()
    {
        return NV_Ith_S(mStateVariables, 1);
    }
    
    Cellohara_rudy_2011_epiFromCellMLCvode::Cellohara_rudy_2011_epiFromCellMLCvode(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                41,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellohara_rudy_2011_epiFromCellMLCvode>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        mUseAnalyticJacobian = true;
        mHasAnalyticJacobian = true;
        
        NV_Ith_S(this->mParameters, 0) = 1.0; // (var_ryr__Jrel_scaling_factor) [dimensionless]
        NV_Ith_S(this->mParameters, 1) = 1.0; // (var_SERCA__Jup_b) [dimensionless]
        NV_Ith_S(this->mParameters, 2) = 1.8; // (var_extracellular__cao) [millimolar]
        NV_Ith_S(this->mParameters, 3) = 5.4000000000000004; // (var_extracellular__ko) [millimolar]
        NV_Ith_S(this->mParameters, 4) = 140.0; // (var_extracellular__nao) [millimolar]
        NV_Ith_S(this->mParameters, 5) = 96485.0; // (var_physical_constants__F) [coulomb_per_mole]
        NV_Ith_S(this->mParameters, 6) = 8314.0; // (var_physical_constants__R) [joule_per_kilomole_kelvin]
        NV_Ith_S(this->mParameters, 7) = 0.0001; // (var_ICaL__PCa_b) [dimensionless]
        NV_Ith_S(this->mParameters, 8) = 2.4999999999999999e-8; // (var_ICab__PCab) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 9) = 0.0030000000000000001; // (var_IKb__GKb_b) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 10) = 0.00050000000000000001; // (var_IpCa__GpCa) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 11) = 75.0; // (var_INa__GNa) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 12) = 0.1908; // (var_IK1__GK1_b) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 13) = 0.0074999999999999997; // (var_INaL__GNaL_b) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 14) = 0.045999999999999999; // (var_IKr__GKr_b) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 15) = 0.0033999999999999998; // (var_IKs__GKs_b) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 16) = 0.00080000000000000004; // (var_INaCa_i__Gncx_b) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 17) = 30.0; // (var_INaK__Pnak_b) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 18) = 0.02; // (var_Ito__Gto_b) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 19) = 310.0; // (var_physical_constants__T) [kelvin]
    }

    Cellohara_rudy_2011_epiFromCellMLCvode::~Cellohara_rudy_2011_epiFromCellMLCvode()
    {
    }

    
    double Cellohara_rudy_2011_epiFromCellMLCvode::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__intracellular_ions__cai = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__CaMK__CaMKt = NV_Ith_S(rY, 2);
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__intracellular_ions__nai = NV_Ith_S(rY, 3);
        // Units: millimolar; Initial value: 7.0
        double var_chaste_interface__intracellular_ions__nass = NV_Ith_S(rY, 4);
        // Units: millimolar; Initial value: 7.0
        double var_chaste_interface__intracellular_ions__ki = NV_Ith_S(rY, 5);
        // Units: millimolar; Initial value: 145.0
        double var_chaste_interface__intracellular_ions__kss = NV_Ith_S(rY, 6);
        // Units: millimolar; Initial value: 145.0
        double var_chaste_interface__intracellular_ions__cass = NV_Ith_S(rY, 7);
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__INa__m = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__INa__hf = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__hs = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__j = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__hsp = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__jp = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INaL__mL = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__INaL__hL = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INaL__hLp = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__a = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__Ito__iF = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__iS = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__ap = NV_Ith_S(rY, 22);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__Ito__iFp = NV_Ith_S(rY, 23);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__iSp = NV_Ith_S(rY, 24);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__d = NV_Ith_S(rY, 25);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ICaL__ff = NV_Ith_S(rY, 26);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fs = NV_Ith_S(rY, 27);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcaf = NV_Ith_S(rY, 28);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcas = NV_Ith_S(rY, 29);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__jca = NV_Ith_S(rY, 30);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__ffp = NV_Ith_S(rY, 31);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcafp = NV_Ith_S(rY, 32);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__nca = NV_Ith_S(rY, 33);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKr__xrf = NV_Ith_S(rY, 34);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKr__xrs = NV_Ith_S(rY, 35);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKs__xs1 = NV_Ith_S(rY, 36);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKs__xs2 = NV_Ith_S(rY, 37);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IK1__xk1 = NV_Ith_S(rY, 38);
        // Units: dimensionless; Initial value: 1.0
        
        const double var_CaMK__CaMKo = 0.050000000000000003; // dimensionless
        const double var_CaMK__KmCaM = 0.0015; // millimolar
        const double var_CaMK__KmCaMK = 0.14999999999999999; // millimolar
        const double var_ICaL__Aff = 0.59999999999999998; // dimensionless
        const double var_ICaL__Afs = 1.0 - var_ICaL__Aff; // dimensionless
        const double var_ICaL__f = var_ICaL__Aff * var_chaste_interface__ICaL__ff + var_ICaL__Afs * var_chaste_interface__ICaL__fs; // dimensionless
        const double var_ICaL__fp = var_ICaL__Aff * var_chaste_interface__ICaL__ffp + var_ICaL__Afs * var_chaste_interface__ICaL__fs; // dimensionless
        const double var_INa__Ahf = 0.98999999999999999; // dimensionless
        const double var_INa__Ahs = 1.0 - var_INa__Ahf; // dimensionless
        const double var_INa__h = var_INa__Ahf * var_chaste_interface__INa__hf + var_INa__Ahs * var_chaste_interface__INa__hs; // dimensionless
        const double var_INa__hp = var_INa__Ahf * var_chaste_interface__INa__hf + var_INa__Ahs * var_chaste_interface__INa__hsp; // dimensionless
        const double var_INaCa_i__KmCaAct = 0.00014999999999999999; // millimolar
        const double var_INaCa_i__kasymm = 12.5; // dimensionless
        const double var_INaCa_i__kcaoff = 5000.0; // per_millisecond
        const double var_INaCa_i__k2_i = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k2_ss = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k5_i = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k5_ss = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__kcaon = 1500000.0; // per_millisecond
        const double var_INaCa_i__kna1 = 15.0; // per_millisecond
        const double var_INaCa_i__kna2 = 5.0; // per_millisecond
        const double var_INaCa_i__kna3 = 88.120000000000005; // per_millisecond
        const double var_INaCa_i__qca = 0.16700000000000001; // dimensionless
        const double var_INaCa_i__qna = 0.52239999999999998; // dimensionless
        const double var_INaCa_i__wca = 60000.0; // dimensionless
        const double var_INaCa_i__wna = 60000.0; // dimensionless
        const double var_INaCa_i__wnaca = 5000.0; // dimensionless
        const double var_INaK__H = 9.9999999999999995e-8; // millimolar
        const double var_INaK__Khp = 1.698e-7; // millimolar
        const double var_INaK__Kki = 0.5; // per_millisecond
        const double var_INaK__Kko = 0.35820000000000002; // per_millisecond
        const double var_INaK__Kmgatp = 1.698e-7; // millimolar
        const double var_INaK__Knai0 = 9.0730000000000004; // millimolar
        const double var_INaK__Knao0 = 27.780000000000001; // millimolar
        const double var_INaK__Knap = 224.0; // millimolar
        const double var_INaK__Kxkur = 292.0; // millimolar
        const double var_INaK__MgADP = 0.050000000000000003; // millimolar
        const double var_INaK__MgATP = 9.8000000000000007; // millimolar
        const double var_INaK__delta = -0.155; // millivolt
        const double var_INaK__eP = 4.2000000000000002; // dimensionless
        const double var_INaK__k1m = 182.40000000000001; // per_millisecond
        const double var_INaK__b1 = var_INaK__MgADP * var_INaK__k1m; // dimensionless
        const double var_INaK__k1p = 949.5; // per_millisecond
        const double var_INaK__k2m = 39.399999999999999; // per_millisecond
        const double var_INaK__k2p = 687.20000000000005; // per_millisecond
        const double var_INaK__a2 = var_INaK__k2p; // dimensionless
        const double var_INaK__k3m = 79300.0; // per_millisecond
        const double var_INaK__k3p = 1899.0; // per_millisecond
        const double var_INaK__k4m = 40.0; // per_millisecond
        const double var_INaK__k4p = 639.0; // per_millisecond
        const double var_INaK__a4 = var_INaK__MgATP * var_INaK__k4p / ((1.0 + var_INaK__MgATP / var_INaK__Kmgatp) * var_INaK__Kmgatp); // dimensionless
        const double var_IpCa__KmCap = 0.00050000000000000001; // millimolar
        const double var_environment__celltype = 1.0; // dimensionless
        const double var_ICaL__PCa = ((var_environment__celltype == 1.0) ? (1.2 * NV_Ith_S(mParameters, 7)) : ((var_environment__celltype == 2.0) ? (2.5 * NV_Ith_S(mParameters, 7)) : (NV_Ith_S(mParameters, 7)))); // dimensionless
        const double var_ICaL__PCaK = 0.00035740000000000001 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCaNa = 0.00125 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCap = 1.1000000000000001 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCaKp = 0.00035740000000000001 * var_ICaL__PCap; // dimensionless
        const double var_ICaL__PCaNap = 0.00125 * var_ICaL__PCap; // dimensionless
        const double var_IK1__GK1 = ((var_environment__celltype == 1.0) ? (1.2 * NV_Ith_S(mParameters, 12)) : ((var_environment__celltype == 2.0) ? (1.3 * NV_Ith_S(mParameters, 12)) : (NV_Ith_S(mParameters, 12)))); // milliS_per_microF
        const double var_IKb__GKb = ((var_environment__celltype == 1.0) ? (0.59999999999999998 * NV_Ith_S(mParameters, 9)) : (NV_Ith_S(mParameters, 9))); // milliS_per_microF
        const double var_IKr__GKr = ((var_environment__celltype == 1.0) ? (1.3 * NV_Ith_S(mParameters, 14)) : ((var_environment__celltype == 2.0) ? (0.80000000000000004 * NV_Ith_S(mParameters, 14)) : (NV_Ith_S(mParameters, 14)))); // milliS_per_microF
        const double var_IKs__GKs = ((var_environment__celltype == 1.0) ? (1.3999999999999999 * NV_Ith_S(mParameters, 15)) : (NV_Ith_S(mParameters, 15))); // milliS_per_microF
        const double var_INaCa_i__Gncx = ((var_environment__celltype == 1.0) ? (1.1000000000000001 * NV_Ith_S(mParameters, 16)) : ((var_environment__celltype == 2.0) ? (1.3999999999999999 * NV_Ith_S(mParameters, 16)) : (NV_Ith_S(mParameters, 16)))); // milliS_per_microF
        const double var_INaK__Pnak = ((var_environment__celltype == 1.0) ? (0.90000000000000002 * NV_Ith_S(mParameters, 17)) : ((var_environment__celltype == 2.0) ? (0.69999999999999996 * NV_Ith_S(mParameters, 17)) : (NV_Ith_S(mParameters, 17)))); // milliS_per_microF
        const double var_INaL__GNaL = ((var_environment__celltype == 1.0) ? (0.59999999999999998 * NV_Ith_S(mParameters, 13)) : (NV_Ith_S(mParameters, 13))); // milliS_per_microF
        const double var_Ito__Gto = (((var_environment__celltype == 1.0) || (var_environment__celltype == 2.0)) ? (4.0 * NV_Ith_S(mParameters, 18)) : (NV_Ith_S(mParameters, 18))); // milliS_per_microF
        const double var_IK1__GK1_total = sqrt(NV_Ith_S(mParameters, 3)) * var_IK1__GK1; // milliS_per_microF
        const double var_IKr__GKr_total = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 3)) * var_IKr__GKr; // milliS_per_microF
        const double var_INaCa_i__h10_i = 1.0 + (1.0 + NV_Ith_S(mParameters, 4) / var_INaCa_i__kna2) * NV_Ith_S(mParameters, 4) / var_INaCa_i__kna1 + var_INaCa_i__kasymm; // dimensionless
        const double var_INaCa_i__h10_ss = 1.0 + (1.0 + NV_Ith_S(mParameters, 4) / var_INaCa_i__kna2) * NV_Ith_S(mParameters, 4) / var_INaCa_i__kna1 + var_INaCa_i__kasymm; // dimensionless
        const double var_INaCa_i__h11_i = pow(NV_Ith_S(mParameters, 4), 2) / (var_INaCa_i__h10_i * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h11_ss = pow(NV_Ith_S(mParameters, 4), 2) / (var_INaCa_i__h10_ss * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h12_i = 1 / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__h12_ss = 1 / var_INaCa_i__h10_ss; // dimensionless
        const double var_INaCa_i__k1_i = var_INaCa_i__h12_i * var_INaCa_i__kcaon * NV_Ith_S(mParameters, 2); // dimensionless
        const double var_INaCa_i__k1_ss = var_INaCa_i__h12_ss * var_INaCa_i__kcaon * NV_Ith_S(mParameters, 2); // dimensionless
        const double var_IKs__KsCa = 1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__intracellular_ions__cai), 1.3999999999999999)); // dimensionless
        const double var_IKs__GKs_total = var_IKs__GKs * var_IKs__KsCa; // milliS_per_microF
        const double var_INaCa_i__allo_i = 1 / (1.0 + pow(var_INaCa_i__KmCaAct, 2) / pow(var_chaste_interface__intracellular_ions__cai, 2)); // dimensionless
        const double var_IpCa__IpCa = NV_Ith_S(mParameters, 10) * var_chaste_interface__intracellular_ions__cai / (var_IpCa__KmCap + var_chaste_interface__intracellular_ions__cai); // microA_per_microF
        const double var_IpCa__IpCa_converted = HeartConfig::Instance()->GetCapacitance() * var_IpCa__IpCa; // uA_per_cm2
        const double var_CaMK__CaMKb = (1.0 - var_chaste_interface__CaMK__CaMKt) * var_CaMK__CaMKo / (1.0 + var_CaMK__KmCaM / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_ICaL__fICaLp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_INa__fINap = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_INaCa_i__allo_ss = 1 / (1.0 + pow(var_INaCa_i__KmCaAct, 2) / pow(var_chaste_interface__intracellular_ions__cass, 2)); // dimensionless
        const double var_INaL__fINaLp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_Ito__fItop = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_INaCa_i__h4_i = 1.0 + (1.0 + var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna2) * var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna1; // dimensionless
        const double var_INaCa_i__h5_i = pow(var_chaste_interface__intracellular_ions__nai, 2) / (var_INaCa_i__h4_i * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h6_i = 1 / var_INaCa_i__h4_i; // dimensionless
        const double var_INaCa_i__k6_i = var_INaCa_i__h6_i * var_INaCa_i__kcaon * var_chaste_interface__intracellular_ions__cai; // dimensionless
        const double var_INaK__P = var_INaK__eP / (1.0 + var_INaK__H / var_INaK__Khp + var_chaste_interface__intracellular_ions__nai / var_INaK__Knap + var_chaste_interface__intracellular_ions__ki / var_INaK__Kxkur); // dimensionless
        const double var_INaK__b3 = var_INaK__H * var_INaK__P * var_INaK__k3m / (1.0 + var_INaK__MgATP / var_INaK__Kmgatp); // dimensionless
        const double var_INaCa_i__h4_ss = 1.0 + (1.0 + var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna2) * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna1; // dimensionless
        const double var_INaCa_i__h5_ss = pow(var_chaste_interface__intracellular_ions__nass, 2) / (var_INaCa_i__h4_ss * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h6_ss = 1 / var_INaCa_i__h4_ss; // dimensionless
        const double var_INaCa_i__k6_ss = var_INaCa_i__h6_ss * var_INaCa_i__kcaon * var_chaste_interface__intracellular_ions__cass; // dimensionless
        const double var_ICaL__Afcaf = 0.29999999999999999 + 0.59999999999999998 / (1.0 + exp(-1.0 + 0.10000000000000001 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_ICaL__Afcas = 1.0 - var_ICaL__Afcaf; // dimensionless
        const double var_ICaL__fca = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcaf + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fcap = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcafp + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_IK1__rk1 = 1 / (1.0 + exp(11.145054250500367 + 0.10534077741493732 * var_chaste_interface__membrane__v - 0.27388602127883704 * NV_Ith_S(mParameters, 3))); // millisecond
        const double var_IKb__xkb = 1 / (1.0 + exp(0.78953107960741553 - 0.054525627044711013 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_IKr__Axrf = 1 / (1.0 + exp(1.4344412457471867 + 0.026171159382360639 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_IKr__Axrs = 1.0 - var_IKr__Axrf; // dimensionless
        const double var_IKr__rkr = 1 / ((1.0 + exp(0.73333333333333328 + 0.013333333333333334 * var_chaste_interface__membrane__v)) * (1.0 + exp(-0.33333333333333331 + 0.033333333333333333 * var_chaste_interface__membrane__v))); // dimensionless
        const double var_IKr__xr = var_IKr__Axrf * var_chaste_interface__IKr__xrf + var_IKr__Axrs * var_chaste_interface__IKr__xrs; // dimensionless
        const double var_Ito__AiF = 1 / (1.0 + exp(-1.4126984126984128 + 0.0066137566137566143 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_Ito__AiS = 1.0 - var_Ito__AiF; // dimensionless
        const double var_Ito__i = var_Ito__AiF * var_chaste_interface__Ito__iF + var_Ito__AiS * var_chaste_interface__Ito__iS; // dimensionless
        const double var_Ito__ip = var_Ito__AiF * var_chaste_interface__Ito__iFp + var_Ito__AiS * var_chaste_interface__Ito__iSp; // dimensionless
        const double var_ICaL__PhiCaK = ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) / NV_Ith_S(mParameters, 5))) ? (-9.9999999999999995e-8 * (-0.75 * NV_Ith_S(mParameters, 3) + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * (-0.75 * NV_Ith_S(mParameters, 3) + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(9.9999999999999995e-8)) + 9.9999999999999995e-8 * (-0.75 * NV_Ith_S(mParameters, 3) + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(-9.9999999999999995e-8))) * (9.9999999999999995e-8 * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) / NV_Ith_S(mParameters, 5) + var_chaste_interface__membrane__v) * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19))) : (pow(NV_Ith_S(mParameters, 5), 2) * (-0.75 * NV_Ith_S(mParameters, 3) + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))) * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))); // dimensionless
        const double var_ICaL__ICaK = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaK * var_ICaL__PhiCaK * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaKp * var_ICaL__PhiCaK * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaK_converted = HeartConfig::Instance()->GetCapacitance() * var_ICaL__ICaK; // uA_per_cm2
        const double var_ICaL__PhiCaL = ((fabs(var_chaste_interface__membrane__v) < 4.9999999999999998e-8 * fabs(NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) / NV_Ith_S(mParameters, 5))) ? (-1.9999999999999999e-7 * (-0.34100000000000003 * NV_Ith_S(mParameters, 2) + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) / NV_Ith_S(mParameters, 5) + var_chaste_interface__membrane__v) * (1.9999999999999999e-7 * (-0.34100000000000003 * NV_Ith_S(mParameters, 2) + var_chaste_interface__intracellular_ions__cass * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(9.9999999999999995e-8)) + 1.9999999999999999e-7 * (-0.34100000000000003 * NV_Ith_S(mParameters, 2) + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(-9.9999999999999995e-8))) * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19))) : (4.0 * pow(NV_Ith_S(mParameters, 5), 2) * (-0.34100000000000003 * NV_Ith_S(mParameters, 2) + var_chaste_interface__intracellular_ions__cass * exp(2.0 * var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))) * var_chaste_interface__membrane__v / ((-1.0 + exp(2.0 * var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))) * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))); // dimensionless
        const double var_ICaL__ICaL = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCa * var_ICaL__PhiCaL * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCap * var_ICaL__PhiCaL * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaL_converted = HeartConfig::Instance()->GetCapacitance() * var_ICaL__ICaL; // uA_per_cm2
        const double var_ICaL__PhiCaNa = ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) / NV_Ith_S(mParameters, 5))) ? (-9.9999999999999995e-8 * (-0.75 * NV_Ith_S(mParameters, 4) + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * (-0.75 * NV_Ith_S(mParameters, 4) + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(9.9999999999999995e-8)) + 9.9999999999999995e-8 * (-0.75 * NV_Ith_S(mParameters, 4) + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(-9.9999999999999995e-8))) * (9.9999999999999995e-8 * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) / NV_Ith_S(mParameters, 5) + var_chaste_interface__membrane__v) * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19))) : (pow(NV_Ith_S(mParameters, 5), 2) * (-0.75 * NV_Ith_S(mParameters, 4) + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))) * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))); // dimensionless
        const double var_ICaL__ICaNa = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaNa * var_ICaL__PhiCaNa * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaNap * var_ICaL__PhiCaNa * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaNa_converted = HeartConfig::Instance()->GetCapacitance() * var_ICaL__ICaNa; // uA_per_cm2
        const double var_ICab__ICab = ((fabs(var_chaste_interface__membrane__v) < 4.9999999999999998e-8 * fabs(NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) / NV_Ith_S(mParameters, 5))) ? (-1.9999999999999999e-7 * (-0.34100000000000003 * NV_Ith_S(mParameters, 2) + var_chaste_interface__intracellular_ions__cai * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) / NV_Ith_S(mParameters, 5) + var_chaste_interface__membrane__v) * (1.9999999999999999e-7 * (-0.34100000000000003 * NV_Ith_S(mParameters, 2) + var_chaste_interface__intracellular_ions__cai * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(9.9999999999999995e-8)) + 1.9999999999999999e-7 * (-0.34100000000000003 * NV_Ith_S(mParameters, 2) + var_chaste_interface__intracellular_ions__cai * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(-9.9999999999999995e-8))) * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19))) : (4.0 * pow(NV_Ith_S(mParameters, 5), 2) * (-0.34100000000000003 * NV_Ith_S(mParameters, 2) + var_chaste_interface__intracellular_ions__cai * exp(2.0 * var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))) * NV_Ith_S(mParameters, 8) * var_chaste_interface__membrane__v / ((-1.0 + exp(2.0 * var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))) * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))); // microA_per_microF
        const double var_ICab__ICab_converted = HeartConfig::Instance()->GetCapacitance() * var_ICab__ICab; // uA_per_cm2
        const double var_INaCa_i__hca = exp(var_INaCa_i__qca * var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19))); // dimensionless
        const double var_INaCa_i__hna = exp(var_INaCa_i__qna * var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19))); // dimensionless
        const double var_INaCa_i__h1_i = 1.0 + (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h1_ss = 1.0 + (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h2_i = var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nai / (var_INaCa_i__h1_i * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h2_ss = var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nass / (var_INaCa_i__h1_ss * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h3_i = 1 / var_INaCa_i__h1_i; // dimensionless
        const double var_INaCa_i__h3_ss = 1 / var_INaCa_i__h1_ss; // dimensionless
        const double var_INaCa_i__h7_i = 1.0 + (1.0 + 1 / var_INaCa_i__hna) * NV_Ith_S(mParameters, 4) / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h7_ss = 1.0 + (1.0 + 1 / var_INaCa_i__hna) * NV_Ith_S(mParameters, 4) / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h8_i = NV_Ith_S(mParameters, 4) / (var_INaCa_i__h7_i * var_INaCa_i__hna * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h8_ss = NV_Ith_S(mParameters, 4) / (var_INaCa_i__h7_ss * var_INaCa_i__hna * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h9_i = 1 / var_INaCa_i__h7_i; // dimensionless
        const double var_INaCa_i__h9_ss = 1 / var_INaCa_i__h7_ss; // dimensionless
        const double var_INaCa_i__k3p_i = var_INaCa_i__h9_i * var_INaCa_i__wca; // dimensionless
        const double var_INaCa_i__k3p_ss = var_INaCa_i__h9_ss * var_INaCa_i__wca; // dimensionless
        const double var_INaCa_i__k3pp_i = var_INaCa_i__h8_i * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k3_i = var_INaCa_i__k3p_i + var_INaCa_i__k3pp_i; // dimensionless
        const double var_INaCa_i__k3pp_ss = var_INaCa_i__h8_ss * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k3_ss = var_INaCa_i__k3p_ss + var_INaCa_i__k3pp_ss; // dimensionless
        const double var_INaCa_i__k4p_i = var_INaCa_i__h3_i * var_INaCa_i__wca / var_INaCa_i__hca; // dimensionless
        const double var_INaCa_i__k4p_ss = var_INaCa_i__h3_ss * var_INaCa_i__wca / var_INaCa_i__hca; // dimensionless
        const double var_INaCa_i__k4pp_i = var_INaCa_i__h2_i * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k4_i = var_INaCa_i__k4p_i + var_INaCa_i__k4pp_i; // dimensionless
        const double var_INaCa_i__k4pp_ss = var_INaCa_i__h2_ss * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k4_ss = var_INaCa_i__k4p_ss + var_INaCa_i__k4pp_ss; // dimensionless
        const double var_INaCa_i__k7_i = var_INaCa_i__h2_i * var_INaCa_i__h5_i * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k7_ss = var_INaCa_i__h2_ss * var_INaCa_i__h5_ss * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k8_i = var_INaCa_i__h11_i * var_INaCa_i__h8_i * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k8_ss = var_INaCa_i__h11_ss * var_INaCa_i__h8_ss * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__x1_i = (var_INaCa_i__k2_i + var_INaCa_i__k3_i) * var_INaCa_i__k5_i * var_INaCa_i__k7_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k2_i * var_INaCa_i__k4_i; // dimensionless
        const double var_INaCa_i__x1_ss = (var_INaCa_i__k2_ss + var_INaCa_i__k3_ss) * var_INaCa_i__k5_ss * var_INaCa_i__k7_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k2_ss * var_INaCa_i__k4_ss; // dimensionless
        const double var_INaCa_i__x2_i = (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k4_i * var_INaCa_i__k6_i + (var_INaCa_i__k4_i + var_INaCa_i__k5_i) * var_INaCa_i__k1_i * var_INaCa_i__k7_i; // dimensionless
        const double var_INaCa_i__x2_ss = (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k4_ss * var_INaCa_i__k6_ss + (var_INaCa_i__k4_ss + var_INaCa_i__k5_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k7_ss; // dimensionless
        const double var_INaCa_i__x3_i = (var_INaCa_i__k2_i + var_INaCa_i__k3_i) * var_INaCa_i__k6_i * var_INaCa_i__k8_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k1_i * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__x3_ss = (var_INaCa_i__k2_ss + var_INaCa_i__k3_ss) * var_INaCa_i__k6_ss * var_INaCa_i__k8_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__x4_i = (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k3_i * var_INaCa_i__k5_i + (var_INaCa_i__k4_i + var_INaCa_i__k5_i) * var_INaCa_i__k2_i * var_INaCa_i__k8_i; // dimensionless
        const double var_INaCa_i__E1_i = var_INaCa_i__x1_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E2_i = var_INaCa_i__x2_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E3_i = var_INaCa_i__x3_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E4_i = var_INaCa_i__x4_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__JncxCa_i = var_INaCa_i__E2_i * var_INaCa_i__k2_i - var_INaCa_i__E1_i * var_INaCa_i__k1_i; // millimolar_per_millisecond
        const double var_INaCa_i__JncxNa_i = var_INaCa_i__E3_i * var_INaCa_i__k4pp_i - var_INaCa_i__E2_i * var_INaCa_i__k3pp_i + 3.0 * var_INaCa_i__E4_i * var_INaCa_i__k7_i - 3.0 * var_INaCa_i__E1_i * var_INaCa_i__k8_i; // millimolar_per_millisecond
        const double var_INaCa_i__x4_ss = (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k3_ss * var_INaCa_i__k5_ss + (var_INaCa_i__k4_ss + var_INaCa_i__k5_ss) * var_INaCa_i__k2_ss * var_INaCa_i__k8_ss; // dimensionless
        const double var_INaCa_i__E1_ss = var_INaCa_i__x1_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E2_ss = var_INaCa_i__x2_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E3_ss = var_INaCa_i__x3_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E4_ss = var_INaCa_i__x4_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__JncxCa_ss = var_INaCa_i__E2_ss * var_INaCa_i__k2_ss - var_INaCa_i__E1_ss * var_INaCa_i__k1_ss; // millimolar_per_millisecond
        const double var_INaCa_i__JncxNa_ss = var_INaCa_i__E3_ss * var_INaCa_i__k4pp_ss - var_INaCa_i__E2_ss * var_INaCa_i__k3pp_ss + 3.0 * var_INaCa_i__E4_ss * var_INaCa_i__k7_ss - 3.0 * var_INaCa_i__E1_ss * var_INaCa_i__k8_ss; // millimolar_per_millisecond
        const double var_INaK__Knai = var_INaK__Knai0 * exp(0.33333333333333331 * var_INaK__delta * var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19))); // millimolar
        const double var_INaK__Knao = var_INaK__Knao0 * exp(0.33333333333333331 * (1.0 - var_INaK__delta) * var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19))); // millimolar
        const double var_INaK__a1 = pow(var_chaste_interface__intracellular_ions__nai, 3) * var_INaK__k1p / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__ki / var_INaK__Kki), 2) + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3)) * pow(var_INaK__Knai, 3)); // dimensionless
        const double var_INaK__a3 = pow(NV_Ith_S(mParameters, 3), 2) * var_INaK__k3p / ((-1.0 + pow((1.0 + NV_Ith_S(mParameters, 3) / var_INaK__Kko), 2) + pow((1.0 + NV_Ith_S(mParameters, 4) / var_INaK__Knao), 3)) * pow(var_INaK__Kko, 2)); // dimensionless
        const double var_INaK__b2 = pow(NV_Ith_S(mParameters, 4), 3) * var_INaK__k2m / ((-1.0 + pow((1.0 + NV_Ith_S(mParameters, 3) / var_INaK__Kko), 2) + pow((1.0 + NV_Ith_S(mParameters, 4) / var_INaK__Knao), 3)) * pow(var_INaK__Knao, 3)); // dimensionless
        const double var_INaK__b4 = pow(var_chaste_interface__intracellular_ions__ki, 2) * var_INaK__k4m / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__ki / var_INaK__Kki), 2) + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3)) * pow(var_INaK__Kki, 2)); // dimensionless
        const double var_INaK__x1 = var_INaK__a1 * var_INaK__a2 * var_INaK__a4 + var_INaK__a1 * var_INaK__a2 * var_INaK__b3 + var_INaK__a2 * var_INaK__b3 * var_INaK__b4 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__x2 = var_INaK__a1 * var_INaK__a2 * var_INaK__a3 + var_INaK__a2 * var_INaK__a3 * var_INaK__b4 + var_INaK__a3 * var_INaK__b1 * var_INaK__b4 + var_INaK__b1 * var_INaK__b2 * var_INaK__b4; // dimensionless
        const double var_INaK__x3 = var_INaK__a2 * var_INaK__a3 * var_INaK__a4 + var_INaK__a3 * var_INaK__a4 * var_INaK__b1 + var_INaK__a4 * var_INaK__b1 * var_INaK__b2 + var_INaK__b1 * var_INaK__b2 * var_INaK__b3; // dimensionless
        const double var_INaK__x4 = var_INaK__a1 * var_INaK__a3 * var_INaK__a4 + var_INaK__a1 * var_INaK__a4 * var_INaK__b2 + var_INaK__a1 * var_INaK__b2 * var_INaK__b3 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__E1 = var_INaK__x1 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E2 = var_INaK__x2 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E3 = var_INaK__x3 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E4 = var_INaK__x4 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__JnakK = 2.0 * var_INaK__E4 * var_INaK__b1 - 2.0 * var_INaK__E3 * var_INaK__a1; // millimolar_per_millisecond
        const double var_INaK__JnakNa = 3.0 * var_INaK__E1 * var_INaK__a3 - 3.0 * var_INaK__E2 * var_INaK__b3; // millimolar_per_millisecond
        const double var_INab__INab = ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) / NV_Ith_S(mParameters, 5))) ? (-3.7499999999999999e-17 * (-NV_Ith_S(mParameters, 4) + var_chaste_interface__intracellular_ions__nai * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) / NV_Ith_S(mParameters, 5) + var_chaste_interface__membrane__v) * (3.7499999999999999e-17 * (-NV_Ith_S(mParameters, 4) + var_chaste_interface__intracellular_ions__nai * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(9.9999999999999995e-8)) + 3.7499999999999999e-17 * (-NV_Ith_S(mParameters, 4) + var_chaste_interface__intracellular_ions__nai * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(-9.9999999999999995e-8))) * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19))) : (3.75e-10 * pow(NV_Ith_S(mParameters, 5), 2) * (-NV_Ith_S(mParameters, 4) + var_chaste_interface__intracellular_ions__nai * exp(var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))) * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))); // microA_per_microF
        const double var_physical_constants__zca = 2.0; // dimensionless
        const double var_physical_constants__zk = 1.0; // dimensionless
        const double var_physical_constants__zna = 1.0; // dimensionless
        const double var_INaCa_i__INaCa_i = 0.80000000000000004 * (var_INaCa_i__JncxCa_i * var_physical_constants__zca + var_INaCa_i__JncxNa_i * var_physical_constants__zna) * var_INaCa_i__Gncx * var_INaCa_i__allo_i; // microA_per_microF
        const double var_INaCa_i__INaCa_i_converted = HeartConfig::Instance()->GetCapacitance() * var_INaCa_i__INaCa_i; // uA_per_cm2
        const double var_INaCa_i__INaCa_ss = 0.20000000000000001 * (var_INaCa_i__JncxCa_ss * var_physical_constants__zca + var_INaCa_i__JncxNa_ss * var_physical_constants__zna) * var_INaCa_i__Gncx * var_INaCa_i__allo_ss; // microA_per_microF
        const double var_INaCa_i__INaCa_ss_converted = HeartConfig::Instance()->GetCapacitance() * var_INaCa_i__INaCa_ss; // uA_per_cm2
        const double var_INaK__INaK = (var_INaK__JnakK * var_physical_constants__zk + var_INaK__JnakNa * var_physical_constants__zna) * var_INaK__Pnak; // microA_per_microF
        const double var_INaK__INaK_converted = HeartConfig::Instance()->GetCapacitance() * var_INaK__INaK; // uA_per_cm2
        const double var_reversal_potentials__EK = NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) * log(NV_Ith_S(mParameters, 3) / var_chaste_interface__intracellular_ions__ki) / NV_Ith_S(mParameters, 5); // millivolt
        const double var_IK1__IK1 = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IK1__GK1_total * var_IK1__rk1 * var_chaste_interface__IK1__xk1; // microA_per_microF
        const double var_IK1__IK1_converted = HeartConfig::Instance()->GetCapacitance() * var_IK1__IK1; // uA_per_cm2
        const double var_IKb__IKb = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IKb__GKb * var_IKb__xkb; // microA_per_microF
        const double var_IKb__IKb_converted = HeartConfig::Instance()->GetCapacitance() * var_IKb__IKb; // uA_per_cm2
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IKr__GKr_total * var_IKr__rkr * var_IKr__xr; // microA_per_microF
        const double var_IKr__IKr_converted = HeartConfig::Instance()->GetCapacitance() * var_IKr__IKr; // uA_per_cm2
        const double var_Ito__Ito = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * ((1.0 - var_Ito__fItop) * var_chaste_interface__Ito__a * var_Ito__i + var_chaste_interface__Ito__ap * var_Ito__fItop * var_Ito__ip) * var_Ito__Gto; // microA_per_microF
        const double var_reversal_potentials__ENa = NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) * log(NV_Ith_S(mParameters, 4) / var_chaste_interface__intracellular_ions__nai) / NV_Ith_S(mParameters, 5); // millivolt
        const double var_INa__INa = pow(var_chaste_interface__INa__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - var_INa__fINap) * var_INa__h * var_chaste_interface__INa__j + var_INa__fINap * var_INa__hp * var_chaste_interface__INa__jp) * NV_Ith_S(mParameters, 11); // microA_per_microF
        const double var_INa__INa_converted = HeartConfig::Instance()->GetCapacitance() * var_INa__INa; // uA_per_cm2
        const double var_INaL__INaL = (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - var_INaL__fINaLp) * var_chaste_interface__INaL__hL + var_INaL__fINaLp * var_chaste_interface__INaL__hLp) * var_INaL__GNaL * var_chaste_interface__INaL__mL; // microA_per_microF
        const double var_INaL__INaL_converted = HeartConfig::Instance()->GetCapacitance() * var_INaL__INaL; // uA_per_cm2
        const double var_reversal_potentials__PKNa = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) * log((NV_Ith_S(mParameters, 4) * var_reversal_potentials__PKNa + NV_Ith_S(mParameters, 3)) / (var_chaste_interface__intracellular_ions__nai * var_reversal_potentials__PKNa + var_chaste_interface__intracellular_ions__ki)) / NV_Ith_S(mParameters, 5); // millivolt
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__membrane__v) * var_IKs__GKs_total * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // microA_per_microF
        const double var_IKs__IKs_converted = HeartConfig::Instance()->GetCapacitance() * var_IKs__IKs; // uA_per_cm2
        const double var_chaste_interface__i_ionic = HeartConfig::Instance()->GetCapacitance() * var_INab__INab + HeartConfig::Instance()->GetCapacitance() * var_Ito__Ito + var_ICaL__ICaK_converted + var_ICaL__ICaL_converted + var_ICaL__ICaNa_converted + var_ICab__ICab_converted + var_IK1__IK1_converted + var_IKb__IKb_converted + var_IKr__IKr_converted + var_IKs__IKs_converted + var_INa__INa_converted + var_INaCa_i__INaCa_i_converted + var_INaCa_i__INaCa_ss_converted + var_INaK__INaK_converted + var_INaL__INaL_converted + var_IpCa__IpCa_converted; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellohara_rudy_2011_epiFromCellMLCvode::EvaluateYDerivatives(double var_chaste_interface__environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__intracellular_ions__cai = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__CaMK__CaMKt = NV_Ith_S(rY, 2);
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__intracellular_ions__nai = NV_Ith_S(rY, 3);
        // Units: millimolar; Initial value: 7.0
        double var_chaste_interface__intracellular_ions__nass = NV_Ith_S(rY, 4);
        // Units: millimolar; Initial value: 7.0
        double var_chaste_interface__intracellular_ions__ki = NV_Ith_S(rY, 5);
        // Units: millimolar; Initial value: 145.0
        double var_chaste_interface__intracellular_ions__kss = NV_Ith_S(rY, 6);
        // Units: millimolar; Initial value: 145.0
        double var_chaste_interface__intracellular_ions__cass = NV_Ith_S(rY, 7);
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__intracellular_ions__cansr = NV_Ith_S(rY, 8);
        // Units: millimolar; Initial value: 1.2
        double var_chaste_interface__intracellular_ions__cajsr = NV_Ith_S(rY, 9);
        // Units: millimolar; Initial value: 1.2
        double var_chaste_interface__INa__m = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__INa__hf = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__hs = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__j = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__hsp = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__jp = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INaL__mL = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__INaL__hL = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INaL__hLp = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__a = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__Ito__iF = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__iS = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__ap = NV_Ith_S(rY, 22);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__Ito__iFp = NV_Ith_S(rY, 23);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__iSp = NV_Ith_S(rY, 24);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__d = NV_Ith_S(rY, 25);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ICaL__ff = NV_Ith_S(rY, 26);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fs = NV_Ith_S(rY, 27);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcaf = NV_Ith_S(rY, 28);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcas = NV_Ith_S(rY, 29);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__jca = NV_Ith_S(rY, 30);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__ffp = NV_Ith_S(rY, 31);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcafp = NV_Ith_S(rY, 32);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__nca = NV_Ith_S(rY, 33);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKr__xrf = NV_Ith_S(rY, 34);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKr__xrs = NV_Ith_S(rY, 35);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKs__xs1 = NV_Ith_S(rY, 36);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKs__xs2 = NV_Ith_S(rY, 37);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IK1__xk1 = NV_Ith_S(rY, 38);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ryr__Jrelnp = NV_Ith_S(rY, 39);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ryr__Jrelp = NV_Ith_S(rY, 40);
        // Units: dimensionless; Initial value: 0.0

        // Mathematics
        double d_dt_chaste_interface_var_membrane__v;
        const double var_CaMK__CaMKo = 0.050000000000000003; // dimensionless
        const double var_CaMK__KmCaM = 0.0015; // millimolar
        const double var_CaMK__KmCaMK = 0.14999999999999999; // millimolar
        const double var_CaMK__aCaMK = 0.050000000000000003; // per_millimolar_per_millisecond
        const double var_CaMK__bCaMK = 0.00068000000000000005; // per_millisecond
        const double var_ICaL__Aff = 0.59999999999999998; // dimensionless
        const double var_ICaL__Afs = 1.0 - var_ICaL__Aff; // dimensionless
        const double var_ICaL__Kmn = 0.002; // millimolar
        const double var_ICaL__f = var_ICaL__Aff * var_chaste_interface__ICaL__ff + var_ICaL__Afs * var_chaste_interface__ICaL__fs; // dimensionless
        const double var_ICaL__fp = var_ICaL__Aff * var_chaste_interface__ICaL__ffp + var_ICaL__Afs * var_chaste_interface__ICaL__fs; // dimensionless
        const double var_ICaL__k2n = 1000.0; // per_millisecond
        const double var_ICaL__km2n = var_chaste_interface__ICaL__jca; // per_millisecond
        const double var_ICaL__tjca = 75.0; // millisecond
        const double var_IKs__txs1_max = 817.29999999999995; // millisecond
        const double var_INa__Ahf = 0.98999999999999999; // dimensionless
        const double var_INa__Ahs = 1.0 - var_INa__Ahf; // dimensionless
        const double var_INa__h = var_INa__Ahf * var_chaste_interface__INa__hf + var_INa__Ahs * var_chaste_interface__INa__hs; // dimensionless
        const double var_INa__hp = var_INa__Ahf * var_chaste_interface__INa__hf + var_INa__Ahs * var_chaste_interface__INa__hsp; // dimensionless
        const double var_INa__hssV1 = 82.900000000000006; // millivolt
        const double var_INa__hssV2 = 6.0860000000000003; // millivolt
        const double var_INa__mssV1 = 39.57; // millivolt
        const double var_INa__mssV2 = 9.8710000000000004; // millivolt
        const double var_INa__mtD1 = 6.7649999999999997; // dimensionless
        const double var_INa__mtD2 = 8.5519999999999996; // dimensionless
        const double var_INa__mtV1 = 11.640000000000001; // millivolt
        const double var_INa__mtV2 = 34.770000000000003; // millivolt
        const double var_INa__mtV3 = 77.420000000000002; // millivolt
        const double var_INa__mtV4 = 5.9550000000000001; // millivolt
        const double var_INaCa_i__KmCaAct = 0.00014999999999999999; // millimolar
        const double var_INaCa_i__kasymm = 12.5; // dimensionless
        const double var_INaCa_i__kcaoff = 5000.0; // per_millisecond
        const double var_INaCa_i__k2_i = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k2_ss = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k5_i = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k5_ss = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__kcaon = 1500000.0; // per_millisecond
        const double var_INaCa_i__kna1 = 15.0; // per_millisecond
        const double var_INaCa_i__kna2 = 5.0; // per_millisecond
        const double var_INaCa_i__kna3 = 88.120000000000005; // per_millisecond
        const double var_INaCa_i__qca = 0.16700000000000001; // dimensionless
        const double var_INaCa_i__qna = 0.52239999999999998; // dimensionless
        const double var_INaCa_i__wca = 60000.0; // dimensionless
        const double var_INaCa_i__wna = 60000.0; // dimensionless
        const double var_INaCa_i__wnaca = 5000.0; // dimensionless
        const double var_INaK__H = 9.9999999999999995e-8; // millimolar
        const double var_INaK__Khp = 1.698e-7; // millimolar
        const double var_INaK__Kki = 0.5; // per_millisecond
        const double var_INaK__Kko = 0.35820000000000002; // per_millisecond
        const double var_INaK__Kmgatp = 1.698e-7; // millimolar
        const double var_INaK__Knai0 = 9.0730000000000004; // millimolar
        const double var_INaK__Knao0 = 27.780000000000001; // millimolar
        const double var_INaK__Knap = 224.0; // millimolar
        const double var_INaK__Kxkur = 292.0; // millimolar
        const double var_INaK__MgADP = 0.050000000000000003; // millimolar
        const double var_INaK__MgATP = 9.8000000000000007; // millimolar
        const double var_INaK__delta = -0.155; // millivolt
        const double var_INaK__eP = 4.2000000000000002; // dimensionless
        const double var_INaK__k1m = 182.40000000000001; // per_millisecond
        const double var_INaK__b1 = var_INaK__MgADP * var_INaK__k1m; // dimensionless
        const double var_INaK__k1p = 949.5; // per_millisecond
        const double var_INaK__k2m = 39.399999999999999; // per_millisecond
        const double var_INaK__k2p = 687.20000000000005; // per_millisecond
        const double var_INaK__a2 = var_INaK__k2p; // dimensionless
        const double var_INaK__k3m = 79300.0; // per_millisecond
        const double var_INaK__k3p = 1899.0; // per_millisecond
        const double var_INaK__k4m = 40.0; // per_millisecond
        const double var_INaK__k4p = 639.0; // per_millisecond
        const double var_INaK__a4 = var_INaK__MgATP * var_INaK__k4p / ((1.0 + var_INaK__MgATP / var_INaK__Kmgatp) * var_INaK__Kmgatp); // dimensionless
        const double var_INaL__thL = 200.0; // millisecond
        const double var_INaL__thLp = 3.0 * var_INaL__thL; // millisecond
        const double var_IpCa__KmCap = 0.00050000000000000001; // millimolar
        const double var_cell_geometry__L = 0.01; // centimeter
        const double var_cell_geometry__rad = 0.0011000000000000001; // centimeter
        const double var_cell_geometry__Ageo = 6.2800000000000002 * pow(var_cell_geometry__rad, 2) + 6.2800000000000002 * var_cell_geometry__L * var_cell_geometry__rad; // centimeter_squared
        const double var_cell_geometry__Acap = 2.0 * var_cell_geometry__Ageo; // centimeter_squared
        const double var_cell_geometry__vcell = 3140.0 * pow(var_cell_geometry__rad, 2) * var_cell_geometry__L; // microliter
        const double var_cell_geometry__vjsr = 0.0047999999999999996 * var_cell_geometry__vcell; // microliter
        const double var_cell_geometry__vmyo = 0.68000000000000005 * var_cell_geometry__vcell; // microliter
        const double var_cell_geometry__vnsr = 0.055199999999999999 * var_cell_geometry__vcell; // microliter
        const double var_cell_geometry__vss = 0.02 * var_cell_geometry__vcell; // microliter
        const double var_environment__celltype = 1.0; // dimensionless
        const double var_ICaL__PCa = ((var_environment__celltype == 1.0) ? (1.2 * NV_Ith_S(mParameters, 7)) : ((var_environment__celltype == 2.0) ? (2.5 * NV_Ith_S(mParameters, 7)) : (NV_Ith_S(mParameters, 7)))); // dimensionless
        const double var_ICaL__PCaK = 0.00035740000000000001 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCaNa = 0.00125 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCap = 1.1000000000000001 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCaKp = 0.00035740000000000001 * var_ICaL__PCap; // dimensionless
        const double var_ICaL__PCaNap = 0.00125 * var_ICaL__PCap; // dimensionless
        const double var_IK1__GK1 = ((var_environment__celltype == 1.0) ? (1.2 * NV_Ith_S(mParameters, 12)) : ((var_environment__celltype == 2.0) ? (1.3 * NV_Ith_S(mParameters, 12)) : (NV_Ith_S(mParameters, 12)))); // milliS_per_microF
        const double var_IKb__GKb = ((var_environment__celltype == 1.0) ? (0.59999999999999998 * NV_Ith_S(mParameters, 9)) : (NV_Ith_S(mParameters, 9))); // milliS_per_microF
        const double var_IKr__GKr = ((var_environment__celltype == 1.0) ? (1.3 * NV_Ith_S(mParameters, 14)) : ((var_environment__celltype == 2.0) ? (0.80000000000000004 * NV_Ith_S(mParameters, 14)) : (NV_Ith_S(mParameters, 14)))); // milliS_per_microF
        const double var_IKs__GKs = ((var_environment__celltype == 1.0) ? (1.3999999999999999 * NV_Ith_S(mParameters, 15)) : (NV_Ith_S(mParameters, 15))); // milliS_per_microF
        const double var_INaCa_i__Gncx = ((var_environment__celltype == 1.0) ? (1.1000000000000001 * NV_Ith_S(mParameters, 16)) : ((var_environment__celltype == 2.0) ? (1.3999999999999999 * NV_Ith_S(mParameters, 16)) : (NV_Ith_S(mParameters, 16)))); // milliS_per_microF
        const double var_INaK__Pnak = ((var_environment__celltype == 1.0) ? (0.90000000000000002 * NV_Ith_S(mParameters, 17)) : ((var_environment__celltype == 2.0) ? (0.69999999999999996 * NV_Ith_S(mParameters, 17)) : (NV_Ith_S(mParameters, 17)))); // milliS_per_microF
        const double var_INaL__GNaL = ((var_environment__celltype == 1.0) ? (0.59999999999999998 * NV_Ith_S(mParameters, 13)) : (NV_Ith_S(mParameters, 13))); // milliS_per_microF
        const double var_Ito__Gto = (((var_environment__celltype == 1.0) || (var_environment__celltype == 2.0)) ? (4.0 * NV_Ith_S(mParameters, 18)) : (NV_Ith_S(mParameters, 18))); // milliS_per_microF
        const double var_SERCA__upScale = ((var_environment__celltype == 1.0) ? (1.3) : (1.0)); // dimensionless
        const double var_IK1__GK1_total = sqrt(NV_Ith_S(mParameters, 3)) * var_IK1__GK1; // milliS_per_microF
        const double var_IKr__GKr_total = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 3)) * var_IKr__GKr; // milliS_per_microF
        const double var_INaCa_i__h10_i = 1.0 + (1.0 + NV_Ith_S(mParameters, 4) / var_INaCa_i__kna2) * NV_Ith_S(mParameters, 4) / var_INaCa_i__kna1 + var_INaCa_i__kasymm; // dimensionless
        const double var_INaCa_i__h10_ss = 1.0 + (1.0 + NV_Ith_S(mParameters, 4) / var_INaCa_i__kna2) * NV_Ith_S(mParameters, 4) / var_INaCa_i__kna1 + var_INaCa_i__kasymm; // dimensionless
        const double var_INaCa_i__h11_i = pow(NV_Ith_S(mParameters, 4), 2) / (var_INaCa_i__h10_i * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h11_ss = pow(NV_Ith_S(mParameters, 4), 2) / (var_INaCa_i__h10_ss * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h12_i = 1 / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__h12_ss = 1 / var_INaCa_i__h10_ss; // dimensionless
        const double var_INaCa_i__k1_i = var_INaCa_i__h12_i * var_INaCa_i__kcaon * NV_Ith_S(mParameters, 2); // dimensionless
        const double var_INaCa_i__k1_ss = var_INaCa_i__h12_ss * var_INaCa_i__kcaon * NV_Ith_S(mParameters, 2); // dimensionless
        const double var_intracellular_ions__BSLmax = 1.1240000000000001; // millimolar
        const double var_intracellular_ions__BSRmax = 0.047; // millimolar
        const double var_intracellular_ions__KmBSL = 0.0086999999999999994; // millimolar
        const double var_intracellular_ions__KmBSR = 0.00087000000000000001; // millimolar
        const double var_IKs__KsCa = 1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__intracellular_ions__cai), 1.3999999999999999)); // dimensionless
        const double var_IKs__GKs_total = var_IKs__GKs * var_IKs__KsCa; // milliS_per_microF
        const double var_INaCa_i__allo_i = 1 / (1.0 + pow(var_INaCa_i__KmCaAct, 2) / pow(var_chaste_interface__intracellular_ions__cai, 2)); // dimensionless
        const double var_IpCa__IpCa = NV_Ith_S(mParameters, 10) * var_chaste_interface__intracellular_ions__cai / (var_IpCa__KmCap + var_chaste_interface__intracellular_ions__cai); // microA_per_microF
        const double var_SERCA__Jupnp = 0.0043750000000000004 * var_SERCA__upScale * var_chaste_interface__intracellular_ions__cai / (0.00092000000000000003 + var_chaste_interface__intracellular_ions__cai); // millimolar_per_millisecond
        const double var_SERCA__Jupp = 0.01203125 * var_SERCA__upScale * var_chaste_interface__intracellular_ions__cai / (0.00075000000000000002 + var_chaste_interface__intracellular_ions__cai); // millimolar_per_millisecond
        const double var_SERCA__Jleak = 0.00026249999999999998 * var_chaste_interface__intracellular_ions__cansr; // millimolar_per_millisecond
        const double var_CaMK__CaMKb = (1.0 - var_chaste_interface__CaMK__CaMKt) * var_CaMK__CaMKo / (1.0 + var_CaMK__KmCaM / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double d_dt_chaste_interface_var_CaMK__CaMKt = -var_chaste_interface__CaMK__CaMKt * var_CaMK__bCaMK + (var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt) * var_CaMK__CaMKb * var_CaMK__aCaMK; // millimolar / millisecond
        const double var_ICaL__anca = 1 / (pow((1.0 + var_ICaL__Kmn / var_chaste_interface__intracellular_ions__cass), 4) + var_ICaL__k2n / var_ICaL__km2n); // dimensionless
        const double d_dt_chaste_interface_var_ICaL__nca = var_ICaL__anca * var_ICaL__k2n - var_ICaL__km2n * var_chaste_interface__ICaL__nca; // 1 / millisecond
        const double var_ICaL__fICaLp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_INa__fINap = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_INaCa_i__allo_ss = 1 / (1.0 + pow(var_INaCa_i__KmCaAct, 2) / pow(var_chaste_interface__intracellular_ions__cass, 2)); // dimensionless
        const double var_INaL__fINaLp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_Ito__fItop = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_SERCA__fJupp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_SERCA__Jup = (-var_SERCA__Jleak + (1.0 - var_SERCA__fJupp) * var_SERCA__Jupnp + var_SERCA__Jupp * var_SERCA__fJupp) * NV_Ith_S(mParameters, 1); // millimolar_per_millisecond
        const double var_diff__Jdiff = 5.0 * var_chaste_interface__intracellular_ions__cass - 5.0 * var_chaste_interface__intracellular_ions__cai; // millimolar_per_millisecond
        const double var_intracellular_ions__Bcass = 1 / (1.0 + var_intracellular_ions__BSLmax * var_intracellular_ions__KmBSL / pow((var_intracellular_ions__KmBSL + var_chaste_interface__intracellular_ions__cass), 2) + var_intracellular_ions__BSRmax * var_intracellular_ions__KmBSR / pow((var_intracellular_ions__KmBSR + var_chaste_interface__intracellular_ions__cass), 2)); // dimensionless
        const double var_intracellular_ions__cm = 1.0; // microF_per_centimeter_squared
        const double var_intracellular_ions__cmdnmax_b = 0.050000000000000003; // millimolar
        const double var_intracellular_ions__cmdnmax = ((var_environment__celltype == 1.0) ? (1.3 * var_intracellular_ions__cmdnmax_b) : (var_intracellular_ions__cmdnmax_b)); // millimolar
        const double var_intracellular_ions__csqnmax = 10.0; // millimolar
        const double var_intracellular_ions__kmcmdn = 0.0023800000000000002; // millimolar
        const double var_intracellular_ions__kmcsqn = 0.80000000000000004; // millimolar
        const double var_intracellular_ions__Bcajsr = 1 / (1.0 + var_intracellular_ions__csqnmax * var_intracellular_ions__kmcsqn / pow((var_chaste_interface__intracellular_ions__cajsr + var_intracellular_ions__kmcsqn), 2)); // dimensionless
        const double var_intracellular_ions__kmtrpn = 0.00050000000000000001; // millimolar
        const double var_diff__JdiffK = 0.5 * var_chaste_interface__intracellular_ions__kss - 0.5 * var_chaste_interface__intracellular_ions__ki; // millimolar_per_millisecond
        const double var_INaCa_i__h4_i = 1.0 + (1.0 + var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna2) * var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna1; // dimensionless
        const double var_INaCa_i__h5_i = pow(var_chaste_interface__intracellular_ions__nai, 2) / (var_INaCa_i__h4_i * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h6_i = 1 / var_INaCa_i__h4_i; // dimensionless
        const double var_INaCa_i__k6_i = var_INaCa_i__h6_i * var_INaCa_i__kcaon * var_chaste_interface__intracellular_ions__cai; // dimensionless
        const double var_INaK__P = var_INaK__eP / (1.0 + var_INaK__H / var_INaK__Khp + var_chaste_interface__intracellular_ions__nai / var_INaK__Knap + var_chaste_interface__intracellular_ions__ki / var_INaK__Kxkur); // dimensionless
        const double var_INaK__b3 = var_INaK__H * var_INaK__P * var_INaK__k3m / (1.0 + var_INaK__MgATP / var_INaK__Kmgatp); // dimensionless
        const double var_INaCa_i__h4_ss = 1.0 + (1.0 + var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna2) * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna1; // dimensionless
        const double var_INaCa_i__h5_ss = pow(var_chaste_interface__intracellular_ions__nass, 2) / (var_INaCa_i__h4_ss * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h6_ss = 1 / var_INaCa_i__h4_ss; // dimensionless
        const double var_INaCa_i__k6_ss = var_INaCa_i__h6_ss * var_INaCa_i__kcaon * var_chaste_interface__intracellular_ions__cass; // dimensionless
        const double var_diff__JdiffNa = 0.5 * var_chaste_interface__intracellular_ions__nass - 0.5 * var_chaste_interface__intracellular_ions__nai; // millimolar_per_millisecond
        const double var_intracellular_ions__trpnmax = 0.070000000000000007; // millimolar
        const double var_intracellular_ions__Bcai = 1 / (1.0 + var_intracellular_ions__cmdnmax * var_intracellular_ions__kmcmdn / pow((var_chaste_interface__intracellular_ions__cai + var_intracellular_ions__kmcmdn), 2) + var_intracellular_ions__kmtrpn * var_intracellular_ions__trpnmax / pow((var_chaste_interface__intracellular_ions__cai + var_intracellular_ions__kmtrpn), 2)); // dimensionless
        const double var_membrane__Istim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_membrane__Istim = var_membrane__Istim_converted / HeartConfig::Instance()->GetCapacitance(); // microA_per_microF
        const double var_ICaL__Afcaf = 0.29999999999999999 + 0.59999999999999998 / (1.0 + exp(-1.0 + 0.10000000000000001 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_ICaL__Afcas = 1.0 - var_ICaL__Afcaf; // dimensionless
        const double var_ICaL__dss = 1 / (1.0 + exp(-0.93144208037825049 - 0.23640661938534277 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_ICaL__fca = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcaf + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fcap = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcafp + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fss = 1 / (1.0 + exp(5.2976190476190466 + 0.27056277056277056 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_ICaL__fcass = var_ICaL__fss; // dimensionless
        const double d_dt_chaste_interface_var_ICaL__jca = (-var_chaste_interface__ICaL__jca + var_ICaL__fcass) / var_ICaL__tjca; // 1 / millisecond
        const double var_ICaL__td = 0.59999999999999998 + 1 / (exp(1.26 + 0.089999999999999997 * var_chaste_interface__membrane__v) + exp(-0.30000000000000004 - 0.050000000000000003 * var_chaste_interface__membrane__v)); // millisecond
        const double d_dt_chaste_interface_var_ICaL__d = (-var_chaste_interface__ICaL__d + var_ICaL__dss) / var_ICaL__td; // 1 / millisecond
        const double var_ICaL__tfcaf = 7.0 + 1 / (0.040000000000000001 * exp(0.5714285714285714 - 0.14285714285714285 * var_chaste_interface__membrane__v) + 0.040000000000000001 * exp(-0.5714285714285714 + 0.14285714285714285 * var_chaste_interface__membrane__v)); // millisecond
        const double d_dt_chaste_interface_var_ICaL__fcaf = (-var_chaste_interface__ICaL__fcaf + var_ICaL__fcass) / var_ICaL__tfcaf; // 1 / millisecond
        const double var_ICaL__tfcafp = 2.5 * var_ICaL__tfcaf; // millisecond
        const double d_dt_chaste_interface_var_ICaL__fcafp = (-var_chaste_interface__ICaL__fcafp + var_ICaL__fcass) / var_ICaL__tfcafp; // 1 / millisecond
        const double var_ICaL__tfcas = 100.0 + 1 / (0.00012 * exp(0.14285714285714285 * var_chaste_interface__membrane__v) + 0.00012 * exp(-0.33333333333333331 * var_chaste_interface__membrane__v)); // millisecond
        const double d_dt_chaste_interface_var_ICaL__fcas = (-var_chaste_interface__ICaL__fcas + var_ICaL__fcass) / var_ICaL__tfcas; // 1 / millisecond
        const double var_ICaL__tff = 7.0 + 1 / (0.0044999999999999997 * exp(2.0 + 0.10000000000000001 * var_chaste_interface__membrane__v) + 0.0044999999999999997 * exp(-2.0 - 0.10000000000000001 * var_chaste_interface__membrane__v)); // millisecond
        const double d_dt_chaste_interface_var_ICaL__ff = (-var_chaste_interface__ICaL__ff + var_ICaL__fss) / var_ICaL__tff; // 1 / millisecond
        const double var_ICaL__tffp = 2.5 * var_ICaL__tff; // millisecond
        const double d_dt_chaste_interface_var_ICaL__ffp = (-var_chaste_interface__ICaL__ffp + var_ICaL__fss) / var_ICaL__tffp; // 1 / millisecond
        const double var_ICaL__tfs = 1000.0 + 1 / (3.4999999999999997e-5 * exp(0.83333333333333337 + 0.16666666666666666 * var_chaste_interface__membrane__v) + 3.4999999999999997e-5 * exp(-1.25 - 0.25 * var_chaste_interface__membrane__v)); // millisecond
        const double d_dt_chaste_interface_var_ICaL__fs = (-var_chaste_interface__ICaL__fs + var_ICaL__fss) / var_ICaL__tfs; // 1 / millisecond
        const double var_IK1__rk1 = 1 / (1.0 + exp(11.145054250500367 + 0.10534077741493732 * var_chaste_interface__membrane__v - 0.27388602127883704 * NV_Ith_S(mParameters, 3))); // millisecond
        const double var_IK1__txk1 = 122.2 / (exp(3.4155488244627148 + 0.014423770373575654 * var_chaste_interface__membrane__v) + exp(-6.2475442043222005 - 0.049115913555992145 * var_chaste_interface__membrane__v)); // millisecond
        const double var_IK1__xk1ss = 1 / (1.0 + exp((-144.59 - var_chaste_interface__membrane__v - 2.5537999999999998 * NV_Ith_S(mParameters, 3)) / (3.8115000000000001 + 1.5691999999999999 * NV_Ith_S(mParameters, 3)))); // dimensionless
        const double d_dt_chaste_interface_var_IK1__xk1 = (-var_chaste_interface__IK1__xk1 + var_IK1__xk1ss) / var_IK1__txk1; // 1 / millisecond
        const double var_IKb__xkb = 1 / (1.0 + exp(0.78953107960741553 - 0.054525627044711013 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_IKr__Axrf = 1 / (1.0 + exp(1.4344412457471867 + 0.026171159382360639 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_IKr__Axrs = 1.0 - var_IKr__Axrf; // dimensionless
        const double var_IKr__rkr = 1 / ((1.0 + exp(0.73333333333333328 + 0.013333333333333334 * var_chaste_interface__membrane__v)) * (1.0 + exp(-0.33333333333333331 + 0.033333333333333333 * var_chaste_interface__membrane__v))); // dimensionless
        const double var_IKr__txrf = 12.98 + 1 / (4.1230000000000003e-5 * exp(2.3444553483807655 - 0.049067713444553483 * var_chaste_interface__membrane__v) + 0.36520000000000002 * exp(-8.182993021452571 + 0.25846471956577927 * var_chaste_interface__membrane__v)); // millisecond
        const double var_IKr__txrs = 1.865 + 1 / (1.128e-5 * exp(1.146491904394757 - 0.038550501156515031 * var_chaste_interface__membrane__v) + 0.066290000000000002 * exp(-4.7178789938817136 + 0.13596193065941536 * var_chaste_interface__membrane__v)); // millisecond
        const double var_IKr__xr = var_IKr__Axrf * var_chaste_interface__IKr__xrf + var_IKr__Axrs * var_chaste_interface__IKr__xrs; // dimensionless
        const double var_IKr__xrss = 1 / (1.0 + exp(-1.2280159080866107 - 0.14729709824716453 * var_chaste_interface__membrane__v)); // dimensionless
        const double d_dt_chaste_interface_var_IKr__xrf = (-var_chaste_interface__IKr__xrf + var_IKr__xrss) / var_IKr__txrf; // 1 / millisecond
        const double d_dt_chaste_interface_var_IKr__xrs = (-var_chaste_interface__IKr__xrs + var_IKr__xrss) / var_IKr__txrs; // 1 / millisecond
        const double var_IKs__txs1 = 1 / (0.001292 * exp(-0.91304347826086951 - 0.0043478260869565218 * var_chaste_interface__membrane__v) + 0.00023259999999999999 * exp(2.7123595505617977 + 0.056179775280898875 * var_chaste_interface__membrane__v)) + var_IKs__txs1_max; // millisecond
        const double var_IKs__txs2 = 1 / (0.019300000000000001 * exp(-2.1464516129032258 - 0.032258064516129031 * var_chaste_interface__membrane__v) + 0.01 * exp(-2.5 + 0.050000000000000003 * var_chaste_interface__membrane__v)); // millisecond
        const double var_IKs__xs1ss = 1 / (1.0 + exp(-1.2987012987012987 - 0.11195700850873264 * var_chaste_interface__membrane__v)); // dimensionless
        const double d_dt_chaste_interface_var_IKs__xs1 = (-var_chaste_interface__IKs__xs1 + var_IKs__xs1ss) / var_IKs__txs1; // 1 / millisecond
        const double var_IKs__xs2ss = var_IKs__xs1ss; // dimensionless
        const double d_dt_chaste_interface_var_IKs__xs2 = (-var_chaste_interface__IKs__xs2 + var_IKs__xs2ss) / var_IKs__txs2; // 1 / millisecond
        const double var_INa__hss = 1 / (1.0 + exp((var_INa__hssV1 + var_chaste_interface__membrane__v) / var_INa__hssV2)); // dimensionless
        const double var_INa__hssp = 1 / (1.0 + exp(14.640157739073281 + 0.16431153466973381 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_INa__jss = var_INa__hss; // dimensionless
        const double var_INa__mss = 1 / (1.0 + exp((-var_INa__mssV1 - var_chaste_interface__membrane__v) / var_INa__mssV2)); // dimensionless
        const double var_INa__thf = 1 / (6.149 * exp(0.025140601874691665 + 0.049333991119881598 * var_chaste_interface__membrane__v) + 1.432e-5 * exp(-0.19029435163086714 - 0.15910898965791567 * var_chaste_interface__membrane__v)); // millisecond
        const double d_dt_chaste_interface_var_INa__hf = (-var_chaste_interface__INa__hf + var_INa__hss) / var_INa__thf; // 1 / millisecond
        const double var_INa__ths = 1 / (0.0097940000000000006 * exp(-0.63992869875222813 - 0.035650623885918005 * var_chaste_interface__membrane__v) + 0.33429999999999999 * exp(0.10112954465231205 + 0.017649135192375574 * var_chaste_interface__membrane__v)); // millisecond
        const double d_dt_chaste_interface_var_INa__hs = (-var_chaste_interface__INa__hs + var_INa__hss) / var_INa__ths; // 1 / millisecond
        const double var_INa__thsp = 3.0 * var_INa__ths; // millisecond
        const double d_dt_chaste_interface_var_INa__hsp = (-var_chaste_interface__INa__hsp + var_INa__hssp) / var_INa__thsp; // 1 / millisecond
        const double var_INa__tj = 2.0379999999999998 + 1 / (0.30520000000000003 * exp(0.025854356306892066 + 0.02600780234070221 * var_chaste_interface__membrane__v) + 0.021360000000000001 * exp(-12.148291269170388 - 0.12075836251660427 * var_chaste_interface__membrane__v)); // millisecond
        const double d_dt_chaste_interface_var_INa__j = (-var_chaste_interface__INa__j + var_INa__jss) / var_INa__tj; // 1 / millisecond
        const double var_INa__tjp = 1.46 * var_INa__tj; // millisecond
        const double d_dt_chaste_interface_var_INa__jp = (-var_chaste_interface__INa__jp + var_INa__jss) / var_INa__tjp; // 1 / millisecond
        const double var_INa__tm = 1 / (var_INa__mtD1 * exp((var_INa__mtV1 + var_chaste_interface__membrane__v) / var_INa__mtV2) + var_INa__mtD2 * exp((-var_INa__mtV3 - var_chaste_interface__membrane__v) / var_INa__mtV4)); // millisecond
        const double d_dt_chaste_interface_var_INa__m = (-var_chaste_interface__INa__m + var_INa__mss) / var_INa__tm; // 1 / millisecond
        const double var_INaL__hLss = 1 / (1.0 + exp(11.700053418803417 + 0.13354700854700854 * var_chaste_interface__membrane__v)); // dimensionless
        const double d_dt_chaste_interface_var_INaL__hL = (-var_chaste_interface__INaL__hL + var_INaL__hLss) / var_INaL__thL; // 1 / millisecond
        const double var_INaL__hLssp = 1 / (1.0 + exp(12.528044871794872 + 0.13354700854700854 * var_chaste_interface__membrane__v)); // dimensionless
        const double d_dt_chaste_interface_var_INaL__hLp = (-var_chaste_interface__INaL__hLp + var_INaL__hLssp) / var_INaL__thLp; // 1 / millisecond
        const double var_INaL__mLss = 1 / (1.0 + exp(-8.1401975683890573 - 0.18996960486322187 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_INaL__tmL = var_INa__tm; // millisecond
        const double d_dt_chaste_interface_var_INaL__mL = (-var_chaste_interface__INaL__mL + var_INaL__mLss) / var_INaL__tmL; // 1 / millisecond
        const double var_Ito__AiF = 1 / (1.0 + exp(-1.4126984126984128 + 0.0066137566137566143 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_Ito__AiS = 1.0 - var_Ito__AiF; // dimensionless
        const double var_Ito__ass = 1 / (1.0 + exp(0.96761133603238858 - 0.067476383265856948 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_Ito__assp = 1 / (1.0 + exp(1.6423751686909582 - 0.067476383265856948 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_Ito__delta_epi = ((var_environment__celltype == 1.0) ? (1.0 - 0.94999999999999996 / (1.0 + exp(14.0 + 0.20000000000000001 * var_chaste_interface__membrane__v))) : (1.0)); // dimensionless
        const double var_Ito__dti_develop = 1.3540000000000001 + 0.0001 / (exp(56.77808727948004 - 4.6425255338904359 * var_chaste_interface__membrane__v) + exp(-10.534927627438641 + 0.062932662051604776 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_Ito__dti_recover = 1.0 - 0.5 / (1.0 + exp(3.5 + 0.050000000000000003 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_Ito__i = var_Ito__AiF * var_chaste_interface__Ito__iF + var_Ito__AiS * var_chaste_interface__Ito__iS; // dimensionless
        const double var_Ito__ip = var_Ito__AiF * var_chaste_interface__Ito__iFp + var_Ito__AiS * var_chaste_interface__Ito__iSp; // dimensionless
        const double var_Ito__iss = 1 / (1.0 + exp(7.6939240063036234 + 0.17510068289266328 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_Ito__ta = 1.0515000000000001 / (3.5 / (1.0 + exp(3.403513787634354 + 0.034035137876343539 * var_chaste_interface__membrane__v)) + 0.82719827942757873 / (1.0 + exp(0.62658348478969694 - 0.034035137876343539 * var_chaste_interface__membrane__v))); // millisecond
        const double d_dt_chaste_interface_var_Ito__a = (-var_chaste_interface__Ito__a + var_Ito__ass) / var_Ito__ta; // 1 / millisecond
        const double d_dt_chaste_interface_var_Ito__ap = (-var_chaste_interface__Ito__ap + var_Ito__assp) / var_Ito__ta; // 1 / millisecond
        const double var_Ito__tiF_b = 4.5620000000000003 + 1 / (0.39329999999999998 * exp(-1.0 - 0.01 * var_chaste_interface__membrane__v) + 0.08004 * exp(3.0138637733574445 + 0.060277275467148887 * var_chaste_interface__membrane__v)); // millisecond
        const double var_Ito__tiF = var_Ito__delta_epi * var_Ito__tiF_b; // millisecond
        const double d_dt_chaste_interface_var_Ito__iF = (-var_chaste_interface__Ito__iF + var_Ito__iss) / var_Ito__tiF; // 1 / millisecond
        const double var_Ito__tiFp = var_Ito__dti_develop * var_Ito__dti_recover * var_Ito__tiF; // millisecond
        const double d_dt_chaste_interface_var_Ito__iFp = (-var_chaste_interface__Ito__iFp + var_Ito__iss) / var_Ito__tiFp; // 1 / millisecond
        const double var_Ito__tiS_b = 23.620000000000001 + 1 / (1.7800000000000001e-8 * exp(14.123035029087756 + 0.12377769525931426 * var_chaste_interface__membrane__v) + 0.0014159999999999999 * exp(-1.6345469940728197 - 0.016934801016088061 * var_chaste_interface__membrane__v)); // millisecond
        const double var_Ito__tiS = var_Ito__delta_epi * var_Ito__tiS_b; // millisecond
        const double d_dt_chaste_interface_var_Ito__iS = (-var_chaste_interface__Ito__iS + var_Ito__iss) / var_Ito__tiS; // 1 / millisecond
        const double var_Ito__tiSp = var_Ito__dti_develop * var_Ito__dti_recover * var_Ito__tiS; // millisecond
        const double d_dt_chaste_interface_var_Ito__iSp = (-var_chaste_interface__Ito__iSp + var_Ito__iss) / var_Ito__tiSp; // 1 / millisecond
        const double var_ICaL__PhiCaK = ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) / NV_Ith_S(mParameters, 5))) ? (-9.9999999999999995e-8 * (-0.75 * NV_Ith_S(mParameters, 3) + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * (-0.75 * NV_Ith_S(mParameters, 3) + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(9.9999999999999995e-8)) + 9.9999999999999995e-8 * (-0.75 * NV_Ith_S(mParameters, 3) + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(-9.9999999999999995e-8))) * (9.9999999999999995e-8 * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) / NV_Ith_S(mParameters, 5) + var_chaste_interface__membrane__v) * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19))) : (pow(NV_Ith_S(mParameters, 5), 2) * (-0.75 * NV_Ith_S(mParameters, 3) + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))) * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))); // dimensionless
        const double var_ICaL__ICaK = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaK * var_ICaL__PhiCaK * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaKp * var_ICaL__PhiCaK * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__kss = -var_diff__JdiffK - var_ICaL__ICaK * var_cell_geometry__Acap * var_intracellular_ions__cm / (var_cell_geometry__vss * NV_Ith_S(mParameters, 5)); // millimolar / millisecond
        const double var_ICaL__PhiCaL = ((fabs(var_chaste_interface__membrane__v) < 4.9999999999999998e-8 * fabs(NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) / NV_Ith_S(mParameters, 5))) ? (-1.9999999999999999e-7 * (-0.34100000000000003 * NV_Ith_S(mParameters, 2) + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) / NV_Ith_S(mParameters, 5) + var_chaste_interface__membrane__v) * (1.9999999999999999e-7 * (-0.34100000000000003 * NV_Ith_S(mParameters, 2) + var_chaste_interface__intracellular_ions__cass * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(9.9999999999999995e-8)) + 1.9999999999999999e-7 * (-0.34100000000000003 * NV_Ith_S(mParameters, 2) + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(-9.9999999999999995e-8))) * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19))) : (4.0 * pow(NV_Ith_S(mParameters, 5), 2) * (-0.34100000000000003 * NV_Ith_S(mParameters, 2) + var_chaste_interface__intracellular_ions__cass * exp(2.0 * var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))) * var_chaste_interface__membrane__v / ((-1.0 + exp(2.0 * var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))) * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))); // dimensionless
        const double var_ICaL__ICaL = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCa * var_ICaL__PhiCaL * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCap * var_ICaL__PhiCaL * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__PhiCaNa = ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) / NV_Ith_S(mParameters, 5))) ? (-9.9999999999999995e-8 * (-0.75 * NV_Ith_S(mParameters, 4) + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * (-0.75 * NV_Ith_S(mParameters, 4) + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(9.9999999999999995e-8)) + 9.9999999999999995e-8 * (-0.75 * NV_Ith_S(mParameters, 4) + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(-9.9999999999999995e-8))) * (9.9999999999999995e-8 * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) / NV_Ith_S(mParameters, 5) + var_chaste_interface__membrane__v) * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19))) : (pow(NV_Ith_S(mParameters, 5), 2) * (-0.75 * NV_Ith_S(mParameters, 4) + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))) * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))); // dimensionless
        const double var_ICaL__ICaNa = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaNa * var_ICaL__PhiCaNa * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaNap * var_ICaL__PhiCaNa * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICab__ICab = ((fabs(var_chaste_interface__membrane__v) < 4.9999999999999998e-8 * fabs(NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) / NV_Ith_S(mParameters, 5))) ? (-1.9999999999999999e-7 * (-0.34100000000000003 * NV_Ith_S(mParameters, 2) + var_chaste_interface__intracellular_ions__cai * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) / NV_Ith_S(mParameters, 5) + var_chaste_interface__membrane__v) * (1.9999999999999999e-7 * (-0.34100000000000003 * NV_Ith_S(mParameters, 2) + var_chaste_interface__intracellular_ions__cai * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(9.9999999999999995e-8)) + 1.9999999999999999e-7 * (-0.34100000000000003 * NV_Ith_S(mParameters, 2) + var_chaste_interface__intracellular_ions__cai * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(-9.9999999999999995e-8))) * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19))) : (4.0 * pow(NV_Ith_S(mParameters, 5), 2) * (-0.34100000000000003 * NV_Ith_S(mParameters, 2) + var_chaste_interface__intracellular_ions__cai * exp(2.0 * var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))) * NV_Ith_S(mParameters, 8) * var_chaste_interface__membrane__v / ((-1.0 + exp(2.0 * var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))) * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))); // microA_per_microF
        const double var_INaCa_i__hca = exp(var_INaCa_i__qca * var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19))); // dimensionless
        const double var_INaCa_i__hna = exp(var_INaCa_i__qna * var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19))); // dimensionless
        const double var_INaCa_i__h1_i = 1.0 + (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h1_ss = 1.0 + (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h2_i = var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nai / (var_INaCa_i__h1_i * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h2_ss = var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nass / (var_INaCa_i__h1_ss * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h3_i = 1 / var_INaCa_i__h1_i; // dimensionless
        const double var_INaCa_i__h3_ss = 1 / var_INaCa_i__h1_ss; // dimensionless
        const double var_INaCa_i__h7_i = 1.0 + (1.0 + 1 / var_INaCa_i__hna) * NV_Ith_S(mParameters, 4) / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h7_ss = 1.0 + (1.0 + 1 / var_INaCa_i__hna) * NV_Ith_S(mParameters, 4) / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h8_i = NV_Ith_S(mParameters, 4) / (var_INaCa_i__h7_i * var_INaCa_i__hna * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h8_ss = NV_Ith_S(mParameters, 4) / (var_INaCa_i__h7_ss * var_INaCa_i__hna * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h9_i = 1 / var_INaCa_i__h7_i; // dimensionless
        const double var_INaCa_i__h9_ss = 1 / var_INaCa_i__h7_ss; // dimensionless
        const double var_INaCa_i__k3p_i = var_INaCa_i__h9_i * var_INaCa_i__wca; // dimensionless
        const double var_INaCa_i__k3p_ss = var_INaCa_i__h9_ss * var_INaCa_i__wca; // dimensionless
        const double var_INaCa_i__k3pp_i = var_INaCa_i__h8_i * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k3_i = var_INaCa_i__k3p_i + var_INaCa_i__k3pp_i; // dimensionless
        const double var_INaCa_i__k3pp_ss = var_INaCa_i__h8_ss * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k3_ss = var_INaCa_i__k3p_ss + var_INaCa_i__k3pp_ss; // dimensionless
        const double var_INaCa_i__k4p_i = var_INaCa_i__h3_i * var_INaCa_i__wca / var_INaCa_i__hca; // dimensionless
        const double var_INaCa_i__k4p_ss = var_INaCa_i__h3_ss * var_INaCa_i__wca / var_INaCa_i__hca; // dimensionless
        const double var_INaCa_i__k4pp_i = var_INaCa_i__h2_i * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k4_i = var_INaCa_i__k4p_i + var_INaCa_i__k4pp_i; // dimensionless
        const double var_INaCa_i__k4pp_ss = var_INaCa_i__h2_ss * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k4_ss = var_INaCa_i__k4p_ss + var_INaCa_i__k4pp_ss; // dimensionless
        const double var_INaCa_i__k7_i = var_INaCa_i__h2_i * var_INaCa_i__h5_i * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k7_ss = var_INaCa_i__h2_ss * var_INaCa_i__h5_ss * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k8_i = var_INaCa_i__h11_i * var_INaCa_i__h8_i * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k8_ss = var_INaCa_i__h11_ss * var_INaCa_i__h8_ss * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__x1_i = (var_INaCa_i__k2_i + var_INaCa_i__k3_i) * var_INaCa_i__k5_i * var_INaCa_i__k7_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k2_i * var_INaCa_i__k4_i; // dimensionless
        const double var_INaCa_i__x1_ss = (var_INaCa_i__k2_ss + var_INaCa_i__k3_ss) * var_INaCa_i__k5_ss * var_INaCa_i__k7_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k2_ss * var_INaCa_i__k4_ss; // dimensionless
        const double var_INaCa_i__x2_i = (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k4_i * var_INaCa_i__k6_i + (var_INaCa_i__k4_i + var_INaCa_i__k5_i) * var_INaCa_i__k1_i * var_INaCa_i__k7_i; // dimensionless
        const double var_INaCa_i__x2_ss = (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k4_ss * var_INaCa_i__k6_ss + (var_INaCa_i__k4_ss + var_INaCa_i__k5_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k7_ss; // dimensionless
        const double var_INaCa_i__x3_i = (var_INaCa_i__k2_i + var_INaCa_i__k3_i) * var_INaCa_i__k6_i * var_INaCa_i__k8_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k1_i * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__x3_ss = (var_INaCa_i__k2_ss + var_INaCa_i__k3_ss) * var_INaCa_i__k6_ss * var_INaCa_i__k8_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__x4_i = (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k3_i * var_INaCa_i__k5_i + (var_INaCa_i__k4_i + var_INaCa_i__k5_i) * var_INaCa_i__k2_i * var_INaCa_i__k8_i; // dimensionless
        const double var_INaCa_i__E1_i = var_INaCa_i__x1_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E2_i = var_INaCa_i__x2_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E3_i = var_INaCa_i__x3_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E4_i = var_INaCa_i__x4_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__JncxCa_i = var_INaCa_i__E2_i * var_INaCa_i__k2_i - var_INaCa_i__E1_i * var_INaCa_i__k1_i; // millimolar_per_millisecond
        const double var_INaCa_i__JncxNa_i = var_INaCa_i__E3_i * var_INaCa_i__k4pp_i - var_INaCa_i__E2_i * var_INaCa_i__k3pp_i + 3.0 * var_INaCa_i__E4_i * var_INaCa_i__k7_i - 3.0 * var_INaCa_i__E1_i * var_INaCa_i__k8_i; // millimolar_per_millisecond
        const double var_INaCa_i__x4_ss = (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k3_ss * var_INaCa_i__k5_ss + (var_INaCa_i__k4_ss + var_INaCa_i__k5_ss) * var_INaCa_i__k2_ss * var_INaCa_i__k8_ss; // dimensionless
        const double var_INaCa_i__E1_ss = var_INaCa_i__x1_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E2_ss = var_INaCa_i__x2_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E3_ss = var_INaCa_i__x3_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E4_ss = var_INaCa_i__x4_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__JncxCa_ss = var_INaCa_i__E2_ss * var_INaCa_i__k2_ss - var_INaCa_i__E1_ss * var_INaCa_i__k1_ss; // millimolar_per_millisecond
        const double var_INaCa_i__JncxNa_ss = var_INaCa_i__E3_ss * var_INaCa_i__k4pp_ss - var_INaCa_i__E2_ss * var_INaCa_i__k3pp_ss + 3.0 * var_INaCa_i__E4_ss * var_INaCa_i__k7_ss - 3.0 * var_INaCa_i__E1_ss * var_INaCa_i__k8_ss; // millimolar_per_millisecond
        const double var_INaK__Knai = var_INaK__Knai0 * exp(0.33333333333333331 * var_INaK__delta * var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19))); // millimolar
        const double var_INaK__Knao = var_INaK__Knao0 * exp(0.33333333333333331 * (1.0 - var_INaK__delta) * var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19))); // millimolar
        const double var_INaK__a1 = pow(var_chaste_interface__intracellular_ions__nai, 3) * var_INaK__k1p / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__ki / var_INaK__Kki), 2) + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3)) * pow(var_INaK__Knai, 3)); // dimensionless
        const double var_INaK__a3 = pow(NV_Ith_S(mParameters, 3), 2) * var_INaK__k3p / ((-1.0 + pow((1.0 + NV_Ith_S(mParameters, 3) / var_INaK__Kko), 2) + pow((1.0 + NV_Ith_S(mParameters, 4) / var_INaK__Knao), 3)) * pow(var_INaK__Kko, 2)); // dimensionless
        const double var_INaK__b2 = pow(NV_Ith_S(mParameters, 4), 3) * var_INaK__k2m / ((-1.0 + pow((1.0 + NV_Ith_S(mParameters, 3) / var_INaK__Kko), 2) + pow((1.0 + NV_Ith_S(mParameters, 4) / var_INaK__Knao), 3)) * pow(var_INaK__Knao, 3)); // dimensionless
        const double var_INaK__b4 = pow(var_chaste_interface__intracellular_ions__ki, 2) * var_INaK__k4m / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__ki / var_INaK__Kki), 2) + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3)) * pow(var_INaK__Kki, 2)); // dimensionless
        const double var_INaK__x1 = var_INaK__a1 * var_INaK__a2 * var_INaK__a4 + var_INaK__a1 * var_INaK__a2 * var_INaK__b3 + var_INaK__a2 * var_INaK__b3 * var_INaK__b4 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__x2 = var_INaK__a1 * var_INaK__a2 * var_INaK__a3 + var_INaK__a2 * var_INaK__a3 * var_INaK__b4 + var_INaK__a3 * var_INaK__b1 * var_INaK__b4 + var_INaK__b1 * var_INaK__b2 * var_INaK__b4; // dimensionless
        const double var_INaK__x3 = var_INaK__a2 * var_INaK__a3 * var_INaK__a4 + var_INaK__a3 * var_INaK__a4 * var_INaK__b1 + var_INaK__a4 * var_INaK__b1 * var_INaK__b2 + var_INaK__b1 * var_INaK__b2 * var_INaK__b3; // dimensionless
        const double var_INaK__x4 = var_INaK__a1 * var_INaK__a3 * var_INaK__a4 + var_INaK__a1 * var_INaK__a4 * var_INaK__b2 + var_INaK__a1 * var_INaK__b2 * var_INaK__b3 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__E1 = var_INaK__x1 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E2 = var_INaK__x2 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E3 = var_INaK__x3 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E4 = var_INaK__x4 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__JnakK = 2.0 * var_INaK__E4 * var_INaK__b1 - 2.0 * var_INaK__E3 * var_INaK__a1; // millimolar_per_millisecond
        const double var_INaK__JnakNa = 3.0 * var_INaK__E1 * var_INaK__a3 - 3.0 * var_INaK__E2 * var_INaK__b3; // millimolar_per_millisecond
        const double var_INab__INab = ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) / NV_Ith_S(mParameters, 5))) ? (-3.7499999999999999e-17 * (-NV_Ith_S(mParameters, 4) + var_chaste_interface__intracellular_ions__nai * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) / NV_Ith_S(mParameters, 5) + var_chaste_interface__membrane__v) * (3.7499999999999999e-17 * (-NV_Ith_S(mParameters, 4) + var_chaste_interface__intracellular_ions__nai * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(9.9999999999999995e-8)) + 3.7499999999999999e-17 * (-NV_Ith_S(mParameters, 4) + var_chaste_interface__intracellular_ions__nai * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(-9.9999999999999995e-8))) * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19))) : (3.75e-10 * pow(NV_Ith_S(mParameters, 5), 2) * (-NV_Ith_S(mParameters, 4) + var_chaste_interface__intracellular_ions__nai * exp(var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))) * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))); // microA_per_microF
        const double var_physical_constants__zca = 2.0; // dimensionless
        const double var_physical_constants__zk = 1.0; // dimensionless
        const double var_physical_constants__zna = 1.0; // dimensionless
        const double var_INaCa_i__INaCa_i = 0.80000000000000004 * (var_INaCa_i__JncxCa_i * var_physical_constants__zca + var_INaCa_i__JncxNa_i * var_physical_constants__zna) * var_INaCa_i__Gncx * var_INaCa_i__allo_i; // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__cai = (var_cell_geometry__vss * var_diff__Jdiff / var_cell_geometry__vmyo - var_SERCA__Jup * var_cell_geometry__vnsr / var_cell_geometry__vmyo + 0.5 * (-var_ICab__ICab - var_IpCa__IpCa + 2.0 * var_INaCa_i__INaCa_i) * var_cell_geometry__Acap * var_intracellular_ions__cm / (var_cell_geometry__vmyo * NV_Ith_S(mParameters, 5))) * var_intracellular_ions__Bcai; // millimolar / millisecond
        const double var_INaCa_i__INaCa_ss = 0.20000000000000001 * (var_INaCa_i__JncxCa_ss * var_physical_constants__zca + var_INaCa_i__JncxNa_ss * var_physical_constants__zna) * var_INaCa_i__Gncx * var_INaCa_i__allo_ss; // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__nass = -var_diff__JdiffNa + (-var_ICaL__ICaNa - 3.0 * var_INaCa_i__INaCa_ss) * var_cell_geometry__Acap * var_intracellular_ions__cm / (var_cell_geometry__vss * NV_Ith_S(mParameters, 5)); // millimolar / millisecond
        const double var_INaK__INaK = (var_INaK__JnakK * var_physical_constants__zk + var_INaK__JnakNa * var_physical_constants__zna) * var_INaK__Pnak; // microA_per_microF
        const double var_reversal_potentials__EK = NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) * log(NV_Ith_S(mParameters, 3) / var_chaste_interface__intracellular_ions__ki) / NV_Ith_S(mParameters, 5); // millivolt
        const double var_IK1__IK1 = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IK1__GK1_total * var_IK1__rk1 * var_chaste_interface__IK1__xk1; // microA_per_microF
        const double var_IKb__IKb = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IKb__GKb * var_IKb__xkb; // microA_per_microF
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IKr__GKr_total * var_IKr__rkr * var_IKr__xr; // microA_per_microF
        const double var_Ito__Ito = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * ((1.0 - var_Ito__fItop) * var_chaste_interface__Ito__a * var_Ito__i + var_chaste_interface__Ito__ap * var_Ito__fItop * var_Ito__ip) * var_Ito__Gto; // microA_per_microF
        const double var_reversal_potentials__ENa = NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) * log(NV_Ith_S(mParameters, 4) / var_chaste_interface__intracellular_ions__nai) / NV_Ith_S(mParameters, 5); // millivolt
        const double var_INa__INa = pow(var_chaste_interface__INa__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - var_INa__fINap) * var_INa__h * var_chaste_interface__INa__j + var_INa__fINap * var_INa__hp * var_chaste_interface__INa__jp) * NV_Ith_S(mParameters, 11); // microA_per_microF
        const double var_INaL__INaL = (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - var_INaL__fINaLp) * var_chaste_interface__INaL__hL + var_INaL__fINaLp * var_chaste_interface__INaL__hLp) * var_INaL__GNaL * var_chaste_interface__INaL__mL; // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__nai = var_cell_geometry__vss * var_diff__JdiffNa / var_cell_geometry__vmyo + (-var_INa__INa - var_INaL__INaL - var_INab__INab - 3.0 * var_INaCa_i__INaCa_i - 3.0 * var_INaK__INaK) * var_cell_geometry__Acap * var_intracellular_ions__cm / (var_cell_geometry__vmyo * NV_Ith_S(mParameters, 5)); // millimolar / millisecond
        const double var_reversal_potentials__PKNa = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) * log((NV_Ith_S(mParameters, 4) * var_reversal_potentials__PKNa + NV_Ith_S(mParameters, 3)) / (var_chaste_interface__intracellular_ions__nai * var_reversal_potentials__PKNa + var_chaste_interface__intracellular_ions__ki)) / NV_Ith_S(mParameters, 5); // millivolt
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__membrane__v) * var_IKs__GKs_total * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__ki = var_cell_geometry__vss * var_diff__JdiffK / var_cell_geometry__vmyo + (-var_IK1__IK1 - var_IKb__IKb - var_IKr__IKr - var_IKs__IKs - var_Ito__Ito - var_membrane__Istim + 2.0 * var_INaK__INaK) * var_cell_geometry__Acap * var_intracellular_ions__cm / (var_cell_geometry__vmyo * NV_Ith_S(mParameters, 5)); // millimolar / millisecond
        const double var_ryr__bt = 4.75; // millisecond
        const double var_ryr__a_rel = 0.5 * var_ryr__bt; // millisecond
        const double var_ryr__Jrel_inf_temp = -var_ICaL__ICaL * var_ryr__a_rel / (1.0 + 25.62890625 / pow(var_chaste_interface__intracellular_ions__cajsr, 8)); // dimensionless
        const double var_ryr__Jrel_inf = ((var_environment__celltype == 2.0) ? (1.7 * var_ryr__Jrel_inf_temp) : (var_ryr__Jrel_inf_temp)); // dimensionless
        const double var_ryr__btp = 1.25 * var_ryr__bt; // millisecond
        const double var_ryr__a_relp = 0.5 * var_ryr__btp; // millisecond
        const double var_ryr__Jrel_temp = -var_ICaL__ICaL * var_ryr__a_relp / (1.0 + 25.62890625 / pow(var_chaste_interface__intracellular_ions__cajsr, 8)); // dimensionless
        const double var_ryr__Jrel_infp = ((var_environment__celltype == 2.0) ? (1.7 * var_ryr__Jrel_temp) : (var_ryr__Jrel_temp)); // dimensionless
        const double var_ryr__fJrelp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_ryr__Jrel = ((1.0 - var_ryr__fJrelp) * var_chaste_interface__ryr__Jrelnp + var_chaste_interface__ryr__Jrelp * var_ryr__fJrelp) * NV_Ith_S(mParameters, 0); // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_intracellular_ions__cass = (-var_diff__Jdiff + var_cell_geometry__vjsr * var_ryr__Jrel / var_cell_geometry__vss + 0.5 * (-var_ICaL__ICaL + 2.0 * var_INaCa_i__INaCa_ss) * var_cell_geometry__Acap * var_intracellular_ions__cm / (var_cell_geometry__vss * NV_Ith_S(mParameters, 5))) * var_intracellular_ions__Bcass; // millimolar / millisecond
        const double var_ryr__tau_rel_temp = var_ryr__bt / (1.0 + 0.0123 / var_chaste_interface__intracellular_ions__cajsr); // millisecond
        const double var_ryr__tau_rel = ((var_ryr__tau_rel_temp < 0.001) ? (0.001) : (var_ryr__tau_rel_temp)); // millisecond
        const double d_dt_chaste_interface_var_ryr__Jrelnp = (-var_chaste_interface__ryr__Jrelnp + var_ryr__Jrel_inf) / var_ryr__tau_rel; // 1 / millisecond
        const double var_ryr__tau_relp_temp = var_ryr__btp / (1.0 + 0.0123 / var_chaste_interface__intracellular_ions__cajsr); // millisecond
        const double var_ryr__tau_relp = ((var_ryr__tau_relp_temp < 0.001) ? (0.001) : (var_ryr__tau_relp_temp)); // millisecond
        const double d_dt_chaste_interface_var_ryr__Jrelp = (-var_chaste_interface__ryr__Jrelp + var_ryr__Jrel_infp) / var_ryr__tau_relp; // 1 / millisecond
        const double var_trans_flux__Jtr = 0.01 * var_chaste_interface__intracellular_ions__cansr - 0.01 * var_chaste_interface__intracellular_ions__cajsr; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_intracellular_ions__cajsr = (-var_ryr__Jrel + var_trans_flux__Jtr) * var_intracellular_ions__Bcajsr; // millimolar / millisecond
        const double d_dt_chaste_interface_var_intracellular_ions__cansr = -var_cell_geometry__vjsr * var_trans_flux__Jtr / var_cell_geometry__vnsr + var_SERCA__Jup; // millimolar / millisecond

        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_membrane__v = 0.0;
        }
        else
        {
            d_dt_chaste_interface_var_membrane__v = -var_ICaL__ICaK - var_ICaL__ICaL - var_ICaL__ICaNa - var_ICab__ICab - var_IK1__IK1 - var_IKb__IKb - var_IKr__IKr - var_IKs__IKs - var_INa__INa - var_INaCa_i__INaCa_i - var_INaCa_i__INaCa_ss - var_INaK__INaK - var_INaL__INaL - var_INab__INab - var_IpCa__IpCa - var_Ito__Ito - var_membrane__Istim; // millivolt / millisecond
        }
        
        NV_Ith_S(rDY,0) = d_dt_chaste_interface_var_membrane__v;
        NV_Ith_S(rDY,1) = d_dt_chaste_interface_var_intracellular_ions__cai;
        NV_Ith_S(rDY,2) = d_dt_chaste_interface_var_CaMK__CaMKt;
        NV_Ith_S(rDY,3) = d_dt_chaste_interface_var_intracellular_ions__nai;
        NV_Ith_S(rDY,4) = d_dt_chaste_interface_var_intracellular_ions__nass;
        NV_Ith_S(rDY,5) = d_dt_chaste_interface_var_intracellular_ions__ki;
        NV_Ith_S(rDY,6) = d_dt_chaste_interface_var_intracellular_ions__kss;
        NV_Ith_S(rDY,7) = d_dt_chaste_interface_var_intracellular_ions__cass;
        NV_Ith_S(rDY,8) = d_dt_chaste_interface_var_intracellular_ions__cansr;
        NV_Ith_S(rDY,9) = d_dt_chaste_interface_var_intracellular_ions__cajsr;
        NV_Ith_S(rDY,10) = d_dt_chaste_interface_var_INa__m;
        NV_Ith_S(rDY,11) = d_dt_chaste_interface_var_INa__hf;
        NV_Ith_S(rDY,12) = d_dt_chaste_interface_var_INa__hs;
        NV_Ith_S(rDY,13) = d_dt_chaste_interface_var_INa__j;
        NV_Ith_S(rDY,14) = d_dt_chaste_interface_var_INa__hsp;
        NV_Ith_S(rDY,15) = d_dt_chaste_interface_var_INa__jp;
        NV_Ith_S(rDY,16) = d_dt_chaste_interface_var_INaL__mL;
        NV_Ith_S(rDY,17) = d_dt_chaste_interface_var_INaL__hL;
        NV_Ith_S(rDY,18) = d_dt_chaste_interface_var_INaL__hLp;
        NV_Ith_S(rDY,19) = d_dt_chaste_interface_var_Ito__a;
        NV_Ith_S(rDY,20) = d_dt_chaste_interface_var_Ito__iF;
        NV_Ith_S(rDY,21) = d_dt_chaste_interface_var_Ito__iS;
        NV_Ith_S(rDY,22) = d_dt_chaste_interface_var_Ito__ap;
        NV_Ith_S(rDY,23) = d_dt_chaste_interface_var_Ito__iFp;
        NV_Ith_S(rDY,24) = d_dt_chaste_interface_var_Ito__iSp;
        NV_Ith_S(rDY,25) = d_dt_chaste_interface_var_ICaL__d;
        NV_Ith_S(rDY,26) = d_dt_chaste_interface_var_ICaL__ff;
        NV_Ith_S(rDY,27) = d_dt_chaste_interface_var_ICaL__fs;
        NV_Ith_S(rDY,28) = d_dt_chaste_interface_var_ICaL__fcaf;
        NV_Ith_S(rDY,29) = d_dt_chaste_interface_var_ICaL__fcas;
        NV_Ith_S(rDY,30) = d_dt_chaste_interface_var_ICaL__jca;
        NV_Ith_S(rDY,31) = d_dt_chaste_interface_var_ICaL__ffp;
        NV_Ith_S(rDY,32) = d_dt_chaste_interface_var_ICaL__fcafp;
        NV_Ith_S(rDY,33) = d_dt_chaste_interface_var_ICaL__nca;
        NV_Ith_S(rDY,34) = d_dt_chaste_interface_var_IKr__xrf;
        NV_Ith_S(rDY,35) = d_dt_chaste_interface_var_IKr__xrs;
        NV_Ith_S(rDY,36) = d_dt_chaste_interface_var_IKs__xs1;
        NV_Ith_S(rDY,37) = d_dt_chaste_interface_var_IKs__xs2;
        NV_Ith_S(rDY,38) = d_dt_chaste_interface_var_IK1__xk1;
        NV_Ith_S(rDY,39) = d_dt_chaste_interface_var_ryr__Jrelnp;
        NV_Ith_S(rDY,40) = d_dt_chaste_interface_var_ryr__Jrelp;
    }

    void Cellohara_rudy_2011_epiFromCellMLCvode::EvaluateAnalyticJacobian(double var_chaste_interface__environment__time, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__intracellular_ions__cai = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__CaMK__CaMKt = NV_Ith_S(rY, 2);
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__intracellular_ions__nai = NV_Ith_S(rY, 3);
        // Units: millimolar; Initial value: 7.0
        double var_chaste_interface__intracellular_ions__nass = NV_Ith_S(rY, 4);
        // Units: millimolar; Initial value: 7.0
        double var_chaste_interface__intracellular_ions__ki = NV_Ith_S(rY, 5);
        // Units: millimolar; Initial value: 145.0
        double var_chaste_interface__intracellular_ions__kss = NV_Ith_S(rY, 6);
        // Units: millimolar; Initial value: 145.0
        double var_chaste_interface__intracellular_ions__cass = NV_Ith_S(rY, 7);
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__intracellular_ions__cansr = NV_Ith_S(rY, 8);
        // Units: millimolar; Initial value: 1.2
        double var_chaste_interface__intracellular_ions__cajsr = NV_Ith_S(rY, 9);
        // Units: millimolar; Initial value: 1.2
        double var_chaste_interface__INa__m = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__INa__hf = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__hs = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__j = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__hsp = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__jp = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INaL__mL = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__INaL__hL = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INaL__hLp = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__a = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__Ito__iF = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__iS = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__ap = NV_Ith_S(rY, 22);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__Ito__iFp = NV_Ith_S(rY, 23);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__iSp = NV_Ith_S(rY, 24);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__d = NV_Ith_S(rY, 25);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ICaL__ff = NV_Ith_S(rY, 26);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fs = NV_Ith_S(rY, 27);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcaf = NV_Ith_S(rY, 28);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcas = NV_Ith_S(rY, 29);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__jca = NV_Ith_S(rY, 30);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__ffp = NV_Ith_S(rY, 31);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcafp = NV_Ith_S(rY, 32);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__nca = NV_Ith_S(rY, 33);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKr__xrf = NV_Ith_S(rY, 34);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKr__xrs = NV_Ith_S(rY, 35);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKs__xs1 = NV_Ith_S(rY, 36);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKs__xs2 = NV_Ith_S(rY, 37);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IK1__xk1 = NV_Ith_S(rY, 38);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ryr__Jrelnp = NV_Ith_S(rY, 39);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ryr__Jrelp = NV_Ith_S(rY, 40);
        // Units: dimensionless; Initial value: 0.0
        const double var_x0 = -0.34100000000000003 * NV_Ith_S(mParameters, 2);
        const double var_x1 = exp(9.9999999999999995e-8);
        const double var_x2 = 1 / (-1.0 + var_x1);
        const double var_x3 = 1.9999999999999999e-7 * NV_Ith_S(mParameters, 5);
        const double var_x4 = var_x2 * var_x3;
        const double var_x5 = exp(-9.9999999999999995e-8);
        const double var_x6 = 1 / (-1.0 + var_x5);
        const double var_x7 = var_x3 * var_x6;
        const double var_x8 = var_x7 * (var_x0 + var_x5 * var_chaste_interface__intracellular_ions__cai) * NV_Ith_S(mParameters, 8);
        const double var_x9 = 1 / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19));
        const double var_x10 = var_x9 * NV_Ith_S(mParameters, 5);
        const double var_x11 = 10000000.0 * var_x10;
        const double var_x12 = var_x11 * (var_x8 + var_x4 * (var_x0 + var_x1 * var_chaste_interface__intracellular_ions__cai) * NV_Ith_S(mParameters, 8));
        const double var_x13 = fabs(var_chaste_interface__membrane__v);
        const double var_x14 = 1 / NV_Ith_S(mParameters, 5);
        const double var_x15 = var_x14 * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19);
        const double var_x16 = fabs(var_x15);
        const double var_x17 = var_x13 < 4.9999999999999998e-8 * var_x16;
        const double var_x18 = var_x10 * var_chaste_interface__membrane__v;
        const double var_x19 = exp(2.0 * var_x18);
        const double var_x20 = var_x19 * var_chaste_interface__intracellular_ions__cai;
        const double var_x21 = var_x0 + var_x20;
        const double var_x22 = -1.0 + var_x19;
        const double var_x23 = 1 / var_x22;
        const double var_x24 = var_x9 * pow(NV_Ith_S(mParameters, 5), 2);
        const double var_x25 = 4.0 * var_x23 * var_x24;
        const double var_x26 = var_x25 * NV_Ith_S(mParameters, 8);
        const double var_x27 = var_x21 * var_x26;
        const double var_x28 = pow(NV_Ith_S(mParameters, 5), 3) / (pow(NV_Ith_S(mParameters, 6), 2) * pow(NV_Ith_S(mParameters, 19), 2));
        const double var_x29 = var_x28 * var_chaste_interface__membrane__v;
        const double var_x30 = 8.0 * var_x23 * var_x29;
        const double var_x31 = var_x19 * var_chaste_interface__membrane__v;
        const double var_x32 = 8.0 * var_x28 * var_x31 / pow(var_x22, 2);
        const double var_x33 = -((var_x17) ? (var_x12) : (var_x27 + var_x20 * var_x30 * NV_Ith_S(mParameters, 8) - var_x21 * var_x32 * NV_Ith_S(mParameters, 8)));
        const double var_x34 = exp(0.38500000000000001 * var_x18);
        const double var_x35 = NV_Ith_S(mParameters, 4) / var_x34;
        const double var_x36 = 1.0 + 0.035997120230381568 * var_x35;
        const double var_x37 = pow(var_x36, 3);
        const double var_x38 = pow((0.35820000000000002 + NV_Ith_S(mParameters, 3)), 2);
        const double var_x39 = 1 / (-1.0 + var_x37 + 7.7937924625297832 * var_x38);
        const double var_x40 = pow(NV_Ith_S(mParameters, 3), 2);
        const double var_x41 = var_x39 * var_x40;
        const double var_x42 = pow(var_chaste_interface__intracellular_ions__nai, 3);
        const double var_x43 = exp(-0.051666666666666666 * var_x18);
        const double var_x44 = 1 / var_x43;
        const double var_x45 = var_x44 * var_chaste_interface__intracellular_ions__nai;
        const double var_x46 = 1.0 + 0.11021712774165104 * var_x45;
        const double var_x47 = pow(var_x46, 3);
        const double var_x48 = pow((0.5 + var_chaste_interface__intracellular_ions__ki), 2);
        const double var_x49 = 1 / (-1.0 + var_x47 + 4.0 * var_x48);
        const double var_x50 = pow(var_x43, (-3));
        const double var_x51 = var_x49 * var_x50;
        const double var_x52 = var_x42 * var_x51;
        const double var_x53 = var_x41 * var_x52;
        const double var_x54 = var_x10 * var_x53;
        const double var_x55 = pow(NV_Ith_S(mParameters, 4), 3);
        const double var_x56 = var_x39 * var_x55 / pow(var_x34, 3);
        const double var_x57 = var_x52 * var_x56;
        const double var_x58 = 1.4929407925401197 * var_x57;
        const double var_x59 = var_x10 * var_x58;
        const double var_x60 = pow(var_chaste_interface__intracellular_ions__nai, 4);
        const double var_x61 = var_x10 * var_x60;
        const double var_x62 = pow((-0.25 + var_x48 + 0.25 * var_x47), (-2));
        const double var_x63 = pow(var_x46, 2);
        const double var_x64 = var_x63 / pow(var_x43, 4);
        const double var_x65 = var_x62 * var_x64;
        const double var_x66 = var_x61 * var_x65;
        const double var_x67 = var_x41 * var_x66;
        const double var_x68 = var_x10 * var_x52;
        const double var_x69 = pow(NV_Ith_S(mParameters, 4), 4);
        const double var_x70 = pow(var_x36, 2) / pow((-0.12830724000000002 + var_x38 + 0.12830724000000002 * var_x37), 2);
        const double var_x71 = var_x70 / pow(var_x34, 4);
        const double var_x72 = var_x69 * var_x71;
        const double var_x73 = 0.0010218676570066343 * var_x68 * var_x72;
        const double var_x74 = 1 / (1.5889281507656066 + 0.0034246575342465752 * var_chaste_interface__intracellular_ions__ki + 0.004464285714285714 * var_chaste_interface__intracellular_ions__nai);
        const double var_x75 = var_x52 * var_x74;
        const double var_x76 = var_x10 * var_x56;
        const double var_x77 = 1.348266719199441e-12 * var_x75 * var_x76;
        const double var_x78 = 0.0015940553210329999 * var_x60 * var_x65 * var_x76;
        const double var_x79 = var_x35 * var_x40 * var_x70;
        const double var_x80 = var_x68 * var_x79;
        const double var_x81 = var_x10 * var_x75;
        const double var_x82 = 9.2284312964898121e-16 * var_x72 * var_x81;
        const double var_x83 = var_x56 * var_x74;
        const double var_x84 = 1.4395827005670213e-15 * var_x66 * var_x83;
        const double var_x85 = pow(var_chaste_interface__intracellular_ions__ki, 2);
        const double var_x86 = var_x49 * var_x85;
        const double var_x87 = var_x74 * var_x86;
        const double var_x88 = var_x56 * var_x87;
        const double var_x89 = var_x10 * var_x88;
        const double var_x90 = var_x10 * var_x69;
        const double var_x91 = var_x71 * var_x90;
        const double var_x92 = var_x87 * var_x91;
        const double var_x93 = var_x10 * var_x83;
        const double var_x94 = var_x62 * var_x85;
        const double var_x95 = var_x63 * var_x94;
        const double var_x96 = var_x45 * var_x95;
        const double var_x97 = var_x93 * var_x96;
        const double var_x98 = 1.1614636692670073e-13 * var_x92 - 1.8118171462682526e-13 * var_x97 - 1.9599073649699195e-10 * var_x89;
        const double var_x99 = var_x73 + var_x82 + var_x98 - var_x59 - var_x77 - var_x78 - var_x84 + 1863582.3429890024 * var_x54 + 8229.414882767278 * var_x80 - 12837.418322144014 * var_x67;
        const double var_x100 = var_x41 * var_x86;
        const double var_x101 = var_x56 * var_x86;
        const double var_x102 = 2.6817254812739919 * var_x101 + 1648931648.7518551 * var_x100;
        const double var_x103 = 6585420658.1002293 * var_x41 + 9.6722701128385645e-12 * var_x83 + 10.71014095526842 * var_x56;
        const double var_x104 = var_x56 * var_x75;
        const double var_x105 = var_x58 + 1.348266719199441e-12 * var_x104;
        const double var_x106 = 6.3450816326903207e-5 * var_x87 + 5.041496472709802e-7 * var_x75 + 558246.7943749798 * var_x52;
        const double var_x107 = 1 / (var_x102 + var_x103 + var_x105 + var_x106 + 3.3937789869608994e-10 * var_x88 + 24953131.661984976 * var_x53);
        const double var_x108 = 16.416 * var_x107;
        const double var_x109 = 3.0973929308714605 * var_x10 * var_x101;
        const double var_x110 = 0.0018355507117076787 * var_x86 * var_x91;
        const double var_x111 = var_x10 * var_x79;
        const double var_x112 = 1128638.1408383038 * var_x111 * var_x86;
        const double var_x113 = var_x10 * var_x96;
        const double var_x114 = 1760611.1922499281 * var_x113 * var_x41;
        const double var_x115 = 0.0028633545243956569 * var_x76 * var_x96;
        const double var_x116 = var_x110 + var_x112 - var_x109 - var_x114 - var_x115 + 8850.1627627912421 * var_x80 + 2004153.064618669 * var_x54 - 13805.74964605608 * var_x67;
        const double var_x117 = var_x107 * var_x74;
        const double var_x118 = 1.5581090301462333e-9 * var_x117;
        const double var_x119 = 12.370212803335024 * var_x76;
        const double var_x120 = 86528.253128121869 * var_x68;
        const double var_x121 = 596.05597051775783 * var_x66;
        const double var_x122 = 1.1171471980328542e-11 * var_x93;
        const double var_x123 = 7.8143195327001933e-8 * var_x81;
        const double var_x124 = 0.0073307305278664144 * var_x91;
        const double var_x125 = 5.3829490884356011e-10 * var_x66 * var_x74;
        const double var_x126 = 6.6203429148219431e-15 * var_x74 * var_x91;
        const double var_x127 = 4507498.4968736656 * var_x111;
        const double var_x128 = 6.7748240181513803e-8 * var_x113 * var_x74;
        const double var_x129 = var_x109 + var_x114 + var_x115 + var_x119 + var_x121 + var_x122 + var_x125 + var_x128 + var_x59 + var_x77 + var_x78 + var_x84 - var_x110 - var_x112 - var_x120 - var_x123 - var_x124 - var_x126 - var_x127 - var_x73 - var_x82 + 3.6236342925365053e-13 * var_x97 + 26643.167968200094 * var_x67 + 3.9198147299398391e-10 * var_x89 - 2.3229273385340146e-13 * var_x92 - 17079.577645558518 * var_x80 - 3867735.4076076713 * var_x54;
        const double var_x130 = pow((var_x41 + 0.25039124064514068 * var_x100 + 7.6555420442407695e-17 * var_x75 + 8.4770104046173956e-5 * var_x52 + 2.0473509426327076e-22 * var_x104 + 0.0037891477184972245 * var_x53 + 9.6350437764149725e-15 * var_x87 + 4.0722159152815902e-10 * var_x101 + 1.4687399051632995e-21 * var_x83 + 1.6263412029867345e-9 * var_x56 + 5.1534733514501733e-20 * var_x88 + 2.2670393738686469e-10 * var_x57), (-2));
        const double var_x131 = 1.6968894934804497e-10 * var_x88;
        const double var_x132 = var_x130 * (var_x105 + var_x131 + 12023111.890251627 * var_x53);
        const double var_x133 = 3.7852999589875663e-19 * var_x132;
        const double var_x134 = var_x129 * var_x130;
        const double var_x135 = var_x102 + 12930019.771733347 * var_x53;
        const double var_x136 = var_x135 * var_x74;
        const double var_x137 = 3.5927814619339015e-29 * var_x136;
        const double var_x138 = var_x120 + var_x123 + var_x98 - var_x121 - var_x125 - var_x128;
        const double var_x139 = var_x107 * var_x41;
        const double var_x140 = 39961.112093128955 * var_x139;
        const double var_x141 = var_x107 * var_x52;
        const double var_x142 = var_x141 * (var_x124 + var_x126 + var_x127 - var_x119 - var_x122);
        const double var_x143 = var_x106 + var_x131;
        const double var_x144 = var_x143 * var_x41;
        const double var_x145 = 9.2144734385488902e-16 * var_x144;
        const double var_x146 = var_x103 * var_x52;
        const double var_x147 = 5.2765213309289703e-20 * var_x146;
        const double var_x148 = var_x10 * var_x103 * var_x141;
        const double var_x149 = var_x103 * var_x107;
        const double var_x150 = var_x149 * var_x66;
        const double var_x151 = var_x107 * var_x111 * var_x143;
        const double var_x152 = 1 / (13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * NV_Ith_S(mParameters, 4)) * NV_Ith_S(mParameters, 4));
        const double var_x153 = exp(0.52239999999999998 * var_x18);
        const double var_x154 = 1 / var_x153;
        const double var_x155 = 1.0 + 0.011348161597821153 * (1.0 + var_x154) * NV_Ith_S(mParameters, 4);
        const double var_x156 = pow(var_x155, (-2));
        const double var_x157 = pow(var_x153, 2);
        const double var_x158 = var_x156 / var_x157;
        const double var_x159 = var_x152 * var_x158 * var_x90;
        const double var_x160 = 1 / var_x155;
        const double var_x161 = var_x154 * var_x160;
        const double var_x162 = var_x152 * var_x55;
        const double var_x163 = var_x161 * var_x162;
        const double var_x164 = 4.7426236949614156 * var_x10;
        const double var_x165 = 0.053820060088077798 * var_x159 - var_x163 * var_x164;
        const double var_x166 = 0.011348161597821153 + 0.011348161597821153 * var_x153;
        const double var_x167 = 1.0 + var_x166 * var_chaste_interface__intracellular_ions__nass;
        const double var_x168 = 1 / var_x167;
        const double var_x169 = 1 / exp(0.16700000000000001 * var_x18);
        const double var_x170 = var_x168 * var_x169;
        const double var_x171 = var_x153 * var_x168;
        const double var_x172 = 56.740807989105761 * var_x171;
        const double var_x173 = var_x172 * var_chaste_interface__intracellular_ions__nass;
        const double var_x174 = var_x173 + 60000.0 * var_x170;
        const double var_x175 = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nass) * var_chaste_interface__intracellular_ions__nass;
        const double var_x176 = 1 / var_x175;
        const double var_x177 = 1500000.0 * var_x176;
        const double var_x178 = var_x177 * var_chaste_interface__intracellular_ions__cass;
        const double var_x179 = var_x165 * var_x174 * var_x178;
        const double var_x180 = var_x10 * var_x170;
        const double var_x181 = 29.641398093508847 * var_x10;
        const double var_x182 = var_x171 * var_chaste_interface__intracellular_ions__nass;
        const double var_x183 = var_x181 * var_x182;
        const double var_x184 = 0.33637537555048624 * var_x10;
        const double var_x185 = var_x157 * var_x184;
        const double var_x186 = pow(var_x167, (-2));
        const double var_x187 = pow(var_chaste_interface__intracellular_ions__nass, 2);
        const double var_x188 = var_x186 * var_x187;
        const double var_x189 = var_x185 * var_x188;
        const double var_x190 = 355.6967771221062 * var_x10;
        const double var_x191 = var_x186 * var_chaste_interface__intracellular_ions__nass;
        const double var_x192 = var_x153 * var_x169;
        const double var_x193 = var_x191 * var_x192;
        const double var_x194 = var_x183 - var_x189 - 10020.0 * var_x180 - var_x190 * var_x193;
        const double var_x195 = var_x152 * NV_Ith_S(mParameters, 2);
        const double var_x196 = 1500000.0 * var_x195;
        const double var_x197 = var_x196 + 9.0785292782569211 * var_x163;
        const double var_x198 = var_x178 * var_x197;
        const double var_x199 = var_x194 * var_x198;
        const double var_x200 = pow(var_chaste_interface__intracellular_ions__nass, 3);
        const double var_x201 = var_x171 * var_x176;
        const double var_x202 = var_x200 * var_x201;
        const double var_x203 = var_x195 * var_x202;
        const double var_x204 = 13617793.917385383 * var_x203;
        const double var_x205 = var_x194 * var_x204;
        const double var_x206 = 5000.0 + var_x174;
        const double var_x207 = var_x203 * var_x206;
        const double var_x208 = 7113935.5424421234 * var_x10;
        const double var_x209 = var_x207 * var_x208;
        const double var_x210 = var_x10 * pow(var_chaste_interface__intracellular_ions__nass, 4);
        const double var_x211 = var_x176 * var_x195;
        const double var_x212 = var_x186 * var_x211;
        const double var_x213 = 80730.090132116704 * var_x157;
        const double var_x214 = var_x206 * var_x210 * var_x212 * var_x213;
        const double var_x215 = var_x179 + var_x199 + var_x205 + var_x209 - var_x214;
        const double var_x216 = var_x174 * var_x197;
        const double var_x217 = 13617793.917385383 * var_x207 + var_x178 * var_x216;
        const double var_x218 = var_x178 + 9.0785292782569211 * var_x202;
        const double var_x219 = var_x174 * var_x218;
        const double var_x220 = var_x161 * NV_Ith_S(mParameters, 4);
        const double var_x221 = 56.740807989105761 * var_x220;
        const double var_x222 = var_x221 + 60000.0 * var_x160;
        const double var_x223 = 5000.0 + var_x222;
        const double var_x224 = var_x202 * var_x223;
        const double var_x225 = 5000.0 * var_x219 + 45392.646391284608 * var_x224;
        const double var_x226 = var_x218 * var_x222;
        const double var_x227 = var_x163 * var_x223;
        const double var_x228 = var_x176 * var_x227;
        const double var_x229 = var_x228 * var_chaste_interface__intracellular_ions__cass;
        const double var_x230 = 13617793.917385383 * var_x229 + var_x196 * var_x226;
        const double var_x231 = var_x197 * var_x222;
        const double var_x232 = 5000.0 * var_x231;
        const double var_x233 = var_x163 * var_x206;
        const double var_x234 = var_x232 + 45392.646391284608 * var_x233;
        const double var_x235 = 1 / (var_x217 + var_x225 + var_x230 + var_x234);
        const double var_x236 = 10000.0 * var_x235;
        const double var_x237 = 0.00036716666666666668 * var_x231;
        const double var_x238 = var_x176 * var_x216;
        const double var_x239 = 0.11015000000000001 * var_x195;
        const double var_x240 = pow((var_x207 + var_x229 + var_x237 + 0.0033333333333333331 * var_x224 + 0.0033333333333333331 * var_x233 + 0.00036716666666666668 * var_x219 + var_x226 * var_x239 + 0.11015000000000001 * var_x238 * var_chaste_interface__intracellular_ions__cass), (-2));
        const double var_x241 = 148206.99046754424 * var_x10;
        const double var_x242 = 1681.8768777524313 * var_x10;
        const double var_x243 = var_x157 * var_x242;
        const double var_x244 = 1778483.8856105309 * var_x10;
        const double var_x245 = var_x218 * (-50100000.0 * var_x180 + var_x182 * var_x241 - var_x188 * var_x243 - var_x193 * var_x244);
        const double var_x246 = 283704.03994552878 * var_x171;
        const double var_x247 = 300000000.0 * var_x170 + var_x246 * var_chaste_interface__intracellular_ions__nass;
        const double var_x248 = 0.053820060088077798 * var_x157;
        const double var_x249 = var_x176 * var_x186;
        const double var_x250 = var_x210 * var_x249;
        const double var_x251 = var_x164 * var_x202 - var_x248 * var_x250;
        const double var_x252 = var_x247 * var_x251;
        const double var_x253 = var_x196 * var_x222;
        const double var_x254 = var_x251 * var_x253;
        const double var_x255 = var_x154 * var_x156 * NV_Ith_S(mParameters, 4);
        const double var_x256 = var_x158 * pow(NV_Ith_S(mParameters, 4), 2);
        const double var_x257 = var_x184 * var_x256;
        const double var_x258 = var_x181 * var_x220;
        const double var_x259 = var_x257 - var_x258 + var_x190 * var_x255;
        const double var_x260 = var_x196 * var_x259;
        const double var_x261 = var_x218 * var_x260;
        const double var_x262 = 45392.646391284608 * var_x163;
        const double var_x263 = var_x194 * var_x262;
        const double var_x264 = 45392.646391284608 * var_x259;
        const double var_x265 = var_x202 * var_x264;
        const double var_x266 = var_x163 * var_x176;
        const double var_x267 = 13617793.917385383 * var_x259;
        const double var_x268 = var_x266 * var_x267 * var_chaste_interface__intracellular_ions__cass;
        const double var_x269 = var_x157 * var_x250;
        const double var_x270 = 269.10030044038899 * var_x223;
        const double var_x271 = var_x269 * var_x270;
        const double var_x272 = 23713.118474807077 * var_x10;
        const double var_x273 = var_x233 * var_x272;
        const double var_x274 = 269.10030044038899 * var_x159;
        const double var_x275 = var_x206 * var_x274;
        const double var_x276 = var_x224 * var_x272;
        const double var_x277 = var_x208 * var_x229;
        const double var_x278 = 80730.090132116704 * var_x159 * var_x223;
        const double var_x279 = var_x176 * var_x278 * var_chaste_interface__intracellular_ions__cass;
        const double var_x280 = var_x165 * (300000000.0 * var_x160 + 283704.03994552878 * var_x220);
        const double var_x281 = var_x197 * (var_x242 * var_x256 + var_x244 * var_x255 - var_x220 * var_x241);
        const double var_x282 = -var_x280 - var_x281;
        const double var_x283 = var_x240 * (var_x214 + var_x271 + var_x273 + var_x277 + var_x282 - var_x179 - var_x199 - var_x205 - var_x209 - var_x245 - var_x252 - var_x254 - var_x261 - var_x263 - var_x265 - var_x268 - var_x275 - var_x276 - var_x279);
        const double var_x284 = 5.3924544444444452e-11 * var_x217;
        const double var_x285 = 3000000.0 * var_x195;
        const double var_x286 = var_x235 * (var_x245 + var_x252 + var_x265 + var_x276 - var_x271);
        const double var_x287 = var_x173 * var_x235;
        const double var_x288 = var_x221 * var_x235;
        const double var_x289 = 1.6177363333333335e-8 * var_x195;
        const double var_x290 = var_x225 * var_x283;
        const double var_x291 = 3.0597222222222222e-13 * var_x283;
        const double var_x292 = var_x182 * var_x230;
        const double var_x293 = var_x280 + var_x281;
        const double var_x294 = 27.235587834770765 * var_x235;
        const double var_x295 = var_x202 * var_x294;
        const double var_x296 = var_x217 * var_x220;
        const double var_x297 = 27.235587834770765 * var_x163;
        const double var_x298 = 1.4686666666666667e-13 * var_x202 * var_x234;
        const double var_x299 = 1.4686666666666667e-13 * var_x163;
        const double var_x300 = var_x217 * var_x235;
        const double var_x301 = var_x230 * var_x235;
        const double var_x302 = var_x225 * var_x235;
        const double var_x303 = 14.227871084884248 * var_x10;
        const double var_x304 = var_x163 * var_x303;
        const double var_x305 = var_x234 * var_x235;
        const double var_x306 = 0.16146018026423339 * var_x159;
        const double var_x307 = var_x183 * var_x301 + var_x215 * var_x236 + var_x258 * var_x300 + var_x283 * var_x284 + var_x283 * var_x298 + var_x287 * (var_x254 + var_x261 + var_x268 + var_x279 - var_x277) + var_x291 * var_x292 + var_x295 * (var_x263 + var_x275 + var_x293 - var_x273) + var_x302 * var_x304 - var_x189 * var_x301 - var_x215 * var_x288 - var_x257 * var_x300 - var_x285 * var_x286 - var_x286 * var_x297 - var_x289 * var_x290 - var_x290 * var_x299 - var_x291 * var_x296 - var_x302 * var_x306 - 0.16146018026423339 * var_x269 * var_x305 + var_x202 * var_x303 * var_x305;
        const double var_x308 = pow(var_chaste_interface__intracellular_ions__cass, (-2));
        const double var_x309 = 1.0 + 2.2499999999999996e-8 * var_x308;
        const double var_x310 = NV_Ith_S(mParameters, 16) / var_x309;
        const double var_x311 = 0.22000000000000003 * var_x310;
        const double var_x312 = 1.0 + var_x166 * var_chaste_interface__intracellular_ions__nai;
        const double var_x313 = 1 / var_x312;
        const double var_x314 = var_x169 * var_x313;
        const double var_x315 = var_x153 * var_x313;
        const double var_x316 = 56.740807989105761 * var_x315;
        const double var_x317 = var_x316 * var_chaste_interface__intracellular_ions__nai;
        const double var_x318 = var_x317 + 60000.0 * var_x314;
        const double var_x319 = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nai) * var_chaste_interface__intracellular_ions__nai;
        const double var_x320 = 1 / var_x319;
        const double var_x321 = 1500000.0 * var_x320;
        const double var_x322 = var_x321 * var_chaste_interface__intracellular_ions__cai;
        const double var_x323 = var_x165 * var_x318 * var_x322;
        const double var_x324 = var_x10 * var_x314;
        const double var_x325 = var_x315 * var_chaste_interface__intracellular_ions__nai;
        const double var_x326 = var_x181 * var_x325;
        const double var_x327 = pow(var_chaste_interface__intracellular_ions__nai, 2);
        const double var_x328 = pow(var_x312, (-2));
        const double var_x329 = var_x327 * var_x328;
        const double var_x330 = var_x185 * var_x329;
        const double var_x331 = var_x328 * var_chaste_interface__intracellular_ions__nai;
        const double var_x332 = var_x192 * var_x331;
        const double var_x333 = var_x326 - var_x330 - 10020.0 * var_x324 - var_x190 * var_x332;
        const double var_x334 = var_x197 * var_x322;
        const double var_x335 = var_x333 * var_x334;
        const double var_x336 = var_x315 * var_x320;
        const double var_x337 = var_x336 * var_x42;
        const double var_x338 = var_x195 * var_x337;
        const double var_x339 = 13617793.917385383 * var_x338;
        const double var_x340 = var_x333 * var_x339;
        const double var_x341 = 5000.0 + var_x318;
        const double var_x342 = var_x338 * var_x341;
        const double var_x343 = var_x208 * var_x342;
        const double var_x344 = var_x195 * var_x320;
        const double var_x345 = var_x328 * var_x344;
        const double var_x346 = var_x213 * var_x341 * var_x345 * var_x61;
        const double var_x347 = var_x323 + var_x335 + var_x340 + var_x343 - var_x346;
        const double var_x348 = var_x197 * var_x318;
        const double var_x349 = 13617793.917385383 * var_x342 + var_x322 * var_x348;
        const double var_x350 = var_x322 + 9.0785292782569211 * var_x337;
        const double var_x351 = var_x318 * var_x350;
        const double var_x352 = var_x223 * var_x337;
        const double var_x353 = 5000.0 * var_x351 + 45392.646391284608 * var_x352;
        const double var_x354 = var_x227 * var_x320;
        const double var_x355 = var_x354 * var_chaste_interface__intracellular_ions__cai;
        const double var_x356 = 13617793.917385383 * var_x355 + var_x253 * var_x350;
        const double var_x357 = var_x232 + var_x262 * var_x341;
        const double var_x358 = 1 / (var_x349 + var_x353 + var_x356 + var_x357);
        const double var_x359 = 10000.0 * var_x358;
        const double var_x360 = var_x320 * var_x348;
        const double var_x361 = var_x163 * var_x341;
        const double var_x362 = pow((var_x237 + var_x342 + var_x355 + 0.0033333333333333331 * var_x352 + 0.0033333333333333331 * var_x361 + 0.00036716666666666668 * var_x351 + 0.11015000000000001 * var_x360 * var_chaste_interface__intracellular_ions__cai + var_x222 * var_x239 * var_x350), (-2));
        const double var_x363 = var_x350 * (-50100000.0 * var_x324 + var_x241 * var_x325 - var_x243 * var_x329 - var_x244 * var_x332);
        const double var_x364 = 283704.03994552878 * var_x315;
        const double var_x365 = 300000000.0 * var_x314 + var_x364 * var_chaste_interface__intracellular_ions__nai;
        const double var_x366 = var_x320 * var_x328;
        const double var_x367 = var_x366 * var_x61;
        const double var_x368 = var_x164 * var_x337 - var_x248 * var_x367;
        const double var_x369 = var_x365 * var_x368;
        const double var_x370 = var_x253 * var_x368;
        const double var_x371 = var_x260 * var_x350;
        const double var_x372 = var_x262 * var_x333;
        const double var_x373 = var_x264 * var_x337;
        const double var_x374 = var_x163 * var_x320;
        const double var_x375 = var_x267 * var_x374 * var_chaste_interface__intracellular_ions__cai;
        const double var_x376 = var_x157 * var_x367;
        const double var_x377 = var_x270 * var_x376;
        const double var_x378 = var_x272 * var_x361;
        const double var_x379 = var_x274 * var_x341;
        const double var_x380 = var_x272 * var_x352;
        const double var_x381 = var_x208 * var_x355;
        const double var_x382 = var_x278 * var_x320 * var_chaste_interface__intracellular_ions__cai;
        const double var_x383 = var_x362 * (var_x282 + var_x346 + var_x377 + var_x378 + var_x381 - var_x323 - var_x335 - var_x340 - var_x343 - var_x363 - var_x369 - var_x370 - var_x371 - var_x372 - var_x373 - var_x375 - var_x379 - var_x380 - var_x382);
        const double var_x384 = 5.3924544444444452e-11 * var_x349;
        const double var_x385 = var_x363 + var_x369 + var_x373 + var_x380 - var_x377;
        const double var_x386 = var_x285 * var_x358;
        const double var_x387 = var_x317 * var_x358;
        const double var_x388 = var_x221 * var_x358;
        const double var_x389 = var_x289 * var_x353;
        const double var_x390 = 3.0597222222222222e-13 * var_x383;
        const double var_x391 = var_x325 * var_x356;
        const double var_x392 = 27.235587834770765 * var_x358;
        const double var_x393 = var_x337 * var_x392;
        const double var_x394 = var_x220 * var_x349;
        const double var_x395 = var_x297 * var_x358;
        const double var_x396 = 1.4686666666666667e-13 * var_x337 * var_x357;
        const double var_x397 = var_x299 * var_x353;
        const double var_x398 = var_x349 * var_x358;
        const double var_x399 = var_x356 * var_x358;
        const double var_x400 = var_x353 * var_x358;
        const double var_x401 = var_x357 * var_x358;
        const double var_x402 = var_x258 * var_x398 + var_x304 * var_x400 + var_x326 * var_x399 + var_x347 * var_x359 + var_x383 * var_x384 + var_x383 * var_x396 + var_x387 * (var_x370 + var_x371 + var_x375 + var_x382 - var_x381) + var_x390 * var_x391 + var_x393 * (var_x293 + var_x372 + var_x379 - var_x378) - var_x257 * var_x398 - var_x306 * var_x400 - var_x330 * var_x399 - var_x347 * var_x388 - var_x383 * var_x389 - var_x383 * var_x397 - var_x385 * var_x386 - var_x385 * var_x395 - var_x390 * var_x394 - 0.16146018026423339 * var_x376 * var_x401 + var_x303 * var_x337 * var_x401;
        const double var_x403 = 1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__intracellular_ions__cai, 2);
        const double var_x404 = NV_Ith_S(mParameters, 16) / var_x403;
        const double var_x405 = 0.88000000000000012 * var_x404;
        const double var_x406 = -0.75 * NV_Ith_S(mParameters, 3);
        const double var_x407 = 0.75 * var_chaste_interface__intracellular_ions__kss;
        const double var_x408 = 9.9999999999999995e-8 * NV_Ith_S(mParameters, 5);
        const double var_x409 = var_x2 * var_x408;
        const double var_x410 = var_x408 * var_x6;
        const double var_x411 = var_x410 * (var_x406 + var_x407 * var_x5);
        const double var_x412 = 5000000.0 * var_x10;
        const double var_x413 = var_x412 * (var_x411 + var_x409 * (var_x406 + var_x1 * var_x407));
        const double var_x414 = var_x13 < 9.9999999999999995e-8 * var_x16;
        const double var_x415 = exp(var_x18);
        const double var_x416 = var_x407 * var_x415;
        const double var_x417 = var_x406 + var_x416;
        const double var_x418 = -1.0 + var_x415;
        const double var_x419 = 1 / var_x418;
        const double var_x420 = var_x24 * var_x419;
        const double var_x421 = var_x417 * var_x420;
        const double var_x422 = var_x29 * var_x419;
        const double var_x423 = var_x415 * var_chaste_interface__membrane__v;
        const double var_x424 = var_x28 * var_x423 / pow(var_x418, 2);
        const double var_x425 = ((var_x414) ? (var_x413) : (var_x421 + var_x416 * var_x422 - var_x417 * var_x424));
        const double var_x426 = 1.0 - var_chaste_interface__CaMK__CaMKt;
        const double var_x427 = 1 / var_chaste_interface__intracellular_ions__cass;
        const double var_x428 = 1.0 + 0.0015 * var_x427;
        const double var_x429 = 1 / var_x428;
        const double var_x430 = 0.050000000000000003 * var_x429;
        const double var_x431 = var_x426 * var_x430 + var_chaste_interface__CaMK__CaMKt;
        const double var_x432 = 1.0 + 0.14999999999999999 / var_x431;
        const double var_x433 = 1 / var_x432;
        const double var_x434 = 0.00042888000000000003 * var_x433;
        const double var_x435 = -0.00042888000000000003 + var_x434;
        const double var_x436 = 1.0 - var_chaste_interface__ICaL__nca;
        const double var_x437 = 0.40000000000000002 * var_chaste_interface__ICaL__fs;
        const double var_x438 = 0.59999999999999998 * var_chaste_interface__ICaL__ff;
        const double var_x439 = 0.10000000000000001 * var_chaste_interface__membrane__v;
        const double var_x440 = exp(-1.0 + var_x439);
        const double var_x441 = 1.0 + var_x440;
        const double var_x442 = 0.59999999999999998 / var_x441;
        const double var_x443 = 0.29999999999999999 + var_x442;
        const double var_x444 = 0.69999999999999996 - var_x442;
        const double var_x445 = var_x444 * var_chaste_interface__ICaL__fcas;
        const double var_x446 = var_x445 + var_x443 * var_chaste_interface__ICaL__fcaf;
        const double var_x447 = var_x446 * var_chaste_interface__ICaL__jca;
        const double var_x448 = (var_x436 * (var_x437 + var_x438) + var_x447 * var_chaste_interface__ICaL__nca) * NV_Ith_S(mParameters, 7);
        const double var_x449 = var_x448 * var_chaste_interface__ICaL__d;
        const double var_x450 = var_x435 * var_x449;
        const double var_x451 = 0.59999999999999998 * var_chaste_interface__ICaL__ffp;
        const double var_x452 = var_x445 + var_x443 * var_chaste_interface__ICaL__fcafp;
        const double var_x453 = var_x452 * var_chaste_interface__ICaL__jca;
        const double var_x454 = var_x436 * (var_x437 + var_x451) + var_x453 * var_chaste_interface__ICaL__nca;
        const double var_x455 = var_x433 * var_x454;
        const double var_x456 = var_x455 * NV_Ith_S(mParameters, 7);
        const double var_x457 = 0.00047176800000000001 * var_x456;
        const double var_x458 = var_x457 * var_chaste_interface__ICaL__d;
        const double var_x459 = var_x425 * var_x458;
        const double var_x460 = 9.9999999999999995e-8 * var_x15 + var_chaste_interface__membrane__v;
        const double var_x461 = ((var_x414) ? (-var_x411 + var_x413 * var_x460) : (var_x421 * var_chaste_interface__membrane__v));
        const double var_x462 = var_x435 * var_x461;
        const double var_x463 = NV_Ith_S(mParameters, 7) * var_chaste_interface__ICaL__d;
        const double var_x464 = 0.059999999999999998 * var_x440 / pow(var_x441, 2);
        const double var_x465 = var_x464 * var_chaste_interface__ICaL__fcas;
        const double var_x466 = var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca;
        const double var_x467 = var_x466 * (var_x465 - var_x464 * var_chaste_interface__ICaL__fcaf);
        const double var_x468 = var_x463 * var_x467;
        const double var_x469 = 0.00047176800000000001 * var_x461;
        const double var_x470 = var_x433 * var_x463;
        const double var_x471 = var_x466 * (var_x465 - var_x464 * var_chaste_interface__ICaL__fcafp);
        const double var_x472 = var_x470 * var_x471;
        const double var_x473 = var_x469 * var_x472;
        const double var_x474 = -NV_Ith_S(mParameters, 4);
        const double var_x475 = 3.7499999999999999e-17 * NV_Ith_S(mParameters, 5);
        const double var_x476 = var_x2 * var_x475;
        const double var_x477 = var_x475 * var_x6;
        const double var_x478 = exp(var_x18);
        const double var_x479 = var_x478 * var_chaste_interface__intracellular_ions__nai;
        const double var_x480 = var_x474 + var_x479;
        const double var_x481 = -1.0 + var_x478;
        const double var_x482 = 3.75e-10 / var_x481;
        const double var_x483 = var_x24 * var_x482;
        const double var_x484 = var_x478 * var_chaste_interface__membrane__v;
        const double var_x485 = 0.59999999999999998 * var_x433;
        const double var_x486 = var_x433;
        const double var_x487 = 1.0 - var_x486;
        const double var_x488 = (-var_x485 * var_chaste_interface__INaL__hLp - 0.59999999999999998 * var_x487 * var_chaste_interface__INaL__hL) * NV_Ith_S(mParameters, 13);
        const double var_x489 = var_x488 * var_chaste_interface__INaL__mL;
        const double var_x490 = 0.98999999999999999 * var_chaste_interface__INa__hf;
        const double var_x491 = var_x490 + 0.010000000000000009 * var_chaste_interface__INa__hs;
        const double var_x492 = var_x487 * var_x491;
        const double var_x493 = var_x490 + 0.010000000000000009 * var_chaste_interface__INa__hsp;
        const double var_x494 = var_x493 * var_chaste_interface__INa__jp;
        const double var_x495 = var_x486 * var_x494 + var_x492 * var_chaste_interface__INa__j;
        const double var_x496 = pow(var_chaste_interface__INa__m, 3) * NV_Ith_S(mParameters, 11);
        const double var_x497 = var_x495 * var_x496;
        const double var_x498 = var_x489 - var_x497 - ((var_x414) ? (var_x412 * (var_x476 * (var_x474 + var_x1 * var_chaste_interface__intracellular_ions__nai) + var_x477 * (var_x474 + var_x5 * var_chaste_interface__intracellular_ions__nai))) : (var_x480 * var_x483 + var_x29 * var_x479 * var_x482 - 3.75e-10 * var_x28 * var_x480 * var_x484 / pow(var_x481, 2)));
        const double var_x499 = -0.75 * NV_Ith_S(mParameters, 4);
        const double var_x500 = 0.75 * var_chaste_interface__intracellular_ions__nass;
        const double var_x501 = var_x410 * (var_x499 + var_x5 * var_x500);
        const double var_x502 = var_x412 * (var_x501 + var_x409 * (var_x499 + var_x1 * var_x500));
        const double var_x503 = var_x415 * var_x500;
        const double var_x504 = var_x499 + var_x503;
        const double var_x505 = var_x420 * var_x504;
        const double var_x506 = ((var_x414) ? (var_x502) : (var_x505 + var_x422 * var_x503 - var_x424 * var_x504));
        const double var_x507 = -0.0015 + 0.0015 * var_x433;
        const double var_x508 = var_x448 * var_x507;
        const double var_x509 = var_x508 * var_chaste_interface__ICaL__d;
        const double var_x510 = 0.0016500000000000002 * var_x455;
        const double var_x511 = var_x463 * var_x510;
        const double var_x512 = ((var_x414) ? (-var_x501 + var_x460 * var_x502) : (var_x505 * var_chaste_interface__membrane__v));
        const double var_x513 = var_x512 * NV_Ith_S(mParameters, 7);
        const double var_x514 = var_x507 * var_x513;
        const double var_x515 = var_x514 * var_chaste_interface__ICaL__d;
        const double var_x516 = var_x433 * var_x513;
        const double var_x517 = 0.0016500000000000002 * var_x516;
        const double var_x518 = var_x517 * var_chaste_interface__ICaL__d;
        const double var_x519 = var_x467 * var_x515 + var_x506 * var_x509 - var_x471 * var_x518 - var_x506 * var_x511;
        const double var_x520 = var_x7 * (var_x0 + var_x5 * var_chaste_interface__intracellular_ions__cass);
        const double var_x521 = var_x11 * (var_x520 + var_x4 * (var_x0 + var_x1 * var_chaste_interface__intracellular_ions__cass));
        const double var_x522 = var_x19 * var_chaste_interface__intracellular_ions__cass;
        const double var_x523 = var_x0 + var_x522;
        const double var_x524 = var_x25 * var_x523;
        const double var_x525 = ((var_x17) ? (var_x521) : (var_x524 + var_x30 * var_x522 - var_x32 * var_x523));
        const double var_x526 = 1.2 * var_x433;
        const double var_x527 = -1.2 + var_x526;
        const double var_x528 = var_x449 * var_x527;
        const double var_x529 = 1.3200000000000001 * var_x456;
        const double var_x530 = var_x529 * var_chaste_interface__ICaL__d;
        const double var_x531 = var_x525 * var_x530;
        const double var_x532 = 4.9999999999999998e-8 * var_x15 + var_chaste_interface__membrane__v;
        const double var_x533 = ((var_x17) ? (-var_x520 + var_x521 * var_x532) : (var_x524 * var_chaste_interface__membrane__v));
        const double var_x534 = var_x527 * var_x533;
        const double var_x535 = 1.3200000000000001 * var_x533;
        const double var_x536 = var_x472 * var_x535;
        const double var_x537 = -var_x531 - var_x536 + var_x468 * var_x534 + var_x525 * var_x528;
        const double var_x538 = exp(-1.4126984126984128 + 0.0066137566137566143 * var_chaste_interface__membrane__v);
        const double var_x539 = 1.0 + var_x538;
        const double var_x540 = 1 / var_x539;
        const double var_x541 = var_x540;
        const double var_x542 = 1.0 - var_x541;
        const double var_x543 = var_x541 * var_chaste_interface__Ito__iFp + var_x542 * var_chaste_interface__Ito__iSp;
        const double var_x544 = var_x543 * var_chaste_interface__Ito__ap;
        const double var_x545 = 4.0 * var_x433;
        const double var_x546 = var_x541 * var_chaste_interface__Ito__iF + var_x542 * var_chaste_interface__Ito__iS;
        const double var_x547 = var_x546 * var_chaste_interface__Ito__a;
        const double var_x548 = 4.0 * var_x487;
        const double var_x549 = (-var_x544 * var_x545 - var_x547 * var_x548) * NV_Ith_S(mParameters, 18);
        const double var_x550 = exp(0.78953107960741553 - 0.054525627044711013 * var_chaste_interface__membrane__v);
        const double var_x551 = 1.0 + var_x550;
        const double var_x552 = 0.59999999999999998 * NV_Ith_S(mParameters, 9) / var_x551;
        const double var_x553 = 0.0066137566137566143 * var_x538 / pow(var_x539, 2);
        const double var_x554 = var_x545 * var_chaste_interface__Ito__ap;
        const double var_x555 = var_x548 * var_chaste_interface__Ito__a;
        const double var_x556 = 1 / var_chaste_interface__intracellular_ions__ki;
        const double var_x557 = -var_x15 * log(var_x556 * NV_Ith_S(mParameters, 3)) + var_chaste_interface__membrane__v;
        const double var_x558 = var_x557 * NV_Ith_S(mParameters, 18);
        const double var_x559 = 1 / var_chaste_interface__intracellular_ions__cai;
        const double var_x560 = pow(var_x559, 1.3999999999999999);
        const double var_x561 = 1.0 + 6.4818210260626455e-7 * var_x560;
        const double var_x562 = -1.3999999999999999 - 0.83999999999999997 / var_x561;
        const double var_x563 = var_x562 * NV_Ith_S(mParameters, 15) * var_chaste_interface__IKs__xs2;
        const double var_x564 = var_x563 * var_chaste_interface__IKs__xs1;
        const double var_x565 = exp(11.145054250500367 + 0.10534077741493732 * var_chaste_interface__membrane__v - 0.27388602127883704 * NV_Ith_S(mParameters, 3));
        const double var_x566 = 1.0 + var_x565;
        const double var_x567 = sqrt(NV_Ith_S(mParameters, 3));
        const double var_x568 = var_x567 * NV_Ith_S(mParameters, 12) / var_x566;
        const double var_x569 = 1.2 * var_x568;
        const double var_x570 = var_x569 * var_chaste_interface__IK1__xk1;
        const double var_x571 = exp(0.73333333333333328 + 0.013333333333333334 * var_chaste_interface__membrane__v);
        const double var_x572 = 1.0 + var_x571;
        const double var_x573 = 1 / var_x572;
        const double var_x574 = exp(1.4344412457471867 + 0.026171159382360639 * var_chaste_interface__membrane__v);
        const double var_x575 = 1.0 + var_x574;
        const double var_x576 = 1 / var_x575;
        const double var_x577 = var_x576;
        const double var_x578 = 1.0 - var_x577;
        const double var_x579 = var_x577 * var_chaste_interface__IKr__xrf + var_x578 * var_chaste_interface__IKr__xrs;
        const double var_x580 = var_x567 * var_x573 * var_x579 * NV_Ith_S(mParameters, 14);
        const double var_x581 = exp(-0.33333333333333331 + 0.033333333333333333 * var_chaste_interface__membrane__v);
        const double var_x582 = 1.0 + var_x581;
        const double var_x583 = 1 / var_x582;
        const double var_x584 = 0.55943092778551573 * var_x583;
        const double var_x585 = var_x580 * var_x584;
        const double var_x586 = var_x557 * var_x567;
        const double var_x587 = 0.026171159382360639 * var_x574 / pow(var_x575, 2);
        const double var_x588 = var_x586 * NV_Ith_S(mParameters, 14);
        const double var_x589 = var_x573 * var_x584 * var_x588;
        const double var_x590 = var_x549 + var_x564 - var_x552 - var_x570 - var_x585 + var_x558 * (-var_x554 * (var_x553 * var_chaste_interface__Ito__iSp - var_x553 * var_chaste_interface__Ito__iFp) - var_x555 * (var_x553 * var_chaste_interface__Ito__iS - var_x553 * var_chaste_interface__Ito__iF)) - var_x589 * (var_x587 * var_chaste_interface__IKr__xrs - var_x587 * var_chaste_interface__IKr__xrf) + 0.018647697592850527 * var_x557 * var_x580 * var_x581 / pow(var_x582, 2) - 0.03271537622682661 * var_x550 * var_x557 * NV_Ith_S(mParameters, 9) / pow(var_x551, 2) + 0.12640893289792476 * var_x565 * var_x586 * NV_Ith_S(mParameters, 12) * var_chaste_interface__IK1__xk1 / pow(var_x566, 2) + 0.0074590790371402106 * var_x571 * var_x579 * var_x583 * var_x588 / pow(var_x572, 2);
        const double var_x591 = 2250000000000.0 * var_x222;
        const double var_x592 = var_x344 * var_x591;
        const double var_x593 = 13617793.917385383 * var_x354;
        const double var_x594 = -var_x592 - var_x593 - var_x321 * var_x348 - var_x321 * var_x365;
        const double var_x595 = var_x362 * var_x384;
        const double var_x596 = var_x358 * var_x360;
        const double var_x597 = var_x358 * var_x365;
        const double var_x598 = var_x362 * var_x389;
        const double var_x599 = 3.0597222222222222e-13 * var_x362;
        const double var_x600 = var_x594 * var_x599;
        const double var_x601 = var_x362 * var_x594;
        const double var_x602 = 85111211.983658642 * var_x220;
        const double var_x603 = 15000000000.0 * var_x596 + var_x387 * (var_x592 + var_x593) + var_x391 * var_x600 + var_x396 * var_x601 + var_x594 * var_x595 - var_x394 * var_x600 - var_x397 * var_x601 - var_x594 * var_x598 - var_x596 * var_x602 - 4500000000000.0 * var_x344 * var_x597 - 40853381.752156146 * var_x374 * var_x597;
        const double var_x604 = var_x317 * var_x399 + var_x349 * var_x359 + var_x357 * var_x393 - var_x349 * var_x388 - var_x353 * var_x386 - var_x353 * var_x395;
        const double var_x605 = var_x604 * NV_Ith_S(mParameters, 16) / (pow(var_x403, 2) * pow(var_chaste_interface__intracellular_ions__cai, 3));
        const double var_x606 = 1 / (0.018329999999999999 * var_chaste_interface__intracellular_ions__nai + var_chaste_interface__intracellular_ions__ki);
        const double var_x607 = -var_x15 * log(var_x606 * (0.018329999999999999 * NV_Ith_S(mParameters, 4) + NV_Ith_S(mParameters, 3))) + var_chaste_interface__membrane__v;
        const double var_x608 = var_x607 * NV_Ith_S(mParameters, 15) * var_chaste_interface__IKs__xs1;
        const double var_x609 = var_x559 * var_x560 * var_x608 * var_chaste_interface__IKs__xs2 / pow(var_x561, 2);
        const double var_x610 = var_x5 * var_x7;
        const double var_x611 = var_x610 * NV_Ith_S(mParameters, 8);
        const double var_x612 = var_x1 * var_x4;
        const double var_x613 = var_x11 * var_x532;
        const double var_x614 = 0.00050000000000000001 + var_chaste_interface__intracellular_ions__cai;
        const double var_x615 = NV_Ith_S(mParameters, 10) / var_x614;
        const double var_x616 = pow(var_x614, (-2));
        const double var_x617 = -var_x615 - ((var_x17) ? (-var_x611 + var_x613 * (var_x611 + var_x612 * NV_Ith_S(mParameters, 8))) : (var_x26 * var_x31)) + var_x616 * NV_Ith_S(mParameters, 10) * var_chaste_interface__intracellular_ions__cai;
        const double var_x618 = 1 / (pow(var_x431, 2) * pow(var_x432, 2));
        const double var_x619 = var_x618 * (-1 + var_x430);
        const double var_x620 = 0.59999999999999998 * var_x619;
        const double var_x621 = var_x558 * (var_x544 * var_x620 - var_x547 * var_x620);
        const double var_x622 = var_x454 * var_x619;
        const double var_x623 = var_x463 * var_x622;
        const double var_x624 = 7.0765200000000005e-5 * var_x461 * var_x623;
        const double var_x625 = var_x448 * var_x461;
        const double var_x626 = var_x625 * var_chaste_interface__ICaL__d;
        const double var_x627 = 6.4331999999999993e-5 * var_x619 * var_x626;
        const double var_x628 = 0.089999999999999997 * var_x619;
        const double var_x629 = 1 / var_chaste_interface__intracellular_ions__nai;
        const double var_x630 = -var_x15 * log(var_x629 * NV_Ith_S(mParameters, 4)) + var_chaste_interface__membrane__v;
        const double var_x631 = var_x630 * NV_Ith_S(mParameters, 13) * var_chaste_interface__INaL__mL;
        const double var_x632 = 0.14999999999999999 * var_x619;
        const double var_x633 = var_x491 * var_chaste_interface__INa__j;
        const double var_x634 = var_x496 * var_x630;
        const double var_x635 = var_x631 * (var_x628 * var_chaste_interface__INaL__hLp - var_x628 * var_chaste_interface__INaL__hL) - var_x634 * (var_x632 * var_x633 - var_x494 * var_x632);
        const double var_x636 = var_x513 * var_chaste_interface__ICaL__d;
        const double var_x637 = var_x449 * var_x512;
        const double var_x638 = 0.0002475 * var_x622 * var_x636 - 0.00022499999999999999 * var_x619 * var_x637;
        const double var_x639 = 0.19800000000000001 * var_x533 * var_x623;
        const double var_x640 = var_x448 * var_x533;
        const double var_x641 = var_x640 * var_chaste_interface__ICaL__d;
        const double var_x642 = 0.17999999999999999 * var_x619 * var_x641;
        const double var_x643 = var_x639 - var_x642;
        const double var_x644 = var_x15 * var_x564 * var_x606;
        const double var_x645 = 0.018329999999999999 * var_x644;
        const double var_x646 = var_x327 * var_x51;
        const double var_x647 = var_x41 * var_x646;
        const double var_x648 = 4.4788223776203591 * var_x56 * var_x646;
        const double var_x649 = var_x42 * var_x62;
        const double var_x650 = var_x64 * var_x649;
        const double var_x651 = var_x41 * var_x650;
        const double var_x652 = 4.0448001575983228e-12 * var_x646 * var_x83;
        const double var_x653 = pow((1 + 0.0028096208831939005 * var_chaste_interface__intracellular_ions__nai + 0.0021553256090254577 * var_chaste_interface__intracellular_ions__ki), (-2));
        const double var_x654 = var_x52 * var_x653;
        const double var_x655 = var_x56 * var_x654;
        const double var_x656 = 2.3840715066649271e-15 * var_x655;
        const double var_x657 = 0.030852683632896775 * var_x56 * var_x650;
        const double var_x658 = 2.786289097871654e-14 * var_x650 * var_x83;
        const double var_x659 = var_x653 * var_x86;
        const double var_x660 = var_x56 * var_x659;
        const double var_x661 = var_x44 * var_x95;
        const double var_x662 = var_x661 * var_x83;
        const double var_x663 = -3.0005234378016216e-13 * var_x660 - 3.5067428637450051e-12 * var_x662;
        const double var_x664 = var_x648 + var_x652 + var_x663 - var_x656 - var_x657 - var_x658 + 36069335.67075488 * var_x647 - 248466.16107375509 * var_x651;
        const double var_x665 = 34076345.656450219 * var_x41 * var_x661;
        const double var_x666 = 0.055419764988303033 * var_x56 * var_x661;
        const double var_x667 = -var_x665 - var_x666 + 38790059.315200046 * var_x647 - 267208.05766560155 * var_x651;
        const double var_x668 = 1.1219685328242758e-7 * var_x659;
        const double var_x669 = 1674740.3831249396 * var_x646;
        const double var_x670 = 8.9146219515644901e-10 * var_x654;
        const double var_x671 = var_x56 * var_x653;
        const double var_x672 = 11536.567171311443 * var_x650;
        const double var_x673 = 1.5124489418129408e-6 * var_x646 * var_x74;
        const double var_x674 = 1.3112562615776865e-6 * var_x661 * var_x74;
        const double var_x675 = 1.0418611138907615e-8 * var_x650 * var_x74;
        const double var_x676 = var_x656 + var_x657 + var_x658 + var_x665 + var_x666 + var_x668 + var_x670 + var_x672 + var_x674 + var_x675 - var_x648 - var_x652 - var_x669 - var_x673 + 6.0010468756032432e-13 * var_x660 + 7.0134857274900101e-12 * var_x662 + 1.7102983595469244e-14 * var_x671 + 515674.21873935661 * var_x651 - 74859394.985954925 * var_x647;
        const double var_x677 = var_x107 * var_x653;
        const double var_x678 = var_x135 * var_x677;
        const double var_x679 = var_x130 * var_x137;
        const double var_x680 = var_x663 + var_x669 + var_x673 - var_x668 - var_x670 - var_x672 - var_x674 - var_x675;
        const double var_x681 = var_x149 * var_x646;
        const double var_x682 = var_x130 * var_x145;
        const double var_x683 = var_x130 * var_x147;
        const double var_x684 = var_x149 * var_x650;
        const double var_x685 = var_x57 * var_x677;
        const double var_x686 = -0.011348161597821153 - 0.011348161597821153 * var_x153;
        const double var_x687 = var_x169 * var_x686;
        const double var_x688 = var_x328 * var_x687;
        const double var_x689 = var_x153 * var_x686;
        const double var_x690 = 56.740807989105761 * var_x689;
        const double var_x691 = var_x331 * var_x690;
        const double var_x692 = var_x316 + var_x691 + 60000.0 * var_x688;
        const double var_x693 = var_x334 * var_x692;
        const double var_x694 = (-0.066666666666666666 - 0.026666666666666668 * var_chaste_interface__intracellular_ions__nai) / pow(var_x319, 2);
        const double var_x695 = var_x694 * var_chaste_interface__intracellular_ions__cai;
        const double var_x696 = 1500000.0 * var_x695;
        const double var_x697 = var_x348 * var_x696;
        const double var_x698 = var_x327 * var_x336;
        const double var_x699 = 40853381.752156146 * var_x195;
        const double var_x700 = var_x341 * var_x698 * var_x699;
        const double var_x701 = var_x339 * var_x692;
        const double var_x702 = var_x315 * var_x694;
        const double var_x703 = var_x42 * var_x702;
        const double var_x704 = 13617793.917385383 * var_x341;
        const double var_x705 = var_x195 * var_x703 * var_x704;
        const double var_x706 = var_x345 * var_x42 * var_x689 * var_x704;
        const double var_x707 = var_x693 + var_x697 + var_x700 + var_x701 + var_x705 + var_x706;
        const double var_x708 = 283704.03994552878 * var_x689;
        const double var_x709 = var_x350 * (var_x364 + 300000000.0 * var_x688 + var_x331 * var_x708);
        const double var_x710 = 9.0785292782569211 * var_x42;
        const double var_x711 = var_x366 * var_x689;
        const double var_x712 = var_x696 + 27.235587834770765 * var_x698 + var_x702 * var_x710 + var_x710 * var_x711;
        const double var_x713 = var_x365 * var_x712;
        const double var_x714 = var_x253 * var_x712;
        const double var_x715 = 136177.93917385384 * var_x223;
        const double var_x716 = var_x698 * var_x715;
        const double var_x717 = 45392.646391284608 * var_x223;
        const double var_x718 = var_x703 * var_x717;
        const double var_x719 = var_x42 * var_x711;
        const double var_x720 = var_x717 * var_x719;
        const double var_x721 = 13617793.917385383 * var_x227;
        const double var_x722 = var_x695 * var_x721;
        const double var_x723 = -var_x693 - var_x697 - var_x700 - var_x701 - var_x705 - var_x706 - var_x709 - var_x713 - var_x714 - var_x716 - var_x718 - var_x720 - var_x722 - var_x262 * var_x692;
        const double var_x724 = var_x709 + var_x713 + var_x716 + var_x718 + var_x720;
        const double var_x725 = var_x599 * var_x723;
        const double var_x726 = var_x362 * var_x723;
        const double var_x727 = var_x357 * var_x392;
        const double var_x728 = 1236295.4078425223 * var_x160 * var_x162;
        const double var_x729 = var_x316 * var_x399 + var_x359 * var_x707 + var_x387 * (var_x714 + var_x722) + var_x391 * var_x725 + var_x396 * var_x726 + var_x399 * var_x691 + var_x595 * var_x723 + var_x703 * var_x727 + var_x719 * var_x727 - var_x386 * var_x724 - var_x388 * var_x707 - var_x394 * var_x725 - var_x395 * var_x724 - var_x397 * var_x726 - var_x598 * var_x723 + 81.706763504312292 * var_x401 * var_x698 + var_x313 * var_x320 * var_x358 * var_x42 * var_x692 * var_x728;
        const double var_x730 = var_x477 * var_x5;
        const double var_x731 = var_x412 * var_x460;
        const double var_x732 = var_x15 * var_x629;
        const double var_x733 = -((var_x414) ? (-var_x730 + var_x731 * (var_x730 + var_x1 * var_x476)) : (var_x483 * var_x484)) + var_x489 * var_x732 - var_x497 * var_x732;
        const double var_x734 = var_x186 * var_x687;
        const double var_x735 = var_x191 * var_x690;
        const double var_x736 = var_x172 + var_x735 + 60000.0 * var_x734;
        const double var_x737 = var_x198 * var_x736;
        const double var_x738 = (-0.066666666666666666 - 0.026666666666666668 * var_chaste_interface__intracellular_ions__nass) / pow(var_x175, 2);
        const double var_x739 = var_x738 * var_chaste_interface__intracellular_ions__cass;
        const double var_x740 = 1500000.0 * var_x739;
        const double var_x741 = var_x216 * var_x740;
        const double var_x742 = var_x187 * var_x201;
        const double var_x743 = var_x206 * var_x699 * var_x742;
        const double var_x744 = var_x204 * var_x736;
        const double var_x745 = var_x171 * var_x738;
        const double var_x746 = var_x200 * var_x745;
        const double var_x747 = 13617793.917385383 * var_x206;
        const double var_x748 = var_x195 * var_x746 * var_x747;
        const double var_x749 = var_x200 * var_x212 * var_x689 * var_x747;
        const double var_x750 = var_x737 + var_x741 + var_x743 + var_x744 + var_x748 + var_x749;
        const double var_x751 = var_x218 * (var_x246 + 300000000.0 * var_x734 + var_x191 * var_x708);
        const double var_x752 = 9.0785292782569211 * var_x200;
        const double var_x753 = var_x249 * var_x689;
        const double var_x754 = var_x740 + 27.235587834770765 * var_x742 + var_x745 * var_x752 + var_x752 * var_x753;
        const double var_x755 = var_x247 * var_x754;
        const double var_x756 = var_x253 * var_x754;
        const double var_x757 = var_x715 * var_x742;
        const double var_x758 = var_x200 * var_x717;
        const double var_x759 = var_x745 * var_x758;
        const double var_x760 = var_x753 * var_x758;
        const double var_x761 = var_x721 * var_x739;
        const double var_x762 = -var_x737 - var_x741 - var_x743 - var_x744 - var_x748 - var_x749 - var_x751 - var_x755 - var_x756 - var_x757 - var_x759 - var_x760 - var_x761 - var_x262 * var_x736;
        const double var_x763 = var_x240 * var_x284;
        const double var_x764 = var_x751 + var_x755 + var_x757 + var_x759 + var_x760;
        const double var_x765 = var_x235 * var_x285;
        const double var_x766 = var_x240 * var_x762;
        const double var_x767 = var_x225 * var_x289;
        const double var_x768 = 3.0597222222222222e-13 * var_x766;
        const double var_x769 = var_x163 * var_x294;
        const double var_x770 = var_x234 * var_x294;
        const double var_x771 = var_x225 * var_x299;
        const double var_x772 = var_x172 * var_x301 + var_x236 * var_x750 + var_x287 * (var_x756 + var_x761) + var_x292 * var_x768 + var_x298 * var_x766 + var_x301 * var_x735 + var_x746 * var_x770 + var_x762 * var_x763 - var_x288 * var_x750 - var_x296 * var_x768 - var_x764 * var_x765 - var_x764 * var_x769 - var_x766 * var_x767 - var_x766 * var_x771 + 81.706763504312292 * var_x305 * var_x742 + var_x200 * var_x753 * var_x770 + var_x168 * var_x176 * var_x200 * var_x235 * var_x728 * var_x736;
        const double var_x773 = 7.4999999999999997e-8 * NV_Ith_S(mParameters, 5);
        const double var_x774 = var_x5 * var_x6 * var_x773;
        const double var_x775 = ((var_x414) ? (-var_x774 + var_x731 * (var_x774 + var_x1 * var_x2 * var_x773)) : (0.75 * var_x420 * var_x423));
        const double var_x776 = var_x509 * var_x775 - var_x511 * var_x775;
        const double var_x777 = -4.0 - 8.0 * var_chaste_interface__intracellular_ions__ki;
        const double var_x778 = var_x50 * var_x649;
        const double var_x779 = var_x777 * var_x778;
        const double var_x780 = var_x41 * var_x779;
        const double var_x781 = 0.09330879953375748 * var_x56 * var_x779;
        const double var_x782 = 1.8288767722361083e-15 * var_x655;
        const double var_x783 = 8.4266669949965062e-14 * var_x779 * var_x83;
        const double var_x784 = var_x49 * var_chaste_interface__intracellular_ions__ki;
        const double var_x785 = var_x74 * var_x784;
        const double var_x786 = var_x56 * var_x785;
        const double var_x787 = var_x777 * var_x94;
        const double var_x788 = var_x787 * var_x83;
        const double var_x789 = 1.0605559334252811e-11 * var_x788 + 3.3937789869608994e-10 * var_x786 - 2.3017714043409702e-13 * var_x660;
        const double var_x790 = var_x781 + var_x783 + var_x789 - var_x782 + 751444.4931407267 * var_x780;
        const double var_x791 = 3297863297.5037103 * var_x41 * var_x784;
        const double var_x792 = 5.3634509625479838 * var_x56 * var_x784;
        const double var_x793 = 103058228.04699095 * var_x41 * var_x787;
        const double var_x794 = 0.16760784257962449 * var_x56 * var_x787;
        const double var_x795 = var_x791 + var_x792 + var_x793 + var_x794 + 808126.23573333421 * var_x780;
        const double var_x796 = 8.6068818956382799e-8 * var_x659;
        const double var_x797 = 0.00012690163265380641 * var_x785;
        const double var_x798 = 6.8386140998302939e-10 * var_x654;
        const double var_x799 = var_x74 * var_x777;
        const double var_x800 = 3.9656760204314505e-6 * var_x799 * var_x94;
        const double var_x801 = 34890.424648436237 * var_x779;
        const double var_x802 = 3.1509352954436263e-8 * var_x778 * var_x799;
        const double var_x803 = var_x782 + var_x796 + var_x798 - var_x781 - var_x783 - var_x791 - var_x792 - var_x793 - var_x794 - var_x797 - var_x800 - var_x801 - var_x802 + 4.6035428086819405e-13 * var_x660 + 1.3120097004743531e-14 * var_x671 - 2.1211118668505621e-11 * var_x788 - 6.7875579739217989e-10 * var_x786 - 1559570.728874061 * var_x780;
        const double var_x804 = var_x789 + var_x797 + var_x800 + var_x801 + var_x802 - var_x796 - var_x798;
        const double var_x805 = var_x149 * var_x779;
        const double var_x806 = var_x15 * var_x556;
        const double var_x807 = var_x644 + var_x549 * var_x806 - var_x552 * var_x806 - var_x570 * var_x806 - var_x585 * var_x806;
        const double var_x808 = var_x458 * var_x775;
        const double var_x809 = var_x308 * var_x426 / pow(var_x428, 2);
        const double var_x810 = var_x618 * var_x809;
        const double var_x811 = 4.5000000000000003e-5 * var_x810;
        const double var_x812 = var_x558 * (var_x547 * var_x811 - var_x544 * var_x811);
        const double var_x813 = var_x211 * var_x591;
        const double var_x814 = 13617793.917385383 * var_x228;
        const double var_x815 = -var_x813 - var_x814 - var_x177 * var_x216 - var_x177 * var_x247;
        const double var_x816 = var_x235 * var_x238;
        const double var_x817 = var_x235 * var_x247;
        const double var_x818 = var_x240 * var_x815;
        const double var_x819 = 3.0597222222222222e-13 * var_x818;
        const double var_x820 = 15000000000.0 * var_x816 + var_x287 * (var_x813 + var_x814) + var_x292 * var_x819 + var_x298 * var_x818 + var_x763 * var_x815 - var_x296 * var_x819 - var_x602 * var_x816 - var_x767 * var_x818 - var_x771 * var_x818 - 4500000000000.0 * var_x211 * var_x817 - 40853381.752156146 * var_x266 * var_x817;
        const double var_x821 = var_x173 * var_x301 + var_x217 * var_x236 + var_x234 * var_x295 - var_x217 * var_x288 - var_x225 * var_x765 - var_x225 * var_x769;
        const double var_x822 = var_x821 * NV_Ith_S(mParameters, 16) / (pow(var_x309, 2) * pow(var_chaste_interface__intracellular_ions__cass, 3));
        const double var_x823 = 4.8249000000000006e-9 * var_x626 * var_x810;
        const double var_x824 = var_x454 * var_x810;
        const double var_x825 = var_x463 * var_x824;
        const double var_x826 = 5.307390000000001e-9 * var_x461 * var_x825;
        const double var_x827 = 6.7499999999999997e-6 * var_x810;
        const double var_x828 = 1.1250000000000001e-5 * var_x810;
        const double var_x829 = var_x631 * (var_x827 * var_chaste_interface__INaL__hL - var_x827 * var_chaste_interface__INaL__hLp) - var_x634 * (var_x494 * var_x828 - var_x633 * var_x828);
        const double var_x830 = 1.6875000000000001e-8 * var_x637 * var_x810 - 1.8562500000000002e-8 * var_x636 * var_x824;
        const double var_x831 = ((var_x17) ? (-var_x610 + var_x613 * (var_x610 + var_x612)) : (var_x25 * var_x31));
        const double var_x832 = var_x530 * var_x831;
        const double var_x833 = 1.3499999999999999e-5 * var_x641 * var_x810;
        const double var_x834 = 1.4850000000000002e-5 * var_x533 * var_x825;
        const double var_x835 = var_x833 - var_x832 - var_x834 + var_x528 * var_x831;
        const double var_x836 = var_x495 * var_x630 * pow(var_chaste_interface__INa__m, 2) * NV_Ith_S(mParameters, 11);
        const double var_x837 = 0.98999999999999999 * var_x433;
        const double var_x838 = var_x634 * (var_x837 * var_chaste_interface__INa__jp + (0.98999999999999999 - var_x837) * var_chaste_interface__INa__j);
        const double var_x839 = 0.010000000000000009 * var_x433;
        const double var_x840 = var_x634 * (0.010000000000000009 - var_x839) * var_chaste_interface__INa__j;
        const double var_x841 = var_x492 * var_x634;
        const double var_x842 = var_x634 * var_chaste_interface__INa__jp;
        const double var_x843 = var_x493 * var_x634;
        const double var_x844 = var_x488 * var_x630;
        const double var_x845 = var_x631 * (-0.59999999999999998 + var_x485);
        const double var_x846 = var_x546 * var_x558;
        const double var_x847 = var_x555 * var_x558;
        const double var_x848 = var_x543 * var_x558;
        const double var_x849 = var_x554 * var_x558;
        const double var_x850 = var_x457 * var_x461;
        const double var_x851 = var_x508 * var_x512 - var_x510 * var_x513;
        const double var_x852 = var_x529 * var_x533;
        const double var_x853 = -var_x852 + var_x527 * var_x640;
        const double var_x854 = (0.59999999999999998 - 0.59999999999999998 * var_chaste_interface__ICaL__nca) * var_chaste_interface__ICaL__d;
        const double var_x855 = var_x854 * NV_Ith_S(mParameters, 7);
        const double var_x856 = var_x534 * var_x855;
        const double var_x857 = var_x514 * var_x854;
        const double var_x858 = (0.40000000000000002 - 0.40000000000000002 * var_chaste_interface__ICaL__nca) * var_chaste_interface__ICaL__d;
        const double var_x859 = var_x858 * NV_Ith_S(mParameters, 7);
        const double var_x860 = var_x433 * var_x859;
        const double var_x861 = var_x469 * var_x860;
        const double var_x862 = var_x514 * var_x858 - var_x517 * var_x858;
        const double var_x863 = var_x535 * var_x860;
        const double var_x864 = -var_x863 + var_x534 * var_x859;
        const double var_x865 = var_x443 * var_x466;
        const double var_x866 = var_x463 * var_x865;
        const double var_x867 = var_x534 * var_x866;
        const double var_x868 = var_x515 * var_x865;
        const double var_x869 = var_x444 * var_x466;
        const double var_x870 = var_x463 * var_x869;
        const double var_x871 = var_x470 * var_x869;
        const double var_x872 = var_x469 * var_x871;
        const double var_x873 = var_x515 * var_x869 - var_x518 * var_x869;
        const double var_x874 = var_x535 * var_x871;
        const double var_x875 = -var_x874 + var_x534 * var_x870;
        const double var_x876 = var_x446 * var_chaste_interface__ICaL__nca;
        const double var_x877 = var_x463 * var_x876;
        const double var_x878 = var_x452 * var_chaste_interface__ICaL__nca;
        const double var_x879 = var_x470 * var_x878;
        const double var_x880 = var_x469 * var_x879;
        const double var_x881 = var_x515 * var_x876 - var_x518 * var_x878;
        const double var_x882 = var_x535 * var_x879;
        const double var_x883 = -var_x882 + var_x534 * var_x877;
        const double var_x884 = var_x433 * var_x855;
        const double var_x885 = var_x470 * var_x865;
        const double var_x886 = -var_x437;
        const double var_x887 = (var_x447 + var_x886 - var_x438) * var_chaste_interface__ICaL__d;
        const double var_x888 = var_x887 * NV_Ith_S(mParameters, 7);
        const double var_x889 = var_x453 + var_x886 - var_x451;
        const double var_x890 = var_x470 * var_x889;
        const double var_x891 = var_x469 * var_x890;
        const double var_x892 = var_x514 * var_x887 - var_x518 * var_x889;
        const double var_x893 = var_x535 * var_x890;
        const double var_x894 = -var_x893 + var_x534 * var_x888;
        const double var_x895 = var_x563 * var_x607;
        const double var_x896 = var_x562 * var_x608;
        const double var_x897 = 0.0023800000000000002 + var_chaste_interface__intracellular_ions__cai;
        const double var_x898 = 1.0 + 0.00015470000000000002 / pow(var_x897, 2) + 3.5000000000000004e-5 * var_x616;
        const double var_x899 = 1 / var_x898;
        const double var_x900 = 1.7600000000000002 * var_x404;
        const double var_x901 = 2.9679144385026732 * var_x14;
        const double var_x902 = 0.00075000000000000002 + var_chaste_interface__intracellular_ions__cai;
        const double var_x903 = 1 / var_x902;
        const double var_x904 = var_x433 * var_x903;
        const double var_x905 = 0.00092000000000000003 + var_chaste_interface__intracellular_ions__cai;
        const double var_x906 = 1 / var_x905;
        const double var_x907 = var_x487 * var_x906;
        const double var_x908 = var_x433 * var_chaste_interface__intracellular_ions__cai / pow(var_x902, 2);
        const double var_x909 = var_x487 * var_chaste_interface__intracellular_ions__cai / pow(var_x905, 2);
        const double var_x910 = var_x899;
        const double var_x911 = 0.015640625000000002 * var_x904;
        const double var_x912 = 0.0056875000000000007 * var_x907;
        const double var_x913 = var_x619 * var_chaste_interface__intracellular_ions__cai;
        const double var_x914 = var_x903 * var_x913;
        const double var_x915 = var_x906 * var_x913;
        const double var_x916 = var_x810 * var_chaste_interface__intracellular_ions__cai;
        const double var_x917 = var_x906 * var_x916;
        const double var_x918 = var_x903 * var_x916;
        const double var_x919 = 0.0025000000000000005 * var_x429;
        const double var_x920 = 49.248000000000005 * var_x107;
        const double var_x921 = 4.6743270904386998e-9 * var_x117;
        const double var_x922 = 1.1355899876962699e-18 * var_x132;
        const double var_x923 = 1.0778344385801704e-28 * var_x136;
        const double var_x924 = 119883.33627938687 * var_x139;
        const double var_x925 = 2.7643420315646669e-15 * var_x144;
        const double var_x926 = 1.5829563992786911e-19 * var_x146;
        const double var_x927 = 2.6400000000000006 * var_x404;
        const double var_x928 = 5.9358288770053464 * var_x14;
        const double var_x929 = var_x130 * var_x923;
        const double var_x930 = var_x130 * var_x925;
        const double var_x931 = var_x130 * var_x926;
        const double var_x932 = var_x14 * var_x433;
        const double var_x933 = 0.66000000000000014 * var_x310;
        const double var_x934 = 201.81818181818181 * var_x14;
        const double var_x935 = 0.33300000000000002 * var_x14 * var_x516;
        const double var_x936 = 32.832000000000001 * var_x107;
        const double var_x937 = 7.5705999179751327e-19 * var_x132;
        const double var_x938 = 3.1162180602924665e-9 * var_x117;
        const double var_x939 = 79922.22418625791 * var_x139;
        const double var_x940 = 7.1855629238678031e-29 * var_x136;
        const double var_x941 = 1.842894687709778e-15 * var_x144;
        const double var_x942 = 1.0553042661857941e-19 * var_x146;
        const double var_x943 = var_x130 * var_x940;
        const double var_x944 = var_x130 * var_x941;
        const double var_x945 = var_x130 * var_x942;
        const double var_x946 = 23.743315508021386 * var_x14 * var_x487;
        const double var_x947 = var_x540 * var_x558;
        const double var_x948 = var_x946 * var_chaste_interface__Ito__a;
        const double var_x949 = var_x542 * var_x558;
        const double var_x950 = 23.743315508021386 * var_x932;
        const double var_x951 = var_x950 * var_chaste_interface__Ito__ap;
        const double var_x952 = var_x14 * var_x557;
        const double var_x953 = 3.3206862558391572 * var_x567 * var_x573 * var_x583 * var_x952 * NV_Ith_S(mParameters, 14);
        const double var_x954 = 0.00042888000000000003 - var_x434;
        const double var_x955 = var_x449 * var_x954;
        const double var_x956 = var_x461 * var_x954;
        const double var_x957 = var_x934 * var_x956;
        const double var_x958 = 0.095211359999999995 * var_x14 * var_x461;
        const double var_x959 = 0.44000000000000006 * var_x310;
        const double var_x960 = 0.0086999999999999994 + var_chaste_interface__intracellular_ions__cass;
        const double var_x961 = 0.00087000000000000001 + var_chaste_interface__intracellular_ions__cass;
        const double var_x962 = 1.0 + 0.0097788000000000007 / pow(var_x960, 2) + 4.0890000000000003e-5 / pow(var_x961, 2);
        const double var_x963 = 1 / var_x962;
        const double var_x964 = 100.90909090909091 * var_x14;
        const double var_x965 = var_x963 * var_x964;
        const double var_x966 = 0.035999999999999997 * var_x619;
        const double var_x967 = var_x963;
        const double var_x968 = var_x14 * var_x963;
        const double var_x969 = 2.7e-6 * var_x810;
        const double var_x970 = 1.2 * var_x487 * var_x641;
        const double var_x971 = var_x852 * var_chaste_interface__ICaL__d;
        const double var_x972 = (var_x486 * var_chaste_interface__ryr__Jrelp + var_x487 * var_chaste_interface__ryr__Jrelnp) * NV_Ith_S(mParameters, 0);
        const double var_x973 = var_x533 * var_x884;
        const double var_x974 = 133.19999999999999 * var_x968;
        const double var_x975 = var_x533 * var_x885;
        const double var_x976 = 0.23999999999999996 * var_x433;
        const double var_x977 = 0.80000000000000004 + var_chaste_interface__intracellular_ions__cajsr;
        const double var_x978 = pow(var_x977, (-2));
        const double var_x979 = 1 / (1.0 + 8.0 * var_x978);
        const double var_x980 = var_x979 * NV_Ith_S(mParameters, 0);
        const double var_x981 = var_x980;
        const double var_x982 = 0.01 * var_x979;
        const double var_x983 = exp(-4.0087123898287915 - 0.10130685847431871 * var_chaste_interface__membrane__v);
        const double var_x984 = 1.0 + var_x983;
        const double var_x985 = exp(0.33477135461604829 + 0.02876042565429968 * var_chaste_interface__membrane__v);
        const double var_x986 = exp(-13.000839630562552 - 0.16792611251049538 * var_chaste_interface__membrane__v);
        const double var_x987 = 0.19456427955133734 * var_x985 - 1.4361041141897564 * var_x986;
        const double var_x988 = 8.5519999999999996 * var_x986;
        const double var_x989 = 6.7649999999999997 * var_x985;
        const double var_x990 = var_x988 + var_x989;
        const double var_x991 = -var_x988 - var_x989;
        const double var_x992 = 0.16431153466973381 * var_chaste_interface__membrane__v;
        const double var_x993 = exp(13.621426224120933 + var_x992);
        const double var_x994 = 1.0 + var_x993;
        const double var_x995 = 1 / var_x994;
        const double var_x996 = exp(0.025140601874691665 + 0.049333991119881598 * var_chaste_interface__membrane__v);
        const double var_x997 = exp(-0.19029435163086714 - 0.15910898965791567 * var_chaste_interface__membrane__v);
        const double var_x998 = 6.149 * var_x996;
        const double var_x999 = 1.432e-5 * var_x997;
        const double var_x1000 = 0.16431153466973381 * var_x993 / pow(var_x994, 2);
        const double var_x1001 = exp(0.10112954465231205 + 0.017649135192375574 * var_chaste_interface__membrane__v);
        const double var_x1002 = exp(-0.63992869875222813 - 0.035650623885918005 * var_chaste_interface__membrane__v);
        const double var_x1003 = 0.0097940000000000006 * var_x1002;
        const double var_x1004 = 0.33429999999999999 * var_x1001;
        const double var_x1005 = exp(0.025854356306892066 + 0.02600780234070221 * var_chaste_interface__membrane__v);
        const double var_x1006 = exp(-12.148291269170388 - 0.12075836251660427 * var_chaste_interface__membrane__v);
        const double var_x1007 = 1 / (0.30520000000000003 * var_x1005 + 0.021360000000000001 * var_x1006);
        const double var_x1008 = 1 / (2.0379999999999998 + var_x1007);
        const double var_x1009 = (0.002579398623354667 * var_x1006 - 0.0079375812743823146 * var_x1005) / (pow((1 + 0.4906771344455349 * var_x1007), 2) * pow((var_x1005 + 0.069986893840104841 * var_x1006), 2));
        const double var_x1010 = exp(14.640157739073281 + var_x992);
        const double var_x1011 = 1.0 + var_x1010;
        const double var_x1012 = 0.11143333333333333 * var_x1001;
        const double var_x1013 = 0.003264666666666667 * var_x1002;
        const double var_x1014 = 1 / (2.9754799999999997 + 1.46 * var_x1007);
        const double var_x1015 = exp(-8.1401975683890573 - 0.18996960486322187 * var_chaste_interface__membrane__v);
        const double var_x1016 = 1.0 + var_x1015;
        const double var_x1017 = 0.13354700854700854 * var_chaste_interface__membrane__v;
        const double var_x1018 = exp(11.700053418803417 + var_x1017);
        const double var_x1019 = exp(12.528044871794872 + var_x1017);
        const double var_x1020 = -0.067476383265856948 * var_chaste_interface__membrane__v;
        const double var_x1021 = exp(0.96761133603238858 + var_x1020);
        const double var_x1022 = 1.0 + var_x1021;
        const double var_x1023 = 0.034035137876343539 * var_chaste_interface__membrane__v;
        const double var_x1024 = exp(0.62658348478969694 - var_x1023);
        const double var_x1025 = 1.0 + var_x1024;
        const double var_x1026 = exp(3.403513787634354 + var_x1023);
        const double var_x1027 = 1.0 + var_x1026;
        const double var_x1028 = 0.026774900134466751 * var_x1024 / pow(var_x1025, 2) - 0.113288618703949 * var_x1026 / pow(var_x1027, 2);
        const double var_x1029 = 3.3285782215882072 / var_x1027;
        const double var_x1030 = 0.78668405081082138 / var_x1025;
        const double var_x1031 = 0.067476383265856948 * var_x1029 + 0.067476383265856948 * var_x1030;
        const double var_x1032 = -var_x1029 - var_x1030;
        const double var_x1033 = exp(14.0 + 0.20000000000000001 * var_chaste_interface__membrane__v);
        const double var_x1034 = 1.0 + var_x1033;
        const double var_x1035 = 1.0 - 0.94999999999999996 / var_x1034;
        const double var_x1036 = 1 / var_x1035;
        const double var_x1037 = exp(-1.0 - 0.01 * var_chaste_interface__membrane__v);
        const double var_x1038 = exp(3.0138637733574445 + 0.060277275467148887 * var_chaste_interface__membrane__v);
        const double var_x1039 = 1 / (0.39329999999999998 * var_x1037 + 0.08004 * var_x1038);
        const double var_x1040 = 1 / (4.5620000000000003 + var_x1039);
        const double var_x1041 = var_x1036 * var_x1040;
        const double var_x1042 = exp(7.6939240063036234 + 0.17510068289266328 * var_chaste_interface__membrane__v);
        const double var_x1043 = 1.0 + var_x1042;
        const double var_x1044 = 0.17510068289266328 * var_x1042 / pow(var_x1043, 2);
        const double var_x1045 = 1 / var_x1043;
        const double var_x1046 = var_x1045 - var_chaste_interface__Ito__iF;
        const double var_x1047 = 0.31062867580131875 * var_x1036 * (0.0039329999999999999 * var_x1037 - 0.004824593128390597 * var_x1038) / (pow((1 + 0.21920210434020165 * var_x1039), 2) * pow((var_x1037 + 0.20350877192982458 * var_x1038), 2));
        const double var_x1048 = 0.19 * var_x1033 / (pow(var_x1034, 2) * pow(var_x1035, 2));
        const double var_x1049 = var_x1040 * var_x1048;
        const double var_x1050 = exp(14.123035029087756 + 0.12377769525931426 * var_chaste_interface__membrane__v);
        const double var_x1051 = exp(-1.6345469940728197 - 0.016934801016088061 * var_chaste_interface__membrane__v);
        const double var_x1052 = 1 / (1.7800000000000001e-8 * var_x1050 + 0.0014159999999999999 * var_x1051);
        const double var_x1053 = 1 / (23.620000000000001 + var_x1052);
        const double var_x1054 = var_x1036 * var_x1053;
        const double var_x1055 = var_x1045 - var_chaste_interface__Ito__iS;
        const double var_x1056 = var_x1048 * var_x1053;
        const double var_x1057 = 893.9509839578584 * var_x1036 * (2.3979678238780695e-5 * var_x1051 - 2.2032429756157938e-9 * var_x1050) / (pow((1 + 0.042337002540220152 * var_x1052), 2) * pow((var_x1051 + 1.2570621468926554e-5 * var_x1050), 2));
        const double var_x1058 = exp(1.6423751686909582 + var_x1020);
        const double var_x1059 = 1.0 + var_x1058;
        const double var_x1060 = 0.050000000000000003 * var_chaste_interface__membrane__v;
        const double var_x1061 = exp(3.5 + var_x1060);
        const double var_x1062 = 1.0 + var_x1061;
        const double var_x1063 = 1.0 - 0.5 / var_x1062;
        const double var_x1064 = 1 / var_x1063;
        const double var_x1065 = exp(56.77808727948004 - 4.6425255338904359 * var_chaste_interface__membrane__v);
        const double var_x1066 = exp(-10.534927627438641 + 0.062932662051604776 * var_chaste_interface__membrane__v);
        const double var_x1067 = var_x1065 + var_x1066;
        const double var_x1068 = 1 / var_x1067;
        const double var_x1069 = 1 / (1.3540000000000001 + 0.0001 * var_x1068);
        const double var_x1070 = var_x1064 * var_x1069;
        const double var_x1071 = var_x1041 * var_x1070;
        const double var_x1072 = var_x1045 - var_chaste_interface__Ito__iFp;
        const double var_x1073 = var_x1041 * var_x1072;
        const double var_x1074 = 5.4545970252809655e-5 * var_x1064 * (4.6425255338904359 * var_x1065 - 0.062932662051604776 * var_x1066) / (pow(var_x1067, 2) * pow((1 + 7.3855243722304278e-5 * var_x1068), 2));
        const double var_x1075 = var_x1070 * var_x1072;
        const double var_x1076 = 0.025000000000000001 * var_x1061 * var_x1069 / (pow(var_x1062, 2) * pow(var_x1063, 2));
        const double var_x1077 = var_x1054 * var_x1070;
        const double var_x1078 = var_x1045 - var_chaste_interface__Ito__iSp;
        const double var_x1079 = var_x1054 * var_x1078;
        const double var_x1080 = var_x1070 * var_x1078;
        const double var_x1081 = exp(-0.93144208037825049 - 0.23640661938534277 * var_chaste_interface__membrane__v);
        const double var_x1082 = 1.0 + var_x1081;
        const double var_x1083 = exp(1.26 + 0.089999999999999997 * var_chaste_interface__membrane__v);
        const double var_x1084 = exp(-0.30000000000000004 - 0.050000000000000003 * var_chaste_interface__membrane__v);
        const double var_x1085 = var_x1083 + var_x1084;
        const double var_x1086 = 0.59999999999999998 + 1 / var_x1085;
        const double var_x1087 = 1 / var_x1086;
        const double var_x1088 = exp(2.0 + var_x439);
        const double var_x1089 = exp(-2.0 - var_x439);
        const double var_x1090 = 1 / (0.0044999999999999997 * var_x1088 + 0.0044999999999999997 * var_x1089);
        const double var_x1091 = 1 / (7.0 + var_x1090);
        const double var_x1092 = exp(5.2976190476190466 + 0.27056277056277056 * var_chaste_interface__membrane__v);
        const double var_x1093 = 1.0 + var_x1092;
        const double var_x1094 = var_x1092 / pow(var_x1093, 2);
        const double var_x1095 = 0.27056277056277056 * var_x1094;
        const double var_x1096 = 1 / var_x1093;
        const double var_x1097 = (0.00044999999999999999 * var_x1089 - 0.00044999999999999999 * var_x1088) / (pow((1 + 0.14285714285714285 * var_x1090), 2) * pow((var_x1088 + var_x1089), 2));
        const double var_x1098 = exp(0.83333333333333337 + 0.16666666666666666 * var_chaste_interface__membrane__v);
        const double var_x1099 = exp(-1.25 - 0.25 * var_chaste_interface__membrane__v);
        const double var_x1100 = 1 / (3.4999999999999997e-5 * var_x1098 + 3.4999999999999997e-5 * var_x1099);
        const double var_x1101 = 1 / (1000.0 + var_x1100);
        const double var_x1102 = 0.14285714285714285 * var_chaste_interface__membrane__v;
        const double var_x1103 = exp(0.5714285714285714 - var_x1102);
        const double var_x1104 = exp(-0.5714285714285714 + var_x1102);
        const double var_x1105 = 1 / (0.040000000000000001 * var_x1103 + 0.040000000000000001 * var_x1104);
        const double var_x1106 = 1 / (7.0 + var_x1105);
        const double var_x1107 = (0.0057142857142857143 * var_x1103 - 0.0057142857142857143 * var_x1104) / (pow((1 + 0.14285714285714285 * var_x1105), 2) * pow((var_x1103 + var_x1104), 2));
        const double var_x1108 = exp(var_x1102);
        const double var_x1109 = exp(-0.33333333333333331 * var_chaste_interface__membrane__v);
        const double var_x1110 = 1 / (0.00012 * var_x1108 + 0.00012 * var_x1109);
        const double var_x1111 = 1 / (100.0 + var_x1110);
        const double var_x1112 = 1 / (17.5 + 2.5 * var_x1090);
        const double var_x1113 = 1 / (17.5 + 2.5 * var_x1105);
        const double var_x1114 = 1.0 + 0.002 * var_x427;
        const double var_x1115 = pow((1 / var_chaste_interface__ICaL__jca + 0.001 * pow(var_x1114, 4)), (-2));
        const double var_x1116 = exp(2.3444553483807655 - 0.049067713444553483 * var_chaste_interface__membrane__v);
        const double var_x1117 = exp(-8.182993021452571 + 0.25846471956577927 * var_chaste_interface__membrane__v);
        const double var_x1118 = 1 / (4.1230000000000003e-5 * var_x1116 + 0.36520000000000002 * var_x1117);
        const double var_x1119 = 1 / (12.98 + var_x1118);
        const double var_x1120 = exp(-1.2280159080866107 - 0.14729709824716453 * var_chaste_interface__membrane__v);
        const double var_x1121 = 1.0 + var_x1120;
        const double var_x1122 = 0.14729709824716453 * var_x1120 / pow(var_x1121, 2);
        const double var_x1123 = 1 / var_x1121;
        const double var_x1124 = exp(1.146491904394757 - 0.038550501156515031 * var_chaste_interface__membrane__v);
        const double var_x1125 = exp(-4.7178789938817136 + 0.13596193065941536 * var_chaste_interface__membrane__v);
        const double var_x1126 = 1 / (1.128e-5 * var_x1124 + 0.066290000000000002 * var_x1125);
        const double var_x1127 = 1 / (1.865 + var_x1126);
        const double var_x1128 = exp(-0.91304347826086951 - 0.0043478260869565218 * var_chaste_interface__membrane__v);
        const double var_x1129 = exp(2.7123595505617977 + 0.056179775280898875 * var_chaste_interface__membrane__v);
        const double var_x1130 = 1 / (0.001292 * var_x1128 + 0.00023259999999999999 * var_x1129);
        const double var_x1131 = 1 / (817.29999999999995 + var_x1130);
        const double var_x1132 = exp(-1.2987012987012987 - 0.11195700850873264 * var_chaste_interface__membrane__v);
        const double var_x1133 = 1.0 + var_x1132;
        const double var_x1134 = 0.11195700850873264 * var_x1132 / pow(var_x1133, 2);
        const double var_x1135 = 1 / var_x1133;
        const double var_x1136 = exp(-2.5 + var_x1060);
        const double var_x1137 = exp(-2.1464516129032258 - 0.032258064516129031 * var_chaste_interface__membrane__v);
        const double var_x1138 = 0.019300000000000001 * var_x1137;
        const double var_x1139 = 0.01 * var_x1136;
        const double var_x1140 = 1 / (3.8115000000000001 + 1.5691999999999999 * NV_Ith_S(mParameters, 3));
        const double var_x1141 = exp(var_x1140 * (-144.59 - var_chaste_interface__membrane__v - 2.5537999999999998 * NV_Ith_S(mParameters, 3)));
        const double var_x1142 = 1.0 + var_x1141;
        const double var_x1143 = exp(3.4155488244627148 + 0.014423770373575654 * var_chaste_interface__membrane__v);
        const double var_x1144 = exp(-6.2475442043222005 - 0.049115913555992145 * var_chaste_interface__membrane__v);
        const double var_x1145 = 0.0081833060556464818 * var_x1143;
        const double var_x1146 = 0.0081833060556464818 * var_x1144;
        const double var_x1147 = pow(var_chaste_interface__intracellular_ions__cajsr, (-8));
        const double var_x1148 = 1 / (1.0 + 25.62890625 * var_x1147);
        const double var_x1149 = 1.2 - var_x526;
        const double var_x1150 = var_x1149 * var_x449;
        const double var_x1151 = var_x1149 * var_x533;
        const double var_x1152 = var_x1148 * (var_x531 + var_x536 + var_x1150 * var_x525 + var_x1151 * var_x468);
        const double var_x1153 = 1 / var_chaste_interface__intracellular_ions__cajsr;
        const double var_x1154 = 1 / (1.0 + 0.0123 * var_x1153);
        const double var_x1155 = 4.75 * var_x1154 < 0.001;
        const double var_x1156 = ((var_x1155) ? (1000.0) : (0.21052631578947367 + 0.0025894736842105265 * var_x1153));
        const double var_x1157 = 2.375 * var_x1156;
        const double var_x1158 = var_x642 - var_x639;
        const double var_x1159 = var_x1148 * var_x1157;
        const double var_x1160 = var_x832 + var_x834 - var_x833 + var_x1150 * var_x831;
        const double var_x1161 = var_x970 + var_x971;
        const double var_x1162 = var_x1148 * var_x1161;
        const double var_x1163 = pow(var_chaste_interface__intracellular_ions__cajsr, (-2));
        const double var_x1164 = var_x1161 / (pow((0.039018442310623382 + var_x1147), 2) * pow(var_chaste_interface__intracellular_ions__cajsr, 9));
        const double var_x1165 = var_x852 + var_x1149 * var_x640;
        const double var_x1166 = var_x1151 * var_x855;
        const double var_x1167 = var_x863 + var_x1151 * var_x859;
        const double var_x1168 = var_x1151 * var_x866;
        const double var_x1169 = var_x874 + var_x1151 * var_x870;
        const double var_x1170 = var_x882 + var_x1151 * var_x877;
        const double var_x1171 = var_x1148 * var_x973;
        const double var_x1172 = 3.1350000000000002 * var_x1156;
        const double var_x1173 = var_x1148 * var_x975;
        const double var_x1174 = var_x893 + var_x1151 * var_x888;
        const double var_x1175 = 5.9375 * var_x1154 < 0.001;
        const double var_x1176 = ((var_x1175) ? (1000.0) : (0.16842105263157894 + 0.0020715789473684213 * var_x1153));
        const double var_x1177 = 2.96875 * var_x1176;
        const double var_x1178 = var_x1148 * var_x1177;
        const double var_x1179 = 3.9187500000000002 * var_x1176;
        
        // Matrix entries
        IJth(rJacobian, 0, 0) = mSetVoltageDerivativeToZero ? 0.0 : (var_x33 + var_x498 + var_x519 + var_x537 + var_x590 - var_x459 - var_x473 + var_x425 * var_x450 + var_x462 * var_x468 + (2.2883093838538917 * var_x142 + 0.35468795449735319 * var_x148 - 0.0024432929743287307 * var_x150 - 27.352034447734344 * var_x151 + var_x116 * var_x118 + var_x134 * var_x137 + var_x134 * var_x147 - var_x108 * var_x99 - var_x129 * var_x133 - var_x134 * var_x145 - var_x138 * var_x140) * NV_Ith_S(mParameters, 17) - var_x307 * var_x311 - var_x402 * var_x405);
        IJth(rJacobian, 1, 0) = var_x899 * var_x901 * (var_x33 + var_x402 * var_x900);
        IJth(rJacobian, 3, 0) = var_x928 * (var_x498 + (6.8649281515616751 * var_x142 + 1.0640638634920596 * var_x148 - 82.056103343203034 * var_x151 - 0.0073298789229861924 * var_x150 + var_x116 * var_x921 + var_x134 * var_x923 + var_x134 * var_x926 - var_x129 * var_x922 - var_x134 * var_x925 - var_x138 * var_x924 - var_x920 * var_x99) * NV_Ith_S(mParameters, 17) - var_x402 * var_x927);
        IJth(rJacobian, 4, 0) = var_x934 * (var_x519 - var_x307 * var_x933);
        IJth(rJacobian, 5, 0) = var_x928 * (var_x590 + (0.0048865859486574613 * var_x150 + 54.704068895468687 * var_x151 - 4.5766187677077834 * var_x142 - 0.70937590899470637 * var_x148 + var_x129 * var_x937 + var_x134 * var_x941 + var_x138 * var_x939 + var_x936 * var_x99 - var_x116 * var_x938 - var_x134 * var_x940 - var_x134 * var_x942) * NV_Ith_S(mParameters, 17));
        IJth(rJacobian, 6, 0) = -var_x934 * (var_x459 + var_x473 + var_x425 * var_x955 + var_x468 * var_x956);
        IJth(rJacobian, 7, 0) = var_x965 * (var_x537 + var_x307 * var_x959);
        IJth(rJacobian, 10, 0) = var_x987 * (-var_chaste_interface__INa__m + 1 / var_x984) + 0.10130685847431871 * var_x983 * var_x990 / pow(var_x984, 2);
        IJth(rJacobian, 11, 0) = (var_x995 - var_chaste_interface__INa__hf) * (0.30335471139615194 * var_x996 - 2.2784407319013524e-6 * var_x997) - var_x1000 * (var_x998 + var_x999);
        IJth(rJacobian, 12, 0) = (var_x995 - var_chaste_interface__INa__hs) * (0.0059001058948111541 * var_x1001 - 0.00034916221033868096 * var_x1002) - var_x1000 * (var_x1003 + var_x1004);
        IJth(rJacobian, 13, 0) = -var_x1000 * var_x1008 - 2.5847740332669882 * var_x1009 * (var_x995 - var_chaste_interface__INa__j);
        IJth(rJacobian, 14, 0) = (-var_chaste_interface__INa__hsp + 1 / var_x1011) * (0.0019667019649370517 * var_x1001 - 0.00011638740344622698 * var_x1002) - 0.16431153466973381 * var_x1010 * (var_x1012 + var_x1013) / pow(var_x1011, 2);
        IJth(rJacobian, 15, 0) = -var_x1000 * var_x1014 - 1.7703931734705398 * var_x1009 * (var_x995 - var_chaste_interface__INa__jp);
        IJth(rJacobian, 16, 0) = var_x987 * (-var_chaste_interface__INaL__mL + 1 / var_x1016) + 0.18996960486322187 * var_x1015 * var_x990 / pow(var_x1016, 2);
        IJth(rJacobian, 17, 0) = -0.00066773504273504275 * var_x1018 / pow((1.0 + var_x1018), 2);
        IJth(rJacobian, 18, 0) = -0.00022257834757834756 * var_x1019 / pow((1.0 + var_x1019), 2);
        IJth(rJacobian, 19, 0) = var_x1028 * (-var_chaste_interface__Ito__a + 1 / var_x1022) + var_x1021 * var_x1031 / pow(var_x1022, 2);
        IJth(rJacobian, 20, 0) = -var_x1041 * var_x1044 - var_x1046 * var_x1047 - var_x1046 * var_x1049;
        IJth(rJacobian, 21, 0) = -var_x1044 * var_x1054 - var_x1055 * var_x1056 - var_x1055 * var_x1057;
        IJth(rJacobian, 22, 0) = var_x1028 * (-var_chaste_interface__Ito__ap + 1 / var_x1059) + var_x1031 * var_x1058 / pow(var_x1059, 2);
        IJth(rJacobian, 23, 0) = -var_x1044 * var_x1071 - var_x1047 * var_x1075 - var_x1049 * var_x1075 - var_x1073 * var_x1074 - var_x1073 * var_x1076;
        IJth(rJacobian, 24, 0) = -var_x1044 * var_x1077 - var_x1056 * var_x1080 - var_x1057 * var_x1080 - var_x1074 * var_x1079 - var_x1076 * var_x1079;
        IJth(rJacobian, 25, 0) = 0.23640661938534277 * var_x1081 * var_x1087 / pow(var_x1082, 2) - (-var_chaste_interface__ICaL__d + 1 / var_x1082) * (0.050000000000000003 * var_x1084 - 0.089999999999999997 * var_x1083) / (pow(var_x1085, 2) * pow(var_x1086, 2));
        IJth(rJacobian, 26, 0) = -var_x1091 * var_x1095 - 1007.8105316200556 * var_x1097 * (var_x1096 - var_chaste_interface__ICaL__ff);
        IJth(rJacobian, 27, 0) = -var_x1095 * var_x1101 - 816.32653061224505 * (var_x1096 - var_chaste_interface__ICaL__fs) * (8.7499999999999992e-6 * var_x1099 - 5.8333333333333331e-6 * var_x1098) / (pow((1 + 0.001 * var_x1100), 2) * pow((var_x1098 + var_x1099), 2));
        IJth(rJacobian, 28, 0) = -var_x1095 * var_x1106 - 12.755102040816325 * var_x1107 * (var_x1096 - var_chaste_interface__ICaL__fcaf);
        IJth(rJacobian, 29, 0) = -var_x1095 * var_x1111 - 6944.4444444444443 * (var_x1096 - var_chaste_interface__ICaL__fcas) * (4.0000000000000003e-5 * var_x1109 - 1.7142857142857142e-5 * var_x1108) / (pow((1 + 0.01 * var_x1110), 2) * pow((var_x1108 + var_x1109), 2));
        IJth(rJacobian, 30, 0) = -0.0036075036075036075 * var_x1094;
        IJth(rJacobian, 31, 0) = -var_x1095 * var_x1112 - 403.12421264802225 * var_x1097 * (var_x1096 - var_chaste_interface__ICaL__ffp);
        IJth(rJacobian, 32, 0) = -var_x1095 * var_x1113 - 5.1020408163265305 * var_x1107 * (var_x1096 - var_chaste_interface__ICaL__fcafp);
        IJth(rJacobian, 34, 0) = var_x1119 * var_x1122 - 0.044502978385908498 * (var_x1123 - var_chaste_interface__IKr__xrf) * (2.0230618253189406e-6 * var_x1116 - 0.094391315585422589 * var_x1117) / (pow((1 + 0.077041602465331274 * var_x1118), 2) * pow((var_x1117 + 0.00011289704271631982 * var_x1116), 2));
        IJth(rJacobian, 35, 0) = var_x1122 * var_x1127 - 65.425385409990326 * (var_x1123 - var_chaste_interface__IKr__xrs) * (4.348496530454896e-7 * var_x1124 - 0.0090129163834126447 * var_x1125) / (pow((1 + 0.53619302949061665 * var_x1126), 2) * pow((var_x1125 + 0.00017016141197767387 * var_x1124), 2));
        IJth(rJacobian, 36, 0) = var_x1131 * var_x1134 - 0.89683381486126834 * (var_x1135 - var_chaste_interface__IKs__xs1) * (5.617391304347826e-6 * var_x1128 - 1.3067415730337078e-5 * var_x1129) / (pow((1 + 0.001223540927444023 * var_x1130), 2) * pow((var_x1128 + 0.18003095975232197 * var_x1129), 2));
        IJth(rJacobian, 37, 0) = var_x1134 * (var_x1138 + var_x1139) + (var_x1135 - var_chaste_interface__IKs__xs2) * (0.00050000000000000001 * var_x1136 - 0.00062258064516129035 * var_x1137);
        IJth(rJacobian, 38, 0) = (-var_chaste_interface__IK1__xk1 + 1 / var_x1142) * (0.00011803412744333594 * var_x1143 - 0.00040193055283135957 * var_x1144) + var_x1140 * var_x1141 * (var_x1145 + var_x1146) / pow(var_x1142, 2);
        IJth(rJacobian, 39, 0) = -var_x1152 * var_x1157;
        IJth(rJacobian, 40, 0) = -var_x1152 * var_x1177;
        IJth(rJacobian, 0, 1) = mSetVoltageDerivativeToZero ? 0.0 : (var_x617 - 3.9599999999999997e-8 * var_x605 - 7.6226215266496694e-7 * var_x609 - var_x405 * var_x603);
        IJth(rJacobian, 1, 1) = var_x910 * (-0.14705882352941174 + var_x901 * (var_x617 + 7.9199999999999995e-8 * var_x605 + var_x603 * var_x900) + (0.0012696507352941177 * var_x908 + 0.00046169117647058827 * var_x909 - 0.0012696507352941177 * var_x904 - 0.00046169117647058827 * var_x907) * NV_Ith_S(mParameters, 1)) + (0.00030940000000000004 / pow(var_x897, 3) + 7.0000000000000007e-5 / pow(var_x614, 3)) * (0.14705882352941174 * var_chaste_interface__intracellular_ions__cass - 0.14705882352941174 * var_chaste_interface__intracellular_ions__cai + var_x901 * (-((var_x17) ? (-var_x8 + var_x12 * var_x532) : (var_x27 * var_chaste_interface__membrane__v)) + var_x604 * var_x900 - var_x615 * var_chaste_interface__intracellular_ions__cai) - 0.081176470588235281 * (-0.00026249999999999998 * var_chaste_interface__intracellular_ions__cansr + var_x911 * var_chaste_interface__intracellular_ions__cai + var_x912 * var_chaste_interface__intracellular_ions__cai) * NV_Ith_S(mParameters, 1)) / pow(var_x898, 2);
        IJth(rJacobian, 3, 1) = var_x928 * (-1.1879999999999999e-7 * var_x605 - var_x603 * var_x927);
        IJth(rJacobian, 5, 1) = -4.524657697636969e-6 * var_x14 * var_x609;
        IJth(rJacobian, 7, 1) = 5.0 * var_x963;
        IJth(rJacobian, 8, 1) = (var_x911 + var_x912 - 0.015640625000000002 * var_x908 - 0.0056875000000000007 * var_x909) * NV_Ith_S(mParameters, 1);
        IJth(rJacobian, 0, 2) = mSetVoltageDerivativeToZero ? 0.0 : (var_x621 + var_x624 + var_x635 + var_x638 + var_x643 - var_x627);
        IJth(rJacobian, 1, 2) = var_x910 * (0.00019044761029411765 * var_x914 - 6.9253676470588241e-5 * var_x915) * NV_Ith_S(mParameters, 1);
        IJth(rJacobian, 2, 2) = -0.00068000000000000005 - var_x431 * var_x919 + var_x426 * var_x919 * (1 - var_x430);
        IJth(rJacobian, 3, 2) = var_x635 * var_x928;
        IJth(rJacobian, 4, 2) = var_x638 * var_x934;
        IJth(rJacobian, 5, 2) = var_x621 * var_x928;
        IJth(rJacobian, 6, 2) = -var_x934 * (var_x627 - var_x624);
        IJth(rJacobian, 7, 2) = var_x967 * (var_x643 * var_x964 + (var_x966 * var_chaste_interface__ryr__Jrelnp - var_x966 * var_chaste_interface__ryr__Jrelp) * NV_Ith_S(mParameters, 0));
        IJth(rJacobian, 8, 2) = (0.00085312500000000004 * var_x915 - 0.0023460937500000001 * var_x914) * NV_Ith_S(mParameters, 1);
        IJth(rJacobian, 9, 2) = var_x981 * (var_x632 * var_chaste_interface__ryr__Jrelp - var_x632 * var_chaste_interface__ryr__Jrelnp);
        IJth(rJacobian, 39, 2) = -var_x1158 * var_x1159;
        IJth(rJacobian, 40, 2) = -var_x1158 * var_x1178;
        IJth(rJacobian, 0, 3) = mSetVoltageDerivativeToZero ? 0.0 : (var_x645 + var_x733 + (6.8649281515616751 * var_x681 - 0.047289541438620596 * var_x684 - 3.9136917853411447e-14 * var_x685 - 2.7551249987499493e-12 * var_x678 + var_x118 * var_x667 + var_x676 * var_x679 + var_x676 * var_x683 - var_x108 * var_x664 - var_x133 * var_x676 - var_x140 * var_x680 - var_x676 * var_x682) * NV_Ith_S(mParameters, 17) - var_x405 * var_x729);
        IJth(rJacobian, 1, 3) = 5.223529411764706 * var_x14 * var_x404 * var_x729 * var_x899;
        IJth(rJacobian, 3, 3) = -0.014705882352941176 + var_x928 * (var_x733 + (20.594784454685026 * var_x681 - 0.14186862431586178 * var_x684 - 8.2653749962498475e-12 * var_x678 - 1.1741075356023433e-13 * var_x685 + var_x667 * var_x921 + var_x676 * var_x929 + var_x676 * var_x931 - var_x664 * var_x920 - var_x676 * var_x922 - var_x676 * var_x930 - var_x680 * var_x924) * NV_Ith_S(mParameters, 17) - var_x729 * var_x927);
        IJth(rJacobian, 4, 3) = 0.5;
        IJth(rJacobian, 5, 3) = var_x928 * (var_x645 + (0.094579082877241191 * var_x684 + 7.8273835706822894e-14 * var_x685 + 5.5102499974998986e-12 * var_x678 - 13.72985630312335 * var_x681 + var_x664 * var_x936 + var_x676 * var_x937 + var_x676 * var_x944 + var_x680 * var_x939 - var_x667 * var_x938 - var_x676 * var_x943 - var_x676 * var_x945) * NV_Ith_S(mParameters, 17));
        IJth(rJacobian, 0, 4) = mSetVoltageDerivativeToZero ? 0.0 : (var_x776 - var_x311 * var_x772);
        IJth(rJacobian, 3, 4) = 0.014705882352941176;
        IJth(rJacobian, 4, 4) = -0.5 + var_x934 * (var_x776 - var_x772 * var_x933);
        IJth(rJacobian, 7, 4) = 44.400000000000006 * var_x310 * var_x772 * var_x968;
        IJth(rJacobian, 0, 5) = mSetVoltageDerivativeToZero ? 0.0 : (var_x807 + (0.14301933649086823 * var_x805 - 3.0022841093027957e-14 * var_x685 - 2.1135205469862627e-12 * var_x678 + var_x118 * var_x795 + var_x679 * var_x803 + var_x683 * var_x803 - var_x108 * var_x790 - var_x133 * var_x803 - var_x140 * var_x804 - var_x682 * var_x803) * NV_Ith_S(mParameters, 17));
        IJth(rJacobian, 3, 5) = var_x928 * (0.4290580094726047 * var_x805 - 9.0068523279083876e-14 * var_x685 - 6.3405616409587878e-12 * var_x678 + var_x795 * var_x921 + var_x803 * var_x929 + var_x803 * var_x931 - var_x790 * var_x920 - var_x803 * var_x922 - var_x803 * var_x930 - var_x804 * var_x924) * NV_Ith_S(mParameters, 17);
        IJth(rJacobian, 5, 5) = -0.014705882352941176 + var_x928 * (var_x807 + (6.0045682186055913e-14 * var_x685 + 4.2270410939725255e-12 * var_x678 - 0.28603867298173646 * var_x805 + var_x790 * var_x936 + var_x803 * var_x937 + var_x803 * var_x944 + var_x804 * var_x939 - var_x795 * var_x938 - var_x803 * var_x943 - var_x803 * var_x945) * NV_Ith_S(mParameters, 17));
        IJth(rJacobian, 6, 5) = 0.5;
        IJth(rJacobian, 0, 6) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x808 + var_x450 * var_x775);
        IJth(rJacobian, 5, 6) = 0.014705882352941176;
        IJth(rJacobian, 6, 6) = -0.5 - var_x934 * (var_x808 + var_x775 * var_x955);
        IJth(rJacobian, 0, 7) = mSetVoltageDerivativeToZero ? 0.0 : (var_x812 + var_x823 + var_x829 + var_x830 + var_x835 - var_x826 - 9.8999999999999993e-9 * var_x822 - var_x311 * var_x820);
        IJth(rJacobian, 1, 7) = var_x910 * (0.14705882352941174 + (5.1940257352941184e-9 * var_x917 - 1.4283570772058824e-8 * var_x918) * NV_Ith_S(mParameters, 1));
        IJth(rJacobian, 2, 7) = 3.7500000000000005e-6 * var_x431 * var_x809 + 1.8750000000000003e-7 * var_x308 * pow(var_x426, 2) / pow(var_x428, 3);
        IJth(rJacobian, 3, 7) = var_x829 * var_x928;
        IJth(rJacobian, 4, 7) = var_x934 * (var_x830 - 2.9699999999999998e-8 * var_x822 - var_x820 * var_x933);
        IJth(rJacobian, 5, 7) = var_x812 * var_x928;
        IJth(rJacobian, 6, 7) = -var_x934 * (var_x826 - var_x823);
        IJth(rJacobian, 7, 7) = var_x967 * (-5.0 + var_x964 * (var_x835 + 1.9799999999999999e-8 * var_x822 + var_x820 * var_x959) + (var_x969 * var_chaste_interface__ryr__Jrelp - var_x969 * var_chaste_interface__ryr__Jrelnp) * NV_Ith_S(mParameters, 0)) + (0.019557600000000001 / pow(var_x960, 3) + 8.1780000000000006e-5 / pow(var_x961, 3)) * (5.0 * var_chaste_interface__intracellular_ions__cai + 0.23999999999999996 * var_x972 - 5.0 * var_chaste_interface__intracellular_ions__cass + var_x964 * (-var_x970 - var_x971 + var_x821 * var_x959)) / pow(var_x962, 2);
        IJth(rJacobian, 8, 7) = (1.7595703125000003e-7 * var_x918 - 6.3984375000000009e-8 * var_x917) * NV_Ith_S(mParameters, 1);
        IJth(rJacobian, 9, 7) = var_x981 * (var_x828 * var_chaste_interface__ryr__Jrelnp - var_x828 * var_chaste_interface__ryr__Jrelp);
        IJth(rJacobian, 33, 7) = 7.9999999999999996e-6 * var_x1115 * var_x308 * pow(var_x1114, 3);
        IJth(rJacobian, 39, 7) = -var_x1159 * var_x1160;
        IJth(rJacobian, 40, 7) = -var_x1160 * var_x1178;
        IJth(rJacobian, 1, 8) = 2.1308823529411761e-5 * var_x899 * NV_Ith_S(mParameters, 1);
        IJth(rJacobian, 8, 8) = -0.00086956521739130427 - 0.00026249999999999998 * NV_Ith_S(mParameters, 1);
        IJth(rJacobian, 9, 8) = var_x982;
        IJth(rJacobian, 8, 9) = 0.00086956521739130427;
        IJth(rJacobian, 9, 9) = -var_x982 + 0.25 * (-var_x972 + 0.01 * var_chaste_interface__intracellular_ions__cansr - 0.01 * var_chaste_interface__intracellular_ions__cajsr) / (pow(var_x977, 3) * pow((0.125 + var_x978), 2));
        IJth(rJacobian, 39, 9) = (-var_chaste_interface__ryr__Jrelnp - 2.375 * var_x1162) * ((var_x1155) ? (0) : (-0.0025894736842105265 * var_x1163)) - 0.74135040390184426 * var_x1156 * var_x1164;
        IJth(rJacobian, 40, 9) = (-var_chaste_interface__ryr__Jrelp - 2.96875 * var_x1162) * ((var_x1175) ? (0) : (-0.0020715789473684213 * var_x1163)) - 0.92668800487730529 * var_x1164 * var_x1176;
        IJth(rJacobian, 0, 10) = mSetVoltageDerivativeToZero ? 0.0 : (-3 * var_x836);
        IJth(rJacobian, 3, 10) = -17.80748663101604 * var_x14 * var_x836;
        IJth(rJacobian, 10, 10) = var_x991;
        IJth(rJacobian, 0, 11) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x838);
        IJth(rJacobian, 3, 11) = -var_x838 * var_x928;
        IJth(rJacobian, 11, 11) = -var_x998 - var_x999;
        IJth(rJacobian, 0, 12) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x840);
        IJth(rJacobian, 3, 12) = -var_x840 * var_x928;
        IJth(rJacobian, 12, 12) = -var_x1003 - var_x1004;
        IJth(rJacobian, 0, 13) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x841);
        IJth(rJacobian, 3, 13) = -var_x841 * var_x928;
        IJth(rJacobian, 13, 13) = -var_x1008;
        IJth(rJacobian, 0, 14) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x839 * var_x842);
        IJth(rJacobian, 3, 14) = -0.059358288770053523 * var_x842 * var_x932;
        IJth(rJacobian, 14, 14) = -var_x1012 - var_x1013;
        IJth(rJacobian, 0, 15) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x486 * var_x843);
        IJth(rJacobian, 3, 15) = -var_x433 * var_x843 * var_x928;
        IJth(rJacobian, 15, 15) = -var_x1014;
        IJth(rJacobian, 0, 16) = mSetVoltageDerivativeToZero ? 0.0 : (var_x844);
        IJth(rJacobian, 3, 16) = var_x844 * var_x928;
        IJth(rJacobian, 16, 16) = var_x991;
        IJth(rJacobian, 0, 17) = mSetVoltageDerivativeToZero ? 0.0 : (var_x845);
        IJth(rJacobian, 3, 17) = var_x845 * var_x928;
        IJth(rJacobian, 17, 17) = -0.0050000000000000001;
        IJth(rJacobian, 0, 18) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x485 * var_x631);
        IJth(rJacobian, 3, 18) = -3.5614973262032081 * var_x631 * var_x932;
        IJth(rJacobian, 18, 18) = -0.0016666666666666668;
        IJth(rJacobian, 0, 19) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x548 * var_x846);
        IJth(rJacobian, 5, 19) = -var_x846 * var_x946;
        IJth(rJacobian, 19, 19) = var_x1032;
        IJth(rJacobian, 0, 20) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x540 * var_x847);
        IJth(rJacobian, 5, 20) = -var_x947 * var_x948;
        IJth(rJacobian, 20, 20) = -var_x1041;
        IJth(rJacobian, 0, 21) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x542 * var_x847);
        IJth(rJacobian, 5, 21) = -var_x948 * var_x949;
        IJth(rJacobian, 21, 21) = -var_x1054;
        IJth(rJacobian, 0, 22) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x545 * var_x848);
        IJth(rJacobian, 5, 22) = -var_x848 * var_x950;
        IJth(rJacobian, 22, 22) = var_x1032;
        IJth(rJacobian, 0, 23) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x540 * var_x849);
        IJth(rJacobian, 5, 23) = -var_x947 * var_x951;
        IJth(rJacobian, 23, 23) = -var_x1071;
        IJth(rJacobian, 0, 24) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x542 * var_x849);
        IJth(rJacobian, 5, 24) = -var_x949 * var_x951;
        IJth(rJacobian, 24, 24) = -var_x1077;
        IJth(rJacobian, 0, 25) = mSetVoltageDerivativeToZero ? 0.0 : (var_x851 + var_x853 - var_x850 + var_x435 * var_x625);
        IJth(rJacobian, 4, 25) = var_x851 * var_x934;
        IJth(rJacobian, 6, 25) = -var_x934 * (var_x850 + var_x625 * var_x954);
        IJth(rJacobian, 7, 25) = var_x853 * var_x965;
        IJth(rJacobian, 25, 25) = -var_x1087;
        IJth(rJacobian, 39, 25) = -var_x1159 * var_x1165;
        IJth(rJacobian, 40, 25) = -var_x1165 * var_x1178;
        IJth(rJacobian, 0, 26) = mSetVoltageDerivativeToZero ? 0.0 : (var_x856 + var_x857 + var_x462 * var_x855);
        IJth(rJacobian, 4, 26) = var_x857 * var_x934;
        IJth(rJacobian, 6, 26) = -var_x855 * var_x957;
        IJth(rJacobian, 7, 26) = var_x856 * var_x965;
        IJth(rJacobian, 26, 26) = -var_x1091;
        IJth(rJacobian, 39, 26) = -var_x1159 * var_x1166;
        IJth(rJacobian, 40, 26) = -var_x1166 * var_x1178;
        IJth(rJacobian, 0, 27) = mSetVoltageDerivativeToZero ? 0.0 : (var_x862 + var_x864 - var_x861 + var_x462 * var_x859);
        IJth(rJacobian, 4, 27) = var_x862 * var_x934;
        IJth(rJacobian, 6, 27) = -var_x934 * (var_x861 + var_x859 * var_x956);
        IJth(rJacobian, 7, 27) = var_x864 * var_x965;
        IJth(rJacobian, 27, 27) = -var_x1101;
        IJth(rJacobian, 39, 27) = -var_x1159 * var_x1167;
        IJth(rJacobian, 40, 27) = -var_x1167 * var_x1178;
        IJth(rJacobian, 0, 28) = mSetVoltageDerivativeToZero ? 0.0 : (var_x867 + var_x868 + var_x462 * var_x866);
        IJth(rJacobian, 4, 28) = var_x868 * var_x934;
        IJth(rJacobian, 6, 28) = -var_x866 * var_x957;
        IJth(rJacobian, 7, 28) = var_x867 * var_x965;
        IJth(rJacobian, 28, 28) = -var_x1106;
        IJth(rJacobian, 39, 28) = -var_x1159 * var_x1168;
        IJth(rJacobian, 40, 28) = -var_x1168 * var_x1178;
        IJth(rJacobian, 0, 29) = mSetVoltageDerivativeToZero ? 0.0 : (var_x873 + var_x875 - var_x872 + var_x462 * var_x870);
        IJth(rJacobian, 4, 29) = var_x873 * var_x934;
        IJth(rJacobian, 6, 29) = -var_x934 * (var_x872 + var_x870 * var_x956);
        IJth(rJacobian, 7, 29) = var_x875 * var_x965;
        IJth(rJacobian, 29, 29) = -var_x1111;
        IJth(rJacobian, 39, 29) = -var_x1159 * var_x1169;
        IJth(rJacobian, 40, 29) = -var_x1169 * var_x1178;
        IJth(rJacobian, 0, 30) = mSetVoltageDerivativeToZero ? 0.0 : (var_x881 + var_x883 - var_x880 + var_x462 * var_x877);
        IJth(rJacobian, 4, 30) = var_x881 * var_x934;
        IJth(rJacobian, 6, 30) = -var_x934 * (var_x880 + var_x877 * var_x956);
        IJth(rJacobian, 7, 30) = var_x883 * var_x965;
        IJth(rJacobian, 30, 30) = -0.013333333333333334;
        IJth(rJacobian, 33, 30) = -var_chaste_interface__ICaL__nca + 1.0 * var_x1115 / pow(var_chaste_interface__ICaL__jca, 2);
        IJth(rJacobian, 39, 30) = -var_x1159 * var_x1170;
        IJth(rJacobian, 40, 30) = -var_x1170 * var_x1178;
        IJth(rJacobian, 0, 31) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x469 * var_x884 - var_x517 * var_x854 - var_x535 * var_x884);
        IJth(rJacobian, 4, 31) = -var_x854 * var_x935;
        IJth(rJacobian, 6, 31) = -var_x884 * var_x958;
        IJth(rJacobian, 7, 31) = -var_x973 * var_x974;
        IJth(rJacobian, 31, 31) = -var_x1112;
        IJth(rJacobian, 39, 31) = -var_x1171 * var_x1172;
        IJth(rJacobian, 40, 31) = -var_x1171 * var_x1179;
        IJth(rJacobian, 0, 32) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x469 * var_x885 - var_x518 * var_x865 - var_x535 * var_x885);
        IJth(rJacobian, 4, 32) = -var_x865 * var_x935 * var_chaste_interface__ICaL__d;
        IJth(rJacobian, 6, 32) = -var_x885 * var_x958;
        IJth(rJacobian, 7, 32) = -var_x974 * var_x975;
        IJth(rJacobian, 32, 32) = -var_x1113;
        IJth(rJacobian, 39, 32) = -var_x1172 * var_x1173;
        IJth(rJacobian, 40, 32) = -var_x1173 * var_x1179;
        IJth(rJacobian, 0, 33) = mSetVoltageDerivativeToZero ? 0.0 : (var_x892 + var_x894 - var_x891 + var_x462 * var_x888);
        IJth(rJacobian, 4, 33) = var_x892 * var_x934;
        IJth(rJacobian, 6, 33) = -var_x934 * (var_x891 + var_x888 * var_x956);
        IJth(rJacobian, 7, 33) = var_x894 * var_x965;
        IJth(rJacobian, 33, 33) = -var_chaste_interface__ICaL__jca;
        IJth(rJacobian, 39, 33) = -var_x1159 * var_x1174;
        IJth(rJacobian, 40, 33) = -var_x1174 * var_x1178;
        IJth(rJacobian, 0, 34) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x576 * var_x589);
        IJth(rJacobian, 5, 34) = -var_x576 * var_x953;
        IJth(rJacobian, 34, 34) = -var_x1119;
        IJth(rJacobian, 0, 35) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x578 * var_x589);
        IJth(rJacobian, 5, 35) = -var_x578 * var_x953;
        IJth(rJacobian, 35, 35) = -var_x1127;
        IJth(rJacobian, 0, 36) = mSetVoltageDerivativeToZero ? 0.0 : (var_x895);
        IJth(rJacobian, 5, 36) = var_x895 * var_x928;
        IJth(rJacobian, 36, 36) = -var_x1131;
        IJth(rJacobian, 0, 37) = mSetVoltageDerivativeToZero ? 0.0 : (var_x896);
        IJth(rJacobian, 5, 37) = var_x896 * var_x928;
        IJth(rJacobian, 37, 37) = -var_x1138 - var_x1139;
        IJth(rJacobian, 0, 38) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x557 * var_x569);
        IJth(rJacobian, 5, 38) = -7.1229946524064163 * var_x568 * var_x952;
        IJth(rJacobian, 38, 38) = -var_x1145 - var_x1146;
        IJth(rJacobian, 7, 39) = var_x967 * (0.23999999999999996 - var_x976) * NV_Ith_S(mParameters, 0);
        IJth(rJacobian, 9, 39) = var_x981 * (-1.0 + var_x486);
        IJth(rJacobian, 39, 39) = -var_x1156;
        IJth(rJacobian, 7, 40) = var_x963 * var_x976 * NV_Ith_S(mParameters, 0);
        IJth(rJacobian, 9, 40) = -var_x486 * var_x980;
        IJth(rJacobian, 40, 40) = -var_x1176;
    }

    N_Vector Cellohara_rudy_2011_epiFromCellMLCvode::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const N_Vector & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__intracellular_ions__cai = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__CaMK__CaMKt = NV_Ith_S(rY, 2);
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__intracellular_ions__nai = NV_Ith_S(rY, 3);
        // Units: millimolar; Initial value: 7.0
        double var_chaste_interface__intracellular_ions__nass = NV_Ith_S(rY, 4);
        // Units: millimolar; Initial value: 7.0
        double var_chaste_interface__intracellular_ions__ki = NV_Ith_S(rY, 5);
        // Units: millimolar; Initial value: 145.0
        double var_chaste_interface__intracellular_ions__kss = NV_Ith_S(rY, 6);
        // Units: millimolar; Initial value: 145.0
        double var_chaste_interface__intracellular_ions__cass = NV_Ith_S(rY, 7);
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__intracellular_ions__cansr = NV_Ith_S(rY, 8);
        // Units: millimolar; Initial value: 1.2
        double var_chaste_interface__INa__m = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__INa__hf = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__hs = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__j = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__hsp = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__jp = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INaL__mL = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__INaL__hL = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INaL__hLp = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__d = NV_Ith_S(rY, 25);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ICaL__ff = NV_Ith_S(rY, 26);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fs = NV_Ith_S(rY, 27);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcaf = NV_Ith_S(rY, 28);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcas = NV_Ith_S(rY, 29);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__jca = NV_Ith_S(rY, 30);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__ffp = NV_Ith_S(rY, 31);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcafp = NV_Ith_S(rY, 32);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__nca = NV_Ith_S(rY, 33);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKr__xrf = NV_Ith_S(rY, 34);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKr__xrs = NV_Ith_S(rY, 35);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKs__xs1 = NV_Ith_S(rY, 36);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKs__xs2 = NV_Ith_S(rY, 37);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IK1__xk1 = NV_Ith_S(rY, 38);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ryr__Jrelnp = NV_Ith_S(rY, 39);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ryr__Jrelp = NV_Ith_S(rY, 40);
        // Units: dimensionless; Initial value: 0.0
        
        // Mathematics
        const double var_CaMK__CaMKo = 0.050000000000000003; // dimensionless
        const double var_CaMK__KmCaM = 0.0015; // millimolar
        const double var_CaMK__KmCaMK = 0.14999999999999999; // millimolar
        const double var_ICaL__Aff = 0.59999999999999998; // dimensionless
        const double var_ICaL__Afs = 1.0 - var_ICaL__Aff; // dimensionless
        const double var_ICaL__f = var_ICaL__Aff * var_chaste_interface__ICaL__ff + var_ICaL__Afs * var_chaste_interface__ICaL__fs; // dimensionless
        const double var_ICaL__fp = var_ICaL__Aff * var_chaste_interface__ICaL__ffp + var_ICaL__Afs * var_chaste_interface__ICaL__fs; // dimensionless
        const double var_INa__Ahf = 0.98999999999999999; // dimensionless
        const double var_INa__Ahs = 1.0 - var_INa__Ahf; // dimensionless
        const double var_INa__h = var_INa__Ahf * var_chaste_interface__INa__hf + var_INa__Ahs * var_chaste_interface__INa__hs; // dimensionless
        const double var_INa__hp = var_INa__Ahf * var_chaste_interface__INa__hf + var_INa__Ahs * var_chaste_interface__INa__hsp; // dimensionless
        const double var_INaCa_i__KmCaAct = 0.00014999999999999999; // millimolar
        const double var_INaCa_i__kasymm = 12.5; // dimensionless
        const double var_INaCa_i__kcaoff = 5000.0; // per_millisecond
        const double var_INaCa_i__k2_i = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k2_ss = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k5_i = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k5_ss = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__kcaon = 1500000.0; // per_millisecond
        const double var_INaCa_i__kna1 = 15.0; // per_millisecond
        const double var_INaCa_i__kna2 = 5.0; // per_millisecond
        const double var_INaCa_i__kna3 = 88.120000000000005; // per_millisecond
        const double var_INaCa_i__qca = 0.16700000000000001; // dimensionless
        const double var_INaCa_i__qna = 0.52239999999999998; // dimensionless
        const double var_INaCa_i__wca = 60000.0; // dimensionless
        const double var_INaCa_i__wna = 60000.0; // dimensionless
        const double var_INaCa_i__wnaca = 5000.0; // dimensionless
        const double var_INaK__H = 9.9999999999999995e-8; // millimolar
        const double var_INaK__Khp = 1.698e-7; // millimolar
        const double var_INaK__Kki = 0.5; // per_millisecond
        const double var_INaK__Kko = 0.35820000000000002; // per_millisecond
        const double var_INaK__Kmgatp = 1.698e-7; // millimolar
        const double var_INaK__Knai0 = 9.0730000000000004; // millimolar
        const double var_INaK__Knao0 = 27.780000000000001; // millimolar
        const double var_INaK__Knap = 224.0; // millimolar
        const double var_INaK__Kxkur = 292.0; // millimolar
        const double var_INaK__MgADP = 0.050000000000000003; // millimolar
        const double var_INaK__MgATP = 9.8000000000000007; // millimolar
        const double var_INaK__delta = -0.155; // millivolt
        const double var_INaK__eP = 4.2000000000000002; // dimensionless
        const double var_INaK__k1m = 182.40000000000001; // per_millisecond
        const double var_INaK__b1 = var_INaK__MgADP * var_INaK__k1m; // dimensionless
        const double var_INaK__k1p = 949.5; // per_millisecond
        const double var_INaK__k2m = 39.399999999999999; // per_millisecond
        const double var_INaK__k2p = 687.20000000000005; // per_millisecond
        const double var_INaK__a2 = var_INaK__k2p; // dimensionless
        const double var_INaK__k3m = 79300.0; // per_millisecond
        const double var_INaK__k3p = 1899.0; // per_millisecond
        const double var_INaK__k4m = 40.0; // per_millisecond
        const double var_INaK__k4p = 639.0; // per_millisecond
        const double var_INaK__a4 = var_INaK__MgATP * var_INaK__k4p / ((1.0 + var_INaK__MgATP / var_INaK__Kmgatp) * var_INaK__Kmgatp); // dimensionless
        const double var_IpCa__KmCap = 0.00050000000000000001; // millimolar
        const double var_environment__celltype = 1.0; // dimensionless
        const double var_ICaL__PCa = ((var_environment__celltype == 1.0) ? (1.2 * NV_Ith_S(mParameters, 7)) : ((var_environment__celltype == 2.0) ? (2.5 * NV_Ith_S(mParameters, 7)) : (NV_Ith_S(mParameters, 7)))); // dimensionless
        const double var_ICaL__PCaK = 0.00035740000000000001 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCaNa = 0.00125 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCap = 1.1000000000000001 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCaKp = 0.00035740000000000001 * var_ICaL__PCap; // dimensionless
        const double var_ICaL__PCaNap = 0.00125 * var_ICaL__PCap; // dimensionless
        const double var_IK1__GK1 = ((var_environment__celltype == 1.0) ? (1.2 * NV_Ith_S(mParameters, 12)) : ((var_environment__celltype == 2.0) ? (1.3 * NV_Ith_S(mParameters, 12)) : (NV_Ith_S(mParameters, 12)))); // milliS_per_microF
        const double var_IKb__GKb = ((var_environment__celltype == 1.0) ? (0.59999999999999998 * NV_Ith_S(mParameters, 9)) : (NV_Ith_S(mParameters, 9))); // milliS_per_microF
        const double var_IKr__GKr = ((var_environment__celltype == 1.0) ? (1.3 * NV_Ith_S(mParameters, 14)) : ((var_environment__celltype == 2.0) ? (0.80000000000000004 * NV_Ith_S(mParameters, 14)) : (NV_Ith_S(mParameters, 14)))); // milliS_per_microF
        const double var_IKs__GKs = ((var_environment__celltype == 1.0) ? (1.3999999999999999 * NV_Ith_S(mParameters, 15)) : (NV_Ith_S(mParameters, 15))); // milliS_per_microF
        const double var_INaCa_i__Gncx = ((var_environment__celltype == 1.0) ? (1.1000000000000001 * NV_Ith_S(mParameters, 16)) : ((var_environment__celltype == 2.0) ? (1.3999999999999999 * NV_Ith_S(mParameters, 16)) : (NV_Ith_S(mParameters, 16)))); // milliS_per_microF
        const double var_INaK__Pnak = ((var_environment__celltype == 1.0) ? (0.90000000000000002 * NV_Ith_S(mParameters, 17)) : ((var_environment__celltype == 2.0) ? (0.69999999999999996 * NV_Ith_S(mParameters, 17)) : (NV_Ith_S(mParameters, 17)))); // milliS_per_microF
        const double var_INaL__GNaL = ((var_environment__celltype == 1.0) ? (0.59999999999999998 * NV_Ith_S(mParameters, 13)) : (NV_Ith_S(mParameters, 13))); // milliS_per_microF
        const double var_Ito__Gto = (((var_environment__celltype == 1.0) || (var_environment__celltype == 2.0)) ? (4.0 * NV_Ith_S(mParameters, 18)) : (NV_Ith_S(mParameters, 18))); // milliS_per_microF
        const double var_SERCA__upScale = ((var_environment__celltype == 1.0) ? (1.3) : (1.0)); // dimensionless
        const double var_IK1__GK1_total = sqrt(NV_Ith_S(mParameters, 3)) * var_IK1__GK1; // milliS_per_microF
        const double var_IKr__GKr_total = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 3)) * var_IKr__GKr; // milliS_per_microF
        const double var_INaCa_i__h10_i = 1.0 + (1.0 + NV_Ith_S(mParameters, 4) / var_INaCa_i__kna2) * NV_Ith_S(mParameters, 4) / var_INaCa_i__kna1 + var_INaCa_i__kasymm; // dimensionless
        const double var_INaCa_i__h10_ss = 1.0 + (1.0 + NV_Ith_S(mParameters, 4) / var_INaCa_i__kna2) * NV_Ith_S(mParameters, 4) / var_INaCa_i__kna1 + var_INaCa_i__kasymm; // dimensionless
        const double var_INaCa_i__h11_i = pow(NV_Ith_S(mParameters, 4), 2) / (var_INaCa_i__h10_i * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h11_ss = pow(NV_Ith_S(mParameters, 4), 2) / (var_INaCa_i__h10_ss * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h12_i = 1 / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__h12_ss = 1 / var_INaCa_i__h10_ss; // dimensionless
        const double var_INaCa_i__k1_i = var_INaCa_i__h12_i * var_INaCa_i__kcaon * NV_Ith_S(mParameters, 2); // dimensionless
        const double var_INaCa_i__k1_ss = var_INaCa_i__h12_ss * var_INaCa_i__kcaon * NV_Ith_S(mParameters, 2); // dimensionless
        const double var_intracellular_ions__BSLmax = 1.1240000000000001; // millimolar
        const double var_intracellular_ions__BSRmax = 0.047; // millimolar
        const double var_intracellular_ions__KmBSL = 0.0086999999999999994; // millimolar
        const double var_intracellular_ions__KmBSR = 0.00087000000000000001; // millimolar
        const double var_IKs__KsCa = 1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__intracellular_ions__cai), 1.3999999999999999)); // dimensionless
        const double var_IKs__GKs_total = var_IKs__GKs * var_IKs__KsCa; // milliS_per_microF
        const double var_INaCa_i__allo_i = 1 / (1.0 + pow(var_INaCa_i__KmCaAct, 2) / pow(var_chaste_interface__intracellular_ions__cai, 2)); // dimensionless
        const double var_IpCa__IpCa = NV_Ith_S(mParameters, 10) * var_chaste_interface__intracellular_ions__cai / (var_IpCa__KmCap + var_chaste_interface__intracellular_ions__cai); // microA_per_microF
        const double var_IpCa__IpCa_converted = HeartConfig::Instance()->GetCapacitance() * var_IpCa__IpCa; // uA_per_cm2
        const double var_SERCA__Jupnp = 0.0043750000000000004 * var_SERCA__upScale * var_chaste_interface__intracellular_ions__cai / (0.00092000000000000003 + var_chaste_interface__intracellular_ions__cai); // millimolar_per_millisecond
        const double var_SERCA__Jupp = 0.01203125 * var_SERCA__upScale * var_chaste_interface__intracellular_ions__cai / (0.00075000000000000002 + var_chaste_interface__intracellular_ions__cai); // millimolar_per_millisecond
        const double var_SERCA__Jleak = 0.00026249999999999998 * var_chaste_interface__intracellular_ions__cansr; // millimolar_per_millisecond
        const double var_CaMK__CaMKb = (1.0 - var_chaste_interface__CaMK__CaMKt) * var_CaMK__CaMKo / (1.0 + var_CaMK__KmCaM / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_ICaL__fICaLp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_INa__fINap = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_INaCa_i__allo_ss = 1 / (1.0 + pow(var_INaCa_i__KmCaAct, 2) / pow(var_chaste_interface__intracellular_ions__cass, 2)); // dimensionless
        const double var_INaL__fINaLp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_SERCA__fJupp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_SERCA__Jup = (-var_SERCA__Jleak + (1.0 - var_SERCA__fJupp) * var_SERCA__Jupnp + var_SERCA__Jupp * var_SERCA__fJupp) * NV_Ith_S(mParameters, 1); // millimolar_per_millisecond
        const double var_intracellular_ions__Bcass = 1 / (1.0 + var_intracellular_ions__BSLmax * var_intracellular_ions__KmBSL / pow((var_intracellular_ions__KmBSL + var_chaste_interface__intracellular_ions__cass), 2) + var_intracellular_ions__BSRmax * var_intracellular_ions__KmBSR / pow((var_intracellular_ions__KmBSR + var_chaste_interface__intracellular_ions__cass), 2)); // dimensionless
        const double var_intracellular_ions__cmdnmax_b = 0.050000000000000003; // millimolar
        const double var_intracellular_ions__cmdnmax = ((var_environment__celltype == 1.0) ? (1.3 * var_intracellular_ions__cmdnmax_b) : (var_intracellular_ions__cmdnmax_b)); // millimolar
        const double var_intracellular_ions__kmcmdn = 0.0023800000000000002; // millimolar
        const double var_intracellular_ions__kmtrpn = 0.00050000000000000001; // millimolar
        const double var_INaCa_i__h4_i = 1.0 + (1.0 + var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna2) * var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna1; // dimensionless
        const double var_INaCa_i__h5_i = pow(var_chaste_interface__intracellular_ions__nai, 2) / (var_INaCa_i__h4_i * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h6_i = 1 / var_INaCa_i__h4_i; // dimensionless
        const double var_INaCa_i__k6_i = var_INaCa_i__h6_i * var_INaCa_i__kcaon * var_chaste_interface__intracellular_ions__cai; // dimensionless
        const double var_INaK__P = var_INaK__eP / (1.0 + var_INaK__H / var_INaK__Khp + var_chaste_interface__intracellular_ions__nai / var_INaK__Knap + var_chaste_interface__intracellular_ions__ki / var_INaK__Kxkur); // dimensionless
        const double var_INaK__b3 = var_INaK__H * var_INaK__P * var_INaK__k3m / (1.0 + var_INaK__MgATP / var_INaK__Kmgatp); // dimensionless
        const double var_INaCa_i__h4_ss = 1.0 + (1.0 + var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna2) * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna1; // dimensionless
        const double var_INaCa_i__h5_ss = pow(var_chaste_interface__intracellular_ions__nass, 2) / (var_INaCa_i__h4_ss * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h6_ss = 1 / var_INaCa_i__h4_ss; // dimensionless
        const double var_INaCa_i__k6_ss = var_INaCa_i__h6_ss * var_INaCa_i__kcaon * var_chaste_interface__intracellular_ions__cass; // dimensionless
        const double var_intracellular_ions__trpnmax = 0.070000000000000007; // millimolar
        const double var_intracellular_ions__Bcai = 1 / (1.0 + var_intracellular_ions__cmdnmax * var_intracellular_ions__kmcmdn / pow((var_chaste_interface__intracellular_ions__cai + var_intracellular_ions__kmcmdn), 2) + var_intracellular_ions__kmtrpn * var_intracellular_ions__trpnmax / pow((var_chaste_interface__intracellular_ions__cai + var_intracellular_ions__kmtrpn), 2)); // dimensionless
        const double var_membrane__Istim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_ICaL__Afcaf = 0.29999999999999999 + 0.59999999999999998 / (1.0 + exp(-1.0 + 0.10000000000000001 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_ICaL__Afcas = 1.0 - var_ICaL__Afcaf; // dimensionless
        const double var_ICaL__fca = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcaf + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fcap = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcafp + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_IK1__rk1 = 1 / (1.0 + exp(11.145054250500367 + 0.10534077741493732 * var_chaste_interface__membrane__v - 0.27388602127883704 * NV_Ith_S(mParameters, 3))); // millisecond
        const double var_IKb__xkb = 1 / (1.0 + exp(0.78953107960741553 - 0.054525627044711013 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_IKr__Axrf = 1 / (1.0 + exp(1.4344412457471867 + 0.026171159382360639 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_IKr__Axrs = 1.0 - var_IKr__Axrf; // dimensionless
        const double var_IKr__rkr = 1 / ((1.0 + exp(0.73333333333333328 + 0.013333333333333334 * var_chaste_interface__membrane__v)) * (1.0 + exp(-0.33333333333333331 + 0.033333333333333333 * var_chaste_interface__membrane__v))); // dimensionless
        const double var_IKr__xr = var_IKr__Axrf * var_chaste_interface__IKr__xrf + var_IKr__Axrs * var_chaste_interface__IKr__xrs; // dimensionless
        const double var_ICaL__PhiCaK = ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) / NV_Ith_S(mParameters, 5))) ? (-9.9999999999999995e-8 * (-0.75 * NV_Ith_S(mParameters, 3) + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * (-0.75 * NV_Ith_S(mParameters, 3) + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(9.9999999999999995e-8)) + 9.9999999999999995e-8 * (-0.75 * NV_Ith_S(mParameters, 3) + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(-9.9999999999999995e-8))) * (9.9999999999999995e-8 * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) / NV_Ith_S(mParameters, 5) + var_chaste_interface__membrane__v) * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19))) : (pow(NV_Ith_S(mParameters, 5), 2) * (-0.75 * NV_Ith_S(mParameters, 3) + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))) * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))); // dimensionless
        const double var_ICaL__ICaK = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaK * var_ICaL__PhiCaK * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaKp * var_ICaL__PhiCaK * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaK_converted = HeartConfig::Instance()->GetCapacitance() * var_ICaL__ICaK; // uA_per_cm2
        const double var_ICaL__PhiCaL = ((fabs(var_chaste_interface__membrane__v) < 4.9999999999999998e-8 * fabs(NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) / NV_Ith_S(mParameters, 5))) ? (-1.9999999999999999e-7 * (-0.34100000000000003 * NV_Ith_S(mParameters, 2) + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) / NV_Ith_S(mParameters, 5) + var_chaste_interface__membrane__v) * (1.9999999999999999e-7 * (-0.34100000000000003 * NV_Ith_S(mParameters, 2) + var_chaste_interface__intracellular_ions__cass * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(9.9999999999999995e-8)) + 1.9999999999999999e-7 * (-0.34100000000000003 * NV_Ith_S(mParameters, 2) + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(-9.9999999999999995e-8))) * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19))) : (4.0 * pow(NV_Ith_S(mParameters, 5), 2) * (-0.34100000000000003 * NV_Ith_S(mParameters, 2) + var_chaste_interface__intracellular_ions__cass * exp(2.0 * var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))) * var_chaste_interface__membrane__v / ((-1.0 + exp(2.0 * var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))) * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))); // dimensionless
        const double var_ICaL__ICaL = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCa * var_ICaL__PhiCaL * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCap * var_ICaL__PhiCaL * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaL_converted = HeartConfig::Instance()->GetCapacitance() * var_ICaL__ICaL; // uA_per_cm2
        const double var_ICaL__PhiCaNa = ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) / NV_Ith_S(mParameters, 5))) ? (-9.9999999999999995e-8 * (-0.75 * NV_Ith_S(mParameters, 4) + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * (-0.75 * NV_Ith_S(mParameters, 4) + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(9.9999999999999995e-8)) + 9.9999999999999995e-8 * (-0.75 * NV_Ith_S(mParameters, 4) + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(-9.9999999999999995e-8))) * (9.9999999999999995e-8 * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) / NV_Ith_S(mParameters, 5) + var_chaste_interface__membrane__v) * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19))) : (pow(NV_Ith_S(mParameters, 5), 2) * (-0.75 * NV_Ith_S(mParameters, 4) + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))) * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))); // dimensionless
        const double var_ICaL__ICaNa = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaNa * var_ICaL__PhiCaNa * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaNap * var_ICaL__PhiCaNa * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaNa_converted = HeartConfig::Instance()->GetCapacitance() * var_ICaL__ICaNa; // uA_per_cm2
        const double var_ICab__ICab = ((fabs(var_chaste_interface__membrane__v) < 4.9999999999999998e-8 * fabs(NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) / NV_Ith_S(mParameters, 5))) ? (-1.9999999999999999e-7 * (-0.34100000000000003 * NV_Ith_S(mParameters, 2) + var_chaste_interface__intracellular_ions__cai * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) / NV_Ith_S(mParameters, 5) + var_chaste_interface__membrane__v) * (1.9999999999999999e-7 * (-0.34100000000000003 * NV_Ith_S(mParameters, 2) + var_chaste_interface__intracellular_ions__cai * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(9.9999999999999995e-8)) + 1.9999999999999999e-7 * (-0.34100000000000003 * NV_Ith_S(mParameters, 2) + var_chaste_interface__intracellular_ions__cai * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 5) / (-1.0 + exp(-9.9999999999999995e-8))) * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19))) : (4.0 * pow(NV_Ith_S(mParameters, 5), 2) * (-0.34100000000000003 * NV_Ith_S(mParameters, 2) + var_chaste_interface__intracellular_ions__cai * exp(2.0 * var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))) * NV_Ith_S(mParameters, 8) * var_chaste_interface__membrane__v / ((-1.0 + exp(2.0 * var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))) * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19)))); // microA_per_microF
        const double var_ICab__ICab_converted = HeartConfig::Instance()->GetCapacitance() * var_ICab__ICab; // uA_per_cm2
        const double var_INaCa_i__hca = exp(var_INaCa_i__qca * var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19))); // dimensionless
        const double var_INaCa_i__hna = exp(var_INaCa_i__qna * var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19))); // dimensionless
        const double var_INaCa_i__h1_i = 1.0 + (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h1_ss = 1.0 + (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h2_i = var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nai / (var_INaCa_i__h1_i * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h2_ss = var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nass / (var_INaCa_i__h1_ss * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h3_i = 1 / var_INaCa_i__h1_i; // dimensionless
        const double var_INaCa_i__h3_ss = 1 / var_INaCa_i__h1_ss; // dimensionless
        const double var_INaCa_i__h7_i = 1.0 + (1.0 + 1 / var_INaCa_i__hna) * NV_Ith_S(mParameters, 4) / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h7_ss = 1.0 + (1.0 + 1 / var_INaCa_i__hna) * NV_Ith_S(mParameters, 4) / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h8_i = NV_Ith_S(mParameters, 4) / (var_INaCa_i__h7_i * var_INaCa_i__hna * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h8_ss = NV_Ith_S(mParameters, 4) / (var_INaCa_i__h7_ss * var_INaCa_i__hna * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h9_i = 1 / var_INaCa_i__h7_i; // dimensionless
        const double var_INaCa_i__h9_ss = 1 / var_INaCa_i__h7_ss; // dimensionless
        const double var_INaCa_i__k3p_i = var_INaCa_i__h9_i * var_INaCa_i__wca; // dimensionless
        const double var_INaCa_i__k3p_ss = var_INaCa_i__h9_ss * var_INaCa_i__wca; // dimensionless
        const double var_INaCa_i__k3pp_i = var_INaCa_i__h8_i * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k3_i = var_INaCa_i__k3p_i + var_INaCa_i__k3pp_i; // dimensionless
        const double var_INaCa_i__k3pp_ss = var_INaCa_i__h8_ss * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k3_ss = var_INaCa_i__k3p_ss + var_INaCa_i__k3pp_ss; // dimensionless
        const double var_INaCa_i__k4p_i = var_INaCa_i__h3_i * var_INaCa_i__wca / var_INaCa_i__hca; // dimensionless
        const double var_INaCa_i__k4p_ss = var_INaCa_i__h3_ss * var_INaCa_i__wca / var_INaCa_i__hca; // dimensionless
        const double var_INaCa_i__k4pp_i = var_INaCa_i__h2_i * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k4_i = var_INaCa_i__k4p_i + var_INaCa_i__k4pp_i; // dimensionless
        const double var_INaCa_i__k4pp_ss = var_INaCa_i__h2_ss * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k4_ss = var_INaCa_i__k4p_ss + var_INaCa_i__k4pp_ss; // dimensionless
        const double var_INaCa_i__k7_i = var_INaCa_i__h2_i * var_INaCa_i__h5_i * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k7_ss = var_INaCa_i__h2_ss * var_INaCa_i__h5_ss * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k8_i = var_INaCa_i__h11_i * var_INaCa_i__h8_i * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k8_ss = var_INaCa_i__h11_ss * var_INaCa_i__h8_ss * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__x1_i = (var_INaCa_i__k2_i + var_INaCa_i__k3_i) * var_INaCa_i__k5_i * var_INaCa_i__k7_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k2_i * var_INaCa_i__k4_i; // dimensionless
        const double var_INaCa_i__x1_ss = (var_INaCa_i__k2_ss + var_INaCa_i__k3_ss) * var_INaCa_i__k5_ss * var_INaCa_i__k7_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k2_ss * var_INaCa_i__k4_ss; // dimensionless
        const double var_INaCa_i__x2_i = (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k4_i * var_INaCa_i__k6_i + (var_INaCa_i__k4_i + var_INaCa_i__k5_i) * var_INaCa_i__k1_i * var_INaCa_i__k7_i; // dimensionless
        const double var_INaCa_i__x2_ss = (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k4_ss * var_INaCa_i__k6_ss + (var_INaCa_i__k4_ss + var_INaCa_i__k5_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k7_ss; // dimensionless
        const double var_INaCa_i__x3_i = (var_INaCa_i__k2_i + var_INaCa_i__k3_i) * var_INaCa_i__k6_i * var_INaCa_i__k8_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k1_i * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__x3_ss = (var_INaCa_i__k2_ss + var_INaCa_i__k3_ss) * var_INaCa_i__k6_ss * var_INaCa_i__k8_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__x4_i = (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k3_i * var_INaCa_i__k5_i + (var_INaCa_i__k4_i + var_INaCa_i__k5_i) * var_INaCa_i__k2_i * var_INaCa_i__k8_i; // dimensionless
        const double var_INaCa_i__E1_i = var_INaCa_i__x1_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E2_i = var_INaCa_i__x2_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E3_i = var_INaCa_i__x3_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E4_i = var_INaCa_i__x4_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__JncxCa_i = var_INaCa_i__E2_i * var_INaCa_i__k2_i - var_INaCa_i__E1_i * var_INaCa_i__k1_i; // millimolar_per_millisecond
        const double var_INaCa_i__JncxNa_i = var_INaCa_i__E3_i * var_INaCa_i__k4pp_i - var_INaCa_i__E2_i * var_INaCa_i__k3pp_i + 3.0 * var_INaCa_i__E4_i * var_INaCa_i__k7_i - 3.0 * var_INaCa_i__E1_i * var_INaCa_i__k8_i; // millimolar_per_millisecond
        const double var_INaCa_i__x4_ss = (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k3_ss * var_INaCa_i__k5_ss + (var_INaCa_i__k4_ss + var_INaCa_i__k5_ss) * var_INaCa_i__k2_ss * var_INaCa_i__k8_ss; // dimensionless
        const double var_INaCa_i__E1_ss = var_INaCa_i__x1_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E2_ss = var_INaCa_i__x2_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E3_ss = var_INaCa_i__x3_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E4_ss = var_INaCa_i__x4_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__JncxCa_ss = var_INaCa_i__E2_ss * var_INaCa_i__k2_ss - var_INaCa_i__E1_ss * var_INaCa_i__k1_ss; // millimolar_per_millisecond
        const double var_INaCa_i__JncxNa_ss = var_INaCa_i__E3_ss * var_INaCa_i__k4pp_ss - var_INaCa_i__E2_ss * var_INaCa_i__k3pp_ss + 3.0 * var_INaCa_i__E4_ss * var_INaCa_i__k7_ss - 3.0 * var_INaCa_i__E1_ss * var_INaCa_i__k8_ss; // millimolar_per_millisecond
        const double var_INaK__Knai = var_INaK__Knai0 * exp(0.33333333333333331 * var_INaK__delta * var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19))); // millimolar
        const double var_INaK__Knao = var_INaK__Knao0 * exp(0.33333333333333331 * (1.0 - var_INaK__delta) * var_chaste_interface__membrane__v * NV_Ith_S(mParameters, 5) / (NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19))); // millimolar
        const double var_INaK__a1 = pow(var_chaste_interface__intracellular_ions__nai, 3) * var_INaK__k1p / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__ki / var_INaK__Kki), 2) + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3)) * pow(var_INaK__Knai, 3)); // dimensionless
        const double var_INaK__a3 = pow(NV_Ith_S(mParameters, 3), 2) * var_INaK__k3p / ((-1.0 + pow((1.0 + NV_Ith_S(mParameters, 3) / var_INaK__Kko), 2) + pow((1.0 + NV_Ith_S(mParameters, 4) / var_INaK__Knao), 3)) * pow(var_INaK__Kko, 2)); // dimensionless
        const double var_INaK__b2 = pow(NV_Ith_S(mParameters, 4), 3) * var_INaK__k2m / ((-1.0 + pow((1.0 + NV_Ith_S(mParameters, 3) / var_INaK__Kko), 2) + pow((1.0 + NV_Ith_S(mParameters, 4) / var_INaK__Knao), 3)) * pow(var_INaK__Knao, 3)); // dimensionless
        const double var_INaK__b4 = pow(var_chaste_interface__intracellular_ions__ki, 2) * var_INaK__k4m / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__ki / var_INaK__Kki), 2) + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3)) * pow(var_INaK__Kki, 2)); // dimensionless
        const double var_INaK__x1 = var_INaK__a1 * var_INaK__a2 * var_INaK__a4 + var_INaK__a1 * var_INaK__a2 * var_INaK__b3 + var_INaK__a2 * var_INaK__b3 * var_INaK__b4 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__x2 = var_INaK__a1 * var_INaK__a2 * var_INaK__a3 + var_INaK__a2 * var_INaK__a3 * var_INaK__b4 + var_INaK__a3 * var_INaK__b1 * var_INaK__b4 + var_INaK__b1 * var_INaK__b2 * var_INaK__b4; // dimensionless
        const double var_INaK__x3 = var_INaK__a2 * var_INaK__a3 * var_INaK__a4 + var_INaK__a3 * var_INaK__a4 * var_INaK__b1 + var_INaK__a4 * var_INaK__b1 * var_INaK__b2 + var_INaK__b1 * var_INaK__b2 * var_INaK__b3; // dimensionless
        const double var_INaK__x4 = var_INaK__a1 * var_INaK__a3 * var_INaK__a4 + var_INaK__a1 * var_INaK__a4 * var_INaK__b2 + var_INaK__a1 * var_INaK__b2 * var_INaK__b3 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__E1 = var_INaK__x1 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E2 = var_INaK__x2 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E3 = var_INaK__x3 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E4 = var_INaK__x4 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__JnakK = 2.0 * var_INaK__E4 * var_INaK__b1 - 2.0 * var_INaK__E3 * var_INaK__a1; // millimolar_per_millisecond
        const double var_INaK__JnakNa = 3.0 * var_INaK__E1 * var_INaK__a3 - 3.0 * var_INaK__E2 * var_INaK__b3; // millimolar_per_millisecond
        const double var_physical_constants__zca = 2.0; // dimensionless
        const double var_physical_constants__zk = 1.0; // dimensionless
        const double var_physical_constants__zna = 1.0; // dimensionless
        const double var_INaCa_i__INaCa_i = 0.80000000000000004 * (var_INaCa_i__JncxCa_i * var_physical_constants__zca + var_INaCa_i__JncxNa_i * var_physical_constants__zna) * var_INaCa_i__Gncx * var_INaCa_i__allo_i; // microA_per_microF
        const double var_INaCa_i__INaCa_i_converted = HeartConfig::Instance()->GetCapacitance() * var_INaCa_i__INaCa_i; // uA_per_cm2
        const double var_INaCa_i__INaCa_ss = 0.20000000000000001 * (var_INaCa_i__JncxCa_ss * var_physical_constants__zca + var_INaCa_i__JncxNa_ss * var_physical_constants__zna) * var_INaCa_i__Gncx * var_INaCa_i__allo_ss; // microA_per_microF
        const double var_INaCa_i__INaCa_ss_converted = HeartConfig::Instance()->GetCapacitance() * var_INaCa_i__INaCa_ss; // uA_per_cm2
        const double var_INaK__INaK = (var_INaK__JnakK * var_physical_constants__zk + var_INaK__JnakNa * var_physical_constants__zna) * var_INaK__Pnak; // microA_per_microF
        const double var_INaK__INaK_converted = HeartConfig::Instance()->GetCapacitance() * var_INaK__INaK; // uA_per_cm2
        const double var_reversal_potentials__EK = NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) * log(NV_Ith_S(mParameters, 3) / var_chaste_interface__intracellular_ions__ki) / NV_Ith_S(mParameters, 5); // millivolt
        const double var_IK1__IK1 = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IK1__GK1_total * var_IK1__rk1 * var_chaste_interface__IK1__xk1; // microA_per_microF
        const double var_IK1__IK1_converted = HeartConfig::Instance()->GetCapacitance() * var_IK1__IK1; // uA_per_cm2
        const double var_IKb__IKb = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IKb__GKb * var_IKb__xkb; // microA_per_microF
        const double var_IKb__IKb_converted = HeartConfig::Instance()->GetCapacitance() * var_IKb__IKb; // uA_per_cm2
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IKr__GKr_total * var_IKr__rkr * var_IKr__xr; // microA_per_microF
        const double var_IKr__IKr_converted = HeartConfig::Instance()->GetCapacitance() * var_IKr__IKr; // uA_per_cm2
        const double var_reversal_potentials__ENa = NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) * log(NV_Ith_S(mParameters, 4) / var_chaste_interface__intracellular_ions__nai) / NV_Ith_S(mParameters, 5); // millivolt
        const double var_INa__INa = pow(var_chaste_interface__INa__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - var_INa__fINap) * var_INa__h * var_chaste_interface__INa__j + var_INa__fINap * var_INa__hp * var_chaste_interface__INa__jp) * NV_Ith_S(mParameters, 11); // microA_per_microF
        const double var_INa__INa_converted = HeartConfig::Instance()->GetCapacitance() * var_INa__INa; // uA_per_cm2
        const double var_INaL__INaL = (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - var_INaL__fINaLp) * var_chaste_interface__INaL__hL + var_INaL__fINaLp * var_chaste_interface__INaL__hLp) * var_INaL__GNaL * var_chaste_interface__INaL__mL; // microA_per_microF
        const double var_INaL__INaL_converted = HeartConfig::Instance()->GetCapacitance() * var_INaL__INaL; // uA_per_cm2
        const double var_reversal_potentials__PKNa = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 19) * log((NV_Ith_S(mParameters, 4) * var_reversal_potentials__PKNa + NV_Ith_S(mParameters, 3)) / (var_chaste_interface__intracellular_ions__nai * var_reversal_potentials__PKNa + var_chaste_interface__intracellular_ions__ki)) / NV_Ith_S(mParameters, 5); // millivolt
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__membrane__v) * var_IKs__GKs_total * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // microA_per_microF
        const double var_IKs__IKs_converted = HeartConfig::Instance()->GetCapacitance() * var_IKs__IKs; // uA_per_cm2
        const double var_ryr__fJrelp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_ryr__Jrel = ((1.0 - var_ryr__fJrelp) * var_chaste_interface__ryr__Jrelnp + var_chaste_interface__ryr__Jrelp * var_ryr__fJrelp) * NV_Ith_S(mParameters, 0); // millimolar_per_millisecond

        N_Vector dqs = N_VNew_Serial(29);
        NV_Ith_S(dqs, 0) = var_SERCA__Jleak;
        NV_Ith_S(dqs, 1) = var_ryr__Jrel;
        NV_Ith_S(dqs, 2) = var_SERCA__Jup;
        NV_Ith_S(dqs, 3) = var_intracellular_ions__Bcai;
        NV_Ith_S(dqs, 4) = var_intracellular_ions__Bcass;
        NV_Ith_S(dqs, 5) = var_ICaL__ICaK_converted;
        NV_Ith_S(dqs, 6) = var_ICaL__ICaNa_converted;
        NV_Ith_S(dqs, 7) = var_ICaL__ICaL_converted;
        NV_Ith_S(dqs, 8) = var_ICab__ICab_converted;
        NV_Ith_S(dqs, 9) = var_IKb__IKb_converted;
        NV_Ith_S(dqs, 10) = var_IpCa__IpCa_converted;
        NV_Ith_S(dqs, 11) = var_INa__INa_converted;
        NV_Ith_S(dqs, 12) = var_INa__h;
        NV_Ith_S(dqs, 13) = var_IK1__IK1_converted;
        NV_Ith_S(dqs, 14) = var_IK1__GK1_total;
        NV_Ith_S(dqs, 15) = var_INaL__INaL_converted;
        NV_Ith_S(dqs, 16) = var_INaL__GNaL;
        NV_Ith_S(dqs, 17) = var_IKr__IKr_converted;
        NV_Ith_S(dqs, 18) = var_IKr__GKr_total;
        NV_Ith_S(dqs, 19) = var_IKs__IKs_converted;
        NV_Ith_S(dqs, 20) = var_IKs__GKs_total;
        NV_Ith_S(dqs, 21) = var_INaCa_i__INaCa_i_converted;
        NV_Ith_S(dqs, 22) = var_INaCa_i__INaCa_ss_converted;
        NV_Ith_S(dqs, 23) = var_INaK__INaK_converted;
        NV_Ith_S(dqs, 24) = var_membrane__Istim_converted;
        NV_Ith_S(dqs, 25) = var_Ito__Gto;
        NV_Ith_S(dqs, 26) = var_reversal_potentials__EK;
        NV_Ith_S(dqs, 27) = var_reversal_potentials__ENa;
        NV_Ith_S(dqs, 28) = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellohara_rudy_2011_epiFromCellMLCvode>::Initialise(void)
{
    this->mSystemName = "ohara_rudy_2011_epi";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";

    // NV_Ith_S(rY, 0):
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-87.0);

    // NV_Ith_S(rY, 1):
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0001);

    // NV_Ith_S(rY, 2):
    this->mVariableNames.push_back("CaMK__CaMKt");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 3):
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(7.0);

    // NV_Ith_S(rY, 4):
    this->mVariableNames.push_back("dyadic_space_sodium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(7.0);

    // NV_Ith_S(rY, 5):
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(145.0);

    // NV_Ith_S(rY, 6):
    this->mVariableNames.push_back("dyadic_space_potassium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(145.0);

    // NV_Ith_S(rY, 7):
    this->mVariableNames.push_back("dyadic_space_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0001);

    // NV_Ith_S(rY, 8):
    this->mVariableNames.push_back("NSR_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.2);

    // NV_Ith_S(rY, 9):
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.2);

    // NV_Ith_S(rY, 10):
    this->mVariableNames.push_back("INa__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 11):
    this->mVariableNames.push_back("INa__hf");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // NV_Ith_S(rY, 12):
    this->mVariableNames.push_back("INa__hs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // NV_Ith_S(rY, 13):
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // NV_Ith_S(rY, 14):
    this->mVariableNames.push_back("INa__hsp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // NV_Ith_S(rY, 15):
    this->mVariableNames.push_back("INa__jp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // NV_Ith_S(rY, 16):
    this->mVariableNames.push_back("INaL__mL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 17):
    this->mVariableNames.push_back("INaL__hL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // NV_Ith_S(rY, 18):
    this->mVariableNames.push_back("INaL__hLp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // NV_Ith_S(rY, 19):
    this->mVariableNames.push_back("Ito__a");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 20):
    this->mVariableNames.push_back("Ito__iF");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // NV_Ith_S(rY, 21):
    this->mVariableNames.push_back("Ito__iS");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // NV_Ith_S(rY, 22):
    this->mVariableNames.push_back("Ito__ap");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 23):
    this->mVariableNames.push_back("Ito__iFp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // NV_Ith_S(rY, 24):
    this->mVariableNames.push_back("Ito__iSp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // NV_Ith_S(rY, 25):
    this->mVariableNames.push_back("ICaL__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 26):
    this->mVariableNames.push_back("ICaL__ff");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // NV_Ith_S(rY, 27):
    this->mVariableNames.push_back("ICaL__fs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // NV_Ith_S(rY, 28):
    this->mVariableNames.push_back("ICaL__fcaf");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // NV_Ith_S(rY, 29):
    this->mVariableNames.push_back("ICaL__fcas");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // NV_Ith_S(rY, 30):
    this->mVariableNames.push_back("ICaL__jca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // NV_Ith_S(rY, 31):
    this->mVariableNames.push_back("ICaL__ffp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // NV_Ith_S(rY, 32):
    this->mVariableNames.push_back("ICaL__fcafp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // NV_Ith_S(rY, 33):
    this->mVariableNames.push_back("ICaL__nca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 34):
    this->mVariableNames.push_back("IKr__xrf");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 35):
    this->mVariableNames.push_back("IKr__xrs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 36):
    this->mVariableNames.push_back("IKs__xs1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 37):
    this->mVariableNames.push_back("IKs__xs2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 38):
    this->mVariableNames.push_back("IK1__xk1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // NV_Ith_S(rY, 39):
    this->mVariableNames.push_back("ryr__Jrelnp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 40):
    this->mVariableNames.push_back("ryr__Jrelp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // mParameters[0]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[1]:
    this->mParameterNames.push_back("SR_uptake_current_max");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[2]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[3]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[4]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[5]:
    this->mParameterNames.push_back("faraday_constant");
    this->mParameterUnits.push_back("coulomb_per_mole");

    // mParameters[6]:
    this->mParameterNames.push_back("gas_constant");
    this->mParameterUnits.push_back("joule_per_kilomole_kelvin");

    // mParameters[7]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane_background_calcium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_background_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_calcium_pump_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[13]:
    this->mParameterNames.push_back("membrane_persistent_sodium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[14]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[15]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[16]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[17]:
    this->mParameterNames.push_back("membrane_sodium_potassium_pump_current_permeability");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[18]:
    this->mParameterNames.push_back("membrane_transient_outward_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[19]:
    this->mParameterNames.push_back("temperature");
    this->mParameterUnits.push_back("kelvin");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_leak_current");
    this->mDerivedQuantityUnits.push_back("millimolar_per_millisecond");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("SR_release_current");
    this->mDerivedQuantityUnits.push_back("millimolar_per_millisecond");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("SR_uptake_current");
    this->mDerivedQuantityUnits.push_back("millimolar_per_millisecond");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("cytosolic_calcium_flux_scaling_from_intrinsic_buffers");
    this->mDerivedQuantityUnits.push_back("dimensionless");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("dyadic_space_calcium_flux_scaling_from_intrinsic_buffers");
    this->mDerivedQuantityUnits.push_back("dimensionless");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_channel_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_channel_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_background_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_background_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("membrane_calcium_pump_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [11]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [12]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_h_gate");
    this->mDerivedQuantityUnits.push_back("dimensionless");

    // Derived Quantity index [13]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [14]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("milliS_per_microF");

    // Derived Quantity index [15]:
    this->mDerivedQuantityNames.push_back("membrane_persistent_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [16]:
    this->mDerivedQuantityNames.push_back("membrane_persistent_sodium_current_conductance");
    this->mDerivedQuantityUnits.push_back("milliS_per_microF");

    // Derived Quantity index [17]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [18]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("milliS_per_microF");

    // Derived Quantity index [19]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [20]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("milliS_per_microF");

    // Derived Quantity index [21]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [22]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_dyadic_space_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [23]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_potassium_pump_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [24]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [25]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current_conductance");
    this->mDerivedQuantityUnits.push_back("milliS_per_microF");

    // Derived Quantity index [26]:
    this->mDerivedQuantityNames.push_back("potassium_reversal_potential");
    this->mDerivedQuantityUnits.push_back("millivolt");

    // Derived Quantity index [27]:
    this->mDerivedQuantityNames.push_back("sodium_reversal_potential");
    this->mDerivedQuantityUnits.push_back("millivolt");

    // Derived Quantity index [28]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("millisecond");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellohara_rudy_2011_epiFromCellMLCvode)

#endif // CHASTE_CVODE
